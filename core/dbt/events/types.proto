syntax = "proto3";

package proto_types;

import "google/protobuf/timestamp.proto";

// TimingInfo
message TimingInfoMsg {
    string name = 1;
    google.protobuf.Timestamp started_at = 2;
    google.protobuf.Timestamp completed_at = 3;
}

// NodeInfo
message NodeInfo {
    string node_path = 1;
    string node_name = 2;
    string unique_id = 3;
    string resource_type = 4;
    string materialized = 5;
    string node_status = 6;
    string node_started_at = 7;
    string node_finished_at = 8;
}

// RunResult
message RunResultMsg {
    string status = 1;
    string message = 2;
    repeated TimingInfoMsg timing_info = 3;
    string thread = 4;
    float execution_time = 5;
    map<string, string> adapter_response = 6;
    int32 num_failures = 7;
}

// ReferenceKey
message ReferenceKeyMsg {
    string database = 1;
    string schema = 2;
    string identifier = 3;
}

// ListOfStrings
message ListOfStrings {
   repeated string value = 1;
}


// A - Pre-project loading = 1

// A001 - 101
message MainReportVersion {
    string version = 1;
    int32 log_version = 2;
}

// A002 - 102
message MainReportArgs {
    map<string, string> args = 1;
}

// A003 - 103
message MainTrackingUserState {
    string user_state = 1;
}

// A004 - 104
message MergedFromState {
    int32 num_merged = 1;
    repeated string sample = 2;
}

// A005 - 105
message MissingProfileTarget {
    string profile_name = 1;
    string target_name = 2;
}

// Skipped A006, A007

// A008 - 108
message InvalidVarsYAML {
}

// A009 - 109
message DbtProjectError {
}

// A010 - 110
message DbtProjectErrorException {
    string exc = 1;
}

// A011 - 111
message DbtProfileError {
}

// A012 - 112
message DbtProfileErrorException {
    string exc = 1;
}

// A013 - 113
message ProfileListTitle {
}

// A014 - 114
message ListSingleProfile {
    string profile = 1;
}

// A015 - 115
message NoDefinedProfiles {
}

// A016 - 116
message ProfileHelpMessage {
}

// A017 - 117
message StarterProjectPath {
    string dir = 1;
}

// A018 - 118
message ConfigFolderDirectory {
    string dir = 1;
}

// A019 - 119
message NoSampleProfileFound {
    string adapter = 1;
}

// A020 - 120
message ProfileWrittenWithSample {
    string name = 1;
    string path = 2;
}

// A021 - 121
message ProfileWrittenWithTargetTemplateYAML {
    string name = 1;
    string path = 2;
}

// A022 - 122
message ProfileWrittenWithProjectTemplateYAML {
    string name = 1;
    string path = 2;
}

// A023 - 123
message SettingUpProfile {
}

// A024 - 124
message InvalidProfileTemplateYAML {
}

// A025 - 125
message ProjectNameAlreadyExists {
    string name = 1;
}

// A026 - 126
message ProjectCreated {
    string project_name = 1;
    string docs_url = 2;
    string slack_url = 3;
}

// D - Deprecation = 2

// D001 - 201
message PackageRedirectDeprecation {
    string old_name = 1;
    string new_name = 2;
}

// D002 - 202
message PackageInstallPathDeprecation {
}

// D003 - 203
message ConfigSourcePathDeprecation {
    string deprecated_path = 1;
    string exp_path = 2;
}

// D004 - 204
message ConfigDataPathDeprecation {
    string deprecated_path = 1;
    string exp_path = 2;
}

//D005 - 205
message AdapterDeprecationWarning {
    string old_name = 1;
    string new_name = 2;
}

//D006 - 206
message MetricAttributesRenamed {
    string metric_name = 1;
}

//D007 - 207
message ExposureNameDeprecation {
    string exposure = 1;
}

// E - DB Adapter - 3

// E001 - 301
message AdapterEventDebug {
    string name = 1;
    string base_msg = 2;
    repeated string args = 3;
}

// E002 - 302
message AdapterEventInfo {
    string name = 1;
    string base_msg = 2;
    repeated string args = 3;
}

// E003 - 303
message AdapterEventWarning {
    string name = 1;
    string base_msg = 2;
    repeated string args = 3;
}

// E004 - 304
message AdapterEventError {
    string name = 1;
    string base_msg = 2;
    repeated string args = 3;
    string exc_info = 4;
}

// E005 - 305
message NewConnection {
    string conn_type = 1;
    string conn_name = 2;
}

// E006 - 306
message ConnectionReused {
    string conn_name = 1;
}

// E007 - 307
message ConnectionLeftOpenInCleanup {
    string conn_name = 1;
}

// E008 - 308
message ConnectionClosedInCleanup {
    string conn_name = 1;
}

// E009 - 309
message RollbackFailed {
    string conn_name = 1;
    string exc_info = 2;
}

// E010 - 310
message ConnectionClosed {
    string conn_name = 1;
}

// E011 - 311
message ConnectionLeftOpen {
    string conn_name = 1;
}

// E012 - 312
message Rollback {
    string conn_name = 1;
}

// E013 -313
message CacheMiss {
    string conn_name = 1;
    string database = 2;
    string schema = 3;
}

// E014 - 314
message ListRelations {
    string database = 1;
    string schema = 2;
    repeated ReferenceKeyMsg relations = 3;
}

// E015 - 315
message ConnectionUsed {
    string conn_type = 1;
    string conn_name = 2;
}

// E016 - 316
message SQLQuery {
    string conn_name = 1;
    string sql = 2;
}

// E017 - 317
message SQLQueryStatus {
    string status = 1;
    float elapsed = 2;
}

// E018 - 318
message SQLCommit {
    string conn_name = 1;
}

// E019 - 319
message ColTypeChange {
    string orig_type = 1;
    string new_type = 2;
    ReferenceKeyMsg table = 3;
}

// E020 - 320
message SchemaCreation {
    ReferenceKeyMsg relation = 1;
}

// E021 - 321
message SchemaDrop {
    ReferenceKeyMsg relation = 1;
}

// E022 - 322
message UncachedRelation {
    ReferenceKeyMsg dep_key = 1;
    ReferenceKeyMsg ref_key = 2;
}

// E023 - 323
message AddLink {
    ReferenceKeyMsg dep_key = 1;
    ReferenceKeyMsg ref_key = 2;
}

// E024 - 324
message AddRelation {
    ReferenceKeyMsg relation = 1;
}

// E025 - 325
message DropMissingRelation {
    ReferenceKeyMsg relation = 1;
}

// E026 - 326
message DropCascade {
    ReferenceKeyMsg dropped = 1;
    repeated ReferenceKeyMsg consequences = 2;
}

// E027 - 327
message DropRelation {
    ReferenceKeyMsg dropped = 1;
}

// E028 - 328
message UpdateReference {
    ReferenceKeyMsg old_key = 1;
    ReferenceKeyMsg new_key = 2;
    ReferenceKeyMsg cached_key = 3;
}

// E029 - 329
message TemporaryRelation {
    ReferenceKeyMsg key = 1;
}

// E030 - 330
message RenameSchema {
    ReferenceKeyMsg old_key = 1;
    ReferenceKeyMsg new_key = 2;
}

// E031 - 331
message DumpBeforeAddGraph {
    map<string, ListOfStrings> dump = 1;
}

// E032 - 332
message DumpAfterAddGraph {
    map<string, ListOfStrings> dump = 1;
}

// E033 - 333
message DumpBeforeRenameSchema {
    map<string, ListOfStrings> dump = 1;
}

// E034 - 334
message DumpAfterRenameSchema {
    map<string, ListOfStrings> dump = 1;
}

// E035 - 335
message AdapterImportError {
    string exc = 1;
}

// E036 - 336
message PluginLoadError {
    string exc_info = 1;
}

// E037 - 337
message NewConnectionOpening {
    string connection_state = 1;
}

// E038 - 338
message CodeExecution {
    string conn_name = 1;
    string code_content = 2;
}

// E039 - 339
message CodeExecutionStatus {
    string status = 1;
    float elapsed = 2;
}

// E040 - 340
message CatalogGenerationError {
    string exc = 1;
}

// E041 - 341
message WriteCatalogFailure {
    int32 num_exceptions = 1;
}

// E042 - 342
message CatalogWritten {
    string path = 1;
}

// E043 - 343
message CannotGenerateDocs {
}

// E044 - 344
message BuildingCatalog {
}

// E045 - 345
message DatabaseErrorRunningHook {
    string hook_type = 1;
}

// E046 - 346
message HooksRunning {
    int32 num_hooks = 1;
    string hook_type = 2;
}

// E047 - 347
message HookFinished {
    string stat_line = 1;
    string execution = 2;
    float execution_time = 3;
}


// I - Project parsing - 4

// I001 - 401
message ParseCmdStart {
}

// I002 - 402
message ParseCmdCompiling {
}

// I003 - 403
message ParseCmdWritingManifest {
}

// I004 - 404
message ParseCmdDone {
}

// I005 - 405
message ManifestDependenciesLoaded {
}

// I006 - 406
message ManifestLoaderCreated {
}

// I007 - 407
message ManifestLoaded {
}

// I008 - 408
message ManifestChecked {
}

// I009 - 409
message ManifestFlatGraphBuilt {
}

// I010 - 410
message ParseCmdPerfInfoPath {
    string path = 1;
}

// I011 - 411
message GenericTestFileParse {
    string path = 1;
}

// I012 - 412
message MacroFileParse {
    string path = 1;
}

// I013 - 413
message PartialParsingFullReparseBecauseOfError  {
}

// I014 - 414
message PartialParsingExceptionFile {
    string file = 1;
}

// I015 - 415
message PartialParsingFile {
    string file_id = 1;
}

// I016 - 416
message PartialParsingException {
    map<string, string> exc_info = 1;
}

// I017 - 417
message PartialParsingSkipParsing {
}

// I018 - 418
message PartialParsingMacroChangeStartFullParse {
}

// I019 - 419
message PartialParsingProjectEnvVarsChanged {
}

// I020 - 420
message PartialParsingProfileEnvVarsChanged {
}

// I021 - 421
message PartialParsingDeletedMetric {
    string unique_id = 1;
}

// I022 - 422
message ManifestWrongMetadataVersion {
    string version = 1;
}

// I023 - 423
message PartialParsingVersionMismatch {
    string saved_version = 1;
    string current_version = 2;
}

// I024 - 424
message PartialParsingFailedBecauseConfigChange {
}

// I025 - 425
message PartialParsingFailedBecauseProfileChange {
}

// I026 - 426
message PartialParsingFailedBecauseNewProjectDependency {
}

// I027 - 427
message PartialParsingFailedBecauseHashChanged {
}

// I028 - 428
message PartialParsingNotEnabled {
}

// I029 - 429
message ParsedFileLoadFailed {
    string path = 1;
    string exc = 2;
    string exc_info = 3;
}

// I030 - 430
message PartialParseSaveFileNotFound {
}

// I031 - 431
message StaticParserCausedJinjaRendering {
    string path = 1;
}

// I032 - 432
message UsingExperimentalParser {
    string path = 1;
}

// I033 - 433
message SampleFullJinjaRendering {
    string path = 1;
}

// I034 - 434
message StaticParserFallbackJinjaRendering {
    string path = 1;
}

// I035 - 435
message StaticParsingMacroOverrideDetected {
    string path = 1;
}

// I036 - 436
message StaticParserSuccess {
    string path = 1;
}

// I037 - 437
message StaticParserFailure {
    string path = 1;
}

// I038 - 438
message ExperimentalParserSuccess {
    string path = 1;
}

// I039 - 439
message ExperimentalParserFailure {
    string path = 1;
}

// I040 - 440
message PartialParsingEnabled {
    int32 deleted = 1;
    int32 added = 2;
    int32 changed = 3;
}

// I041 - 441
message PartialParsingAddedFile {
    string file_id = 1;
}

// I042 - 442
message PartialParsingDeletedFile {
    string file_id = 1;
}

// I043 - 443
message PartialParsingUpdatedFile {
    string file_id = 1;
}

// I044 - 444
message PartialParsingNodeMissingInSourceFile {
    string file_id=1;
}

// I045 - 445
message PartialParsingMissingNodes {
    string file_id = 1;
}

// I046 - 446
message PartialParsingChildMapMissingUniqueID {
    string unique_id = 1;
}

// I047 - 447
message PartialParsingUpdateSchemaFile {
    string file_id = 1;
}

// I048 - 448
message PartialParsingDeletedSource {
    string unique_id = 1;
}

// I049 - 449
message PartialParsingDeletedExposure {
    string unique_id = 1;
}

// I050 - 450
message InvalidDisabledTargetInTestNode {
    string resource_type_title = 1;
    string unique_id = 2;
    string original_file_path = 3;
    string target_kind = 4;
    string target_name = 5;
    string target_package = 6;
}

// I051 - 451
message UnusedResourceConfigPath {
    repeated string unused_config_paths = 1;
}

// I052 - 452
message SeedIncreased {
    string package_name = 1;
    string name = 2;
}

// I053 - 453
message SeedExceedsLimitSamePath {
    string package_name = 1;
    string name = 2;
}

// I054 - 454
message SeedExceedsLimitAndPathChanged {
    string package_name = 1;
    string name = 2;
}

// I055 - 455
message SeedExceedsLimitChecksumChanged {
    string package_name = 1;
    string name = 2;
    string checksum_name = 3;
}

// I056 - 456
message UnusedTables {
    repeated string unused_tables = 1;
}

// I057 - 457
message WrongResourceSchemaFile {
    string patch_name = 1;
    string resource_type = 2;
    string plural_resource_type = 3;
    string yaml_key = 4;
    string file_path = 5;
}

// I058 - 458
message NoNodeForYamlKey {
    string patch_name = 1;
    string yaml_key = 2;
    string file_path = 3;
}

// I059 - 459
message MacroPatchNotFound {
    string patch_name = 3;
}

// I060 - 460
message NodeNotFoundOrDisabled {
    string original_file_path = 1;
    string unique_id = 2;
    string resource_type_title = 3;
    string target_name = 4;
    string target_kind = 5;
    string target_package = 6;
    string disabled = 7;
}

// I061 - 461
message GeneralMacroWarning {
    string msg = 1;
}

// M - Deps generation - 5

// M001 - 501
message GitSparseCheckoutSubdirectory {
    string subdir = 1;
}

// M002 - 502
message GitProgressCheckoutRevision {
    string revision = 1;
}

// M003 - 503
message GitProgressUpdatingExistingDependency {
    string dir = 1;
}

// M004 - 504
message GitProgressPullingNewDependency {
    string dir = 1;
}

// M005 - 505
message GitNothingToDo {
    string sha = 1;
}

// M006 - 506
message GitProgressUpdatedCheckoutRange {
    string start_sha = 1;
    string end_sha = 2;
}

// M007 - 507
message GitProgressCheckedOutAt {
    string end_sha = 1;
}

// M008 - 508
message RegistryProgressGETRequest {
    string url = 1;
}

// M009 - 509
message RegistryProgressGETResponse {
    string url = 1;
    int32 resp_code = 2;
}

// M010 - 510
message SelectorReportInvalidSelector {
    string valid_selectors = 1;
    string spec_method = 2;
    string raw_spec = 3;
}

// M011 - 511
message JinjaLogInfo {
    string msg = 1;
}

// M012 - 512
message JinjaLogDebug {
    string msg = 1;
}

// M013 - 513
message DepsNoPackagesFound {
}

// M014 - 514
message DepsStartPackageInstall {
    string package_name = 1;
}

// M015 - 515
message DepsInstallInfo {
    string version_name = 1;
}

// M016 - 516
message DepsUpdateAvailable {
    string version_latest = 1;
}

// M017 - 517
message DepsUpToDate {
}

// M018 - 518
message DepsListSubdirectory {
    string subdirectory = 1;
}

// M019 - 519
message DepsNotifyUpdatesAvailable {
    ListOfStrings packages = 1;
}

// M020 - 520
message RetryExternalCall {
    int32 attempt = 1;
    int32 max = 2;
}

// M021 - 521
message RecordRetryException {
    string exc = 1;
}

// M022 - 522
message RegistryIndexProgressGETRequest {
    string url = 1;
}

// M023 - 523
message RegistryIndexProgressGETResponse {
    string url = 1;
    int32 resp_code = 2;
}

// M024 - 524
message RegistryResponseUnexpectedType {
    string response = 1;
}

// M025 - 525
message RegistryResponseMissingTopKeys {
    string response = 1;
}

// M026 - 526
message RegistryResponseMissingNestedKeys {
    string response = 1;
}

// m027 - 527
message RegistryResponseExtraNestedKeys {
    string response = 1;
}

// M028 - 528
message DepsSetDownloadDirectory {
    string path = 1;
}

// M029 - 529
message DepsUnpinned {
    string revision = 2;
    string git = 3;
}

// M030 - 530
message NoNodesForSelectionCriteria {
    string spec_raw = 1;
}

// Q - Node execution - 6

// Q001 - 601
message RunningOperationCaughtError {
    string exc = 1;
}

// Q002 - 602
message CompileComplete {
}

// Q003 - 603
message FreshnessCheckComplete {
}

// Q004 - 604
message SeedHeader {
    string header = 1;
}

// Q005 - 605
message SeedHeaderSeparator {
    int32 len_header = 1;
}

// Q006 - 606
message SQLRunnerException {
    string exc = 1;
    string exc_info = 2;
}

// Q007 - 607
message LogTestResult {
    NodeInfo node_info = 1;
    string name = 2;
    string status = 3;
    int32 index = 4;
    int32 num_models = 5;
    float execution_time = 6;
    int32 num_failures = 7;
}


// Skipped Q008, Q009, Q010


// Q011 - 611
message LogStartLine {
    NodeInfo node_info = 1;
    string description = 2;
    int32 index = 3;
    int32 total = 4;
}

// Q012 - 612
message LogModelResult {
    NodeInfo node_info = 1;
    string description = 2;
    string status = 3;
    int32 index = 4;
    int32 total = 5;
    int32 execution_time = 6;
}

// skipped Q013, Q014

// Q015 - 615
message LogSnapshotResult {
    NodeInfo node_info = 1;
    string description = 2;
    string status = 3;
    int32 index = 4;
    int32 total = 5;
    float execution_time = 6;
    map<string, string> cfg = 7;
}

// Q016 - 616
message LogSeedResult {
    NodeInfo node_info = 1;
    string status = 2;
    string result_message = 3;
    int32 index = 4;
    int32 total = 5;
    float execution_time = 6;
    string schema = 7;
    string relation = 8;
}

// Skipped Q017

// Q018 - 618
message LogFreshnessResult {
    string status = 1;
    NodeInfo node_info = 2;
    int32 index = 3;
    int32 total = 4;
    float execution_time = 5;
    string source_name = 6;
    string table_name = 7;
}


// Skipped Q019, Q020, Q021


// Q022 - 622
message LogCancelLine {
    string conn_name = 1;
}

// Q023 - 623
message DefaultSelector {
    string name = 1;
}

// Q024 - 624
message NodeStart {
    NodeInfo node_info = 1;
    string unique_id = 2;
}

// Q025 - 625
message NodeFinished {
    NodeInfo node_info = 1;
    string unique_id = 2;
    RunResultMsg run_result = 3;
}

// Q026 - 626
message QueryCancelationUnsupported {
    string type = 1;
}

// Q027 - 627
message ConcurrencyLine {
    int32 num_threads = 1;
    string target_name = 2;
}

// Q028 - 628
message CompilingNode {
    string unique_id = 1;
}

// Q029 - 629
message WritingInjectedSQLForNode {
    string unique_id = 1;
}

// Q030 - 630
message NodeCompiling {
    NodeInfo node_info = 1;
    string unique_id = 2;
}

// Q031 - 631
message NodeExecuting {
    NodeInfo node_info = 1;
    string unique_id = 2;
}

// Q032 - 632
message LogHookStartLine {
    NodeInfo node_info = 1;
    string statement = 2;
    int32 index = 3;
    int32 total = 4;
}

// Q033 - 633
message LogHookEndLine {
    NodeInfo node_info = 1;
    string statement = 2;
    string status = 3;
    int32 index = 4;
    int32 total = 5;
    float execution_time = 6;
}

// Q034 - 634
message SkippingDetails {
    NodeInfo node_info = 1;
    string resource_type = 2;
    string schema = 3;
    string node_name = 4;
    int32 index = 5;
    int32 total = 6;
}

// Q035 - 635
message NothingToDo {
}

// Q036 - 636
message RunningOperationUncaughtError {
    string exc = 2;
}

// Q037 - 637
message EndRunResult {
    repeated RunResultMsg results = 1;
    float elapsed_time = 2;
    google.protobuf.Timestamp generated_at = 3;
    bool success = 4;
}

// Q038 - 638
message NoNodesSelected {
}

// W - Node testing - 7

// Skipped W001

// W002 - 702
message CatchableExceptionOnRun {
    string exc = 1;
    string exc_info = 2;
}

// W003 - 703
message InternalExceptionOnRun {
    string build_path = 1;
    string exc = 2;
}

// W004 - 704
message GenericExceptionOnRun {
    string build_path = 1;
    string unique_id = 2;
    string exc = 3;
}

// W005 - 705
message NodeConnectionReleaseError {
    string node_name = 1;
    string exc = 2;
    string exc_info = 3;
}

// W006 - 706
message FoundStats {
    string stat_line = 1;
}

// Z - Misc - 8

// Z001 - 801
message MainKeyboardInterrupt {
}

// Z002 - 802
message MainEncounteredError {
    string exc = 1;
}

// Z003 - 803
message MainStackTrace {
    string stack_trace = 1;
}

// Z004 - 804
message SystemErrorRetrievingModTime {
    string path = 1;
}

// Z005 - 805
message SystemCouldNotWrite {
    string path = 1;
    string reason = 2;
    string exc = 3;
}

// Z006 - 806
message SystemExecutingCmd {
    repeated string cmd = 1;
}

// Z007 - 807
message SystemStdOutMsg {
    bytes bmsg = 1;
}

// Z008 - 808
message SystemStdErrMsg {
    bytes bmsg = 1;
}

// Z009 - 809
message SystemReportReturnCode {
    int32 returncode = 1;
}

// Z010 - 810
message TimingInfoCollected {
}

// Z011 - 811
message LogDebugStackTrace {
    string exc_info = 1;
}

// Z012 - 812
message CheckCleanPath {
    string path = 1;
}

// Z013 - 813
message ConfirmCleanPath {
    string path = 1;
}

// Z014 - 814
message ProtectedCleanPath {
    string path = 1;
}

// Z015 - 815
message FinishedCleanPaths {
}

// Z016 - 816
message OpenCommand {
    string open_cmd = 1;
    string profiles_dir = 2;
}

// Z017 - 817
message EmptyLine {
}

// Z018 - 818
message ServingDocsPort {
    string address = 1;
    int32 port = 2;
}

// Z019 - 819
message ServingDocsAccessInfo {
    string port = 1;
}

// Z020 - 820
message ServingDocsExitInfo {
}

// Z021 - 821
message RunResultWarning {
    string resource_type = 1;
    string node_name = 2;
    string path = 3;
}

// Z022 - 822
message RunResultFailure {
    string resource_type = 1;
    string node_name = 2;
    string path = 3;
}

// Z023 - 823
message StatsLine {
    map<string, int32> stats = 1;
}

// Z024 - 824
message RunResultError {
    string msg = 1;
}

// Z025 - 825
message RunResultErrorNoMessage {
    string status = 1;
}

// Z026 - 826
message SQLCompiledPath {
    string path = 1;
}

// Z027 - 827
message CheckNodeTestFailure {
    string relation_name = 1;
}

// Z028 - 828
message FirstRunResultError {
    string msg = 1;
}

// Z029 - 829
message AfterFirstRunResultError {
    string msg = 1;
}

// Z030 - 830
message EndOfRunSummary {
    int32 num_errors = 1;
    int32 num_warnings = 2;
    bool keyboard_interrupt = 3;
}

// Skipped Z031, Z032, Z033

// Z034 - 834
message LogSkipBecauseError {
    string schema = 1;
    string relation = 2;
    int32 index = 3;
    int32 total = 4;
}

// Z036 - 836
message EnsureGitInstalled {
}

// Z037 - 837
message DepsCreatingLocalSymlink {
}

// Z038 - 838
message DepsSymlinkNotAvailable {
}

// Z039 - 839
message DisableTracking {
}

// Z040 - 840
message SendingEvent {
    string kwargs = 1;
}

// Z041 - 841
message SendEventFailure {
}

// Z042 - 842
message FlushEvents {
}

// Z043 - 843
message FlushEventsFailure {
}

// Z044 - 844
message TrackingInitializeFailure {
    string exc_info = 1;
}

// Z045 - 845
message EventBufferFull {
}

// Z046 - 846
message RunResultWarningMessage {
    string msg = 1;
}

// T - Integration tests - 9

// T001 - 901
message IntegrationTestInfo {
    string msg = 1;
}

// T002 - 902
message IntegrationTestDebug {
    string msg = 1;
}

// T003 - 903
message IntegrationTestWarn {
    string msg = 1;
}

// T004 - 904
message IntegrationTestError {
    string msg = 1;
}

// T005 - 905
message IntegrationTestException {
    string msg = 1;
}

// T006 - 906
message UnitTestInfo {
    string msg = 1;
}


// Event containing standard fields and detail sub-events
message Event {
    string msg = 1;
    string level = 2;
    string invocation_id = 3;
    int32 pid = 4;
    string thread = 5;
    google.protobuf.Timestamp ts = 9;
    string code = 10;
    map<string, string> extra = 11;
    oneof detail {
        MainReportVersion main_report_version = 101;
        MainReportArgs main_report_args = 102;
        MainTrackingUserState main_tracking_user_state = 103;
        MergedFromState merged_from_state = 104;
        MissingProfileTarget missing_profile_target = 105;
        InvalidVarsYAML invalid_vars_yaml = 108;
        DbtProjectError dbt_project_error = 109;
        DbtProjectErrorException dbt_project_error_exception = 110;
        DbtProfileError dbt_profile_error = 111;
        DbtProfileErrorException dbt_profile_error_exception = 112;
        ProfileListTitle profile_list_title = 113;
        ListSingleProfile list_single_profile = 114;
        NoDefinedProfiles no_defined_profiles = 115;
        ProfileHelpMessage profile_help_message = 116;
        StarterProjectPath starter_project_path = 117;
        ConfigFolderDirectory config_folder_directory = 118;
        NoSampleProfileFound no_sample_profile_found = 119;
        ProfileWrittenWithSample profile_written_with_sample = 120;
        ProfileWrittenWithTargetTemplateYAML profile_written_with_target_template_yaml = 121;
        ProfileWrittenWithProjectTemplateYAML profile_written_with_project_template_yaml = 122;
        SettingUpProfile setting_up_profile = 123;
        InvalidProfileTemplateYAML invalid_profile_template_yaml = 124;
        ProjectNameAlreadyExists project_name_already_exists = 125;
        ProjectCreated project_created = 126;
        PackageRedirectDeprecation package_redirect_deprecation = 201;
        PackageInstallPathDeprecation package_install_path_deprecation = 202;
        ConfigSourcePathDeprecation config_source_path_deprecation = 203;
        ConfigDataPathDeprecation config_data_path_deprecation = 204;
        AdapterDeprecationWarning adapter_deprecation_warning = 205;
        MetricAttributesRenamed metric_attributes_renamed = 206;
        ExposureNameDeprecation exposure_name_deprecation = 207;
        AdapterEventDebug adapter_event_debug = 301;
        AdapterEventInfo adapter_event_info = 302;
        AdapterEventWarning adapter_event_warning = 303;
        AdapterEventError adapter_event_error = 304;
        NewConnection new_connection = 305;
        ConnectionReused connection_reused = 306;
        ConnectionLeftOpenInCleanup connection_left_open_in_cleanup = 307;
        ConnectionClosedInCleanup connection_closed_in_cleanup = 308;
        RollbackFailed rollback_failed = 309;
        ConnectionClosed connection_closed = 310;
        ConnectionLeftOpen connection_left_open = 311;
        Rollback rollback = 312;
        CacheMiss cache_miss = 313;
        ListRelations list_relations = 314;
        ConnectionUsed connection_used = 315;
        SQLQuery sql_query = 316;
        SQLQueryStatus sql_query_status = 317;
        SQLCommit sql_commit = 318;
        ColTypeChange col_type_change = 319;
        SchemaCreation schema_creation = 320;
        SchemaDrop schema_drop = 321;
        UncachedRelation uncached_relation = 322;
        AddLink add_link = 323;
        AddRelation add_relation = 324;
        DropMissingRelation drop_missing_relation = 325;
        DropCascade drop_cascade = 326;
        DropRelation drop_relation = 327;
        UpdateReference update_reference = 328;
        TemporaryRelation temporary_relation = 329;
        RenameSchema rename_schema = 330;
        DumpBeforeAddGraph dump_before_add_graph = 331;
        DumpAfterAddGraph dump_after_add_graph = 332;
        DumpBeforeRenameSchema dump_before_rename_schema = 333;
        DumpAfterRenameSchema dump_after_rename_schema = 334;
        AdapterImportError adapter_import_error = 335;
        PluginLoadError plugin_load_error = 336;
        NewConnectionOpening new_connection_opening = 337;
        CodeExecution code_execution = 338;
        CodeExecutionStatus code_execution_status = 339;
        CatalogGenerationError catalog_generation_error = 340;
        WriteCatalogFailure write_catalog_failure = 341;
        CatalogWritten catalog_written = 342;
        CannotGenerateDocs cannot_generate_docs = 343;
        BuildingCatalog building_catalog = 344;
        DatabaseErrorRunningHook database_error_running_hook = 345;
        HooksRunning hooks_running = 346;
        HookFinished hook_finished = 347;
        ParseCmdStart parse_cmd_start = 401;
        ParseCmdCompiling parse_cmd_compiling = 402;
        ParseCmdWritingManifest parse_cmd_writing_manifest = 403;
        ParseCmdDone parse_cmd_done = 404;
        ManifestDependenciesLoaded manifest_dependencies_loaded = 405;
        ManifestLoaderCreated manifest_lader_created = 406;
        ManifestLoaded manifest_loaded = 407;
        ManifestChecked manifest_checked = 408;
        ManifestFlatGraphBuilt manifest_flat_graph_built = 409;
        ParseCmdPerfInfoPath parse_cmd_perf_info_path = 410;
        GenericTestFileParse generic_test_file_parse = 411;
        MacroFileParse macro_file_parse = 412;
        PartialParsingFullReparseBecauseOfError partial_parsing_full_reparse_because_of_error = 413;
        PartialParsingExceptionFile partial_parsing_exception_file = 414;
        PartialParsingFile partial_parsing_file = 415;
        PartialParsingException partial_parsing_exception = 416;
        PartialParsingSkipParsing partial_parsing_skip_parsing = 417;
        PartialParsingMacroChangeStartFullParse partial_parsing_macro_change_start_full_parse = 418;
        PartialParsingProjectEnvVarsChanged partial_parsing_project_env_vars_changed = 419;
        PartialParsingProfileEnvVarsChanged partial_parsing_profile_env_vars_changed = 420;
        PartialParsingDeletedMetric partial_parsing_deleted_metric = 421;
        ManifestWrongMetadataVersion manifest_wrong_metadata_version = 422;
        PartialParsingVersionMismatch partial_parsing_version_mismatch = 423;
        PartialParsingFailedBecauseConfigChange partial_parsing_failed_because_config_change = 424;
        PartialParsingFailedBecauseProfileChange partial_parsing_failed_because_profile_change = 425;
        PartialParsingFailedBecauseNewProjectDependency partial_parsing_failed_because_new_project_dependency = 426;
        PartialParsingFailedBecauseHashChanged partial_parsing_failed_because_hash_changed = 427;
        PartialParsingNotEnabled partial_parsing_not_enabled = 428;
        ParsedFileLoadFailed parsed_file_load_failed = 429;
        PartialParseSaveFileNotFound partial_parsing_save_file_not_found = 430;
        StaticParserCausedJinjaRendering static_parser_caused_jinja_rendering = 431;
        UsingExperimentalParser using_experimental_parser = 432;
        SampleFullJinjaRendering sample_full_jinja_rendering = 433;
        StaticParserFallbackJinjaRendering static_parser_fallback_jinja_rendering = 434;
        StaticParsingMacroOverrideDetected static_parsing_macro_override_detected = 435;
        StaticParserSuccess static_parser_success = 436;
        StaticParserFailure static_parser_failure = 437;
        ExperimentalParserSuccess experimental_parser_success = 438;
        ExperimentalParserFailure experimental_parser_failure = 439;
        PartialParsingEnabled partial_parsing_enabled = 440;
        PartialParsingAddedFile partial_parsing_added_file = 441;
        PartialParsingDeletedFile partial_parsing_deleted_file = 442;
        PartialParsingUpdatedFile partial_parsing_updated_file = 443;
        PartialParsingNodeMissingInSourceFile partial_parsing_node_missing_in_source_file = 444;
        PartialParsingMissingNodes partial_parsing_missing_nodes = 445;
        PartialParsingChildMapMissingUniqueID partial_parsing_child_map_missing_unique_id = 446;
        PartialParsingUpdateSchemaFile partial_parsing_update_schema_file = 447;
        PartialParsingDeletedSource partial_parsing_deleted_source = 448;
        PartialParsingDeletedExposure partial_parsing_deleted_exposure = 449;
        InvalidDisabledTargetInTestNode invalid_disabled_target_in_test_node = 450;
        UnusedResourceConfigPath unused_resource_config_path = 451;
        SeedIncreased seed_increased = 452;
        SeedExceedsLimitSamePath seed_exceeds_limit_same_path = 453;
        SeedExceedsLimitAndPathChanged seed_exceeds_limit_and_path_changed = 454;
        SeedExceedsLimitChecksumChanged seed_exceeds_limit_checksum_changed = 455;
        UnusedTables unused_tables = 456;
        WrongResourceSchemaFile wrong_resource_schema_file = 457;
        NoNodeForYamlKey no_node_for_yaml_key = 458;
        MacroPatchNotFound macro_patch_not_found = 459;
        NodeNotFoundOrDisabled node_not_found_or_disabled = 460;
        GeneralMacroWarning general_macro_warning = 461;
        GitSparseCheckoutSubdirectory git_sparse_checkout_subdirectory = 501;
        GitProgressCheckoutRevision git_progress_checkout_revision = 502;
        GitProgressUpdatingExistingDependency git_progress_updating_existing_dependency = 503;
        GitProgressPullingNewDependency git_progress_pulling_new_dependency = 504;
        GitNothingToDo git_nothing_to_do = 505;
        GitProgressUpdatedCheckoutRange git_progress_updated_checkout_range = 506;
        GitProgressCheckedOutAt git_progress_checked_out_at = 507;
        RegistryProgressGETRequest registry_progress_get_request = 508;
        RegistryProgressGETResponse registry_progress_get_response = 509;
        SelectorReportInvalidSelector selector_report_invalid_selector = 510;
        JinjaLogInfo jinja_log_info = 511;
        JinjaLogDebug jinja_log_debug = 512;
        DepsNoPackagesFound deps_no_packages_found = 513;
        DepsStartPackageInstall deps_start_package_install = 514;
        DepsInstallInfo deps_install_info = 515;
        DepsUpdateAvailable deps_update_available = 516;
        DepsUpToDate deps_up_to_date = 517;
        DepsListSubdirectory deps_list_subdirectory = 518;
        DepsNotifyUpdatesAvailable deps_notify_updates_available = 519;
        RetryExternalCall retry_external_call = 520;
        RecordRetryException record_retry_exception = 521;
        RegistryIndexProgressGETRequest registry_index_progress_get_request = 522;
        RegistryIndexProgressGETResponse registry_index_progress_get_response = 523;
        RegistryResponseUnexpectedType registry_response_unexpected_type = 524;
        RegistryResponseMissingTopKeys registry_response_missing_top_keys = 525;
        RegistryResponseMissingNestedKeys registry_response_missing_nested_keys = 526;
        RegistryResponseExtraNestedKeys registry_response_extra_nested_keys = 527;
        DepsSetDownloadDirectory deps_set_download_directory = 528;
        DepsUnpinned deps_unpinned = 529;
        NoNodesForSelectionCriteria no_nodes_for_selection_criteria = 530;
        RunningOperationCaughtError running_operation_caught_error = 601;
        CompileComplete compile_complete = 602;
        FreshnessCheckComplete freshness_check_complete = 603;
        SeedHeader seed_header = 604;
        SeedHeaderSeparator seed_header_separator = 605;
        SQLRunnerException sql_runner_exception = 606;
        LogTestResult log_test_result = 607;
        LogStartLine log_start_line = 608;
        LogModelResult log_model_result = 609;
        LogSnapshotResult log_snapshot_result = 615;
        LogSeedResult log_seed_result = 616;
        LogFreshnessResult log_freshness_result = 617;
        LogCancelLine log_cancel_line = 622;
        DefaultSelector default_selector = 623;
        NodeStart node_start = 624;
        NodeFinished node_finished = 625;
        QueryCancelationUnsupported query_cancelation_unsupported = 626;
        ConcurrencyLine concurrency_line = 627;
        CompilingNode compiling_node = 628;
        WritingInjectedSQLForNode writing_injected_sql_for_node = 629;
        NodeCompiling node_compiling = 630;
        NodeExecuting node_executing = 631;
        LogHookStartLine log_hook_start_line = 632;
        LogHookEndLine log_hook_end_line = 633;
        SkippingDetails skipping_details = 634;
        NothingToDo nothing_to_do = 635;
        RunningOperationUncaughtError running_operation_uncaught_error = 636;
        EndRunResult end_run_result = 637;
        NoNodesSelected no_nodes_selected = 638;
        CatchableExceptionOnRun catchable_exception_on_run = 702;
        InternalExceptionOnRun internal_exception_on_run = 703;
        GenericExceptionOnRun generic_exception_on_run = 704;
        NodeConnectionReleaseError node_connection_release_error = 705;
        FoundStats found_stats = 706;
        MainKeyboardInterrupt main_keyboard_interrupt = 801;
        MainEncounteredError main_encountered_error = 802;
        MainStackTrace main_stack_trace = 803;
        SystemErrorRetrievingModTime system_error_retrieving_mod_time = 804;
        SystemCouldNotWrite system_could_not_write = 805;
        SystemExecutingCmd system_executing_cmd = 806;
        SystemStdOutMsg system_std_out_msg = 807;
        SystemStdErrMsg system_std_err_msg = 808;
        SystemReportReturnCode system_report_return_code = 809;
        TimingInfoCollected timing_info_collected = 810;
        LogDebugStackTrace log_debug_stack_trace = 811;
        CheckCleanPath check_clean_path = 812;
        ConfirmCleanPath confirm_clean_path = 813;
        ProtectedCleanPath protected_clean_path = 814;
        FinishedCleanPaths finished_clean_path = 815;
        OpenCommand open_command = 816;
        EmptyLine empty_line = 817;
        ServingDocsPort serving_docs_port = 818;
        ServingDocsAccessInfo serving_docs_access_info = 819;
        ServingDocsExitInfo serving_docs_exit_info = 820;
        RunResultWarning run_result_warning = 821;
        RunResultFailure run_result_failure = 822;
        StatsLine stats_line = 823;
        RunResultError run_result_error = 824;
        RunResultErrorNoMessage run_result_error_no_message = 825;
        SQLCompiledPath sql_compiled_path = 826;
        CheckNodeTestFailure check_node_test_failure = 827;
        FirstRunResultError first_run_result_error = 828;
        AfterFirstRunResultError after_first_run_result_error = 829;
        EndOfRunSummary end_of_run_summary = 830;
        LogSkipBecauseError log_skip_because_error = 834;
        EnsureGitInstalled ensure_git_installed = 836;
        DepsCreatingLocalSymlink deps_creating_local_symlink = 837;
        DepsSymlinkNotAvailable deps_symlink_not_available = 838;
        DisableTracking disable_tracking = 839;
        SendingEvent sending_event = 840;
        SendEventFailure send_event_failure = 841;
        FlushEvents flush_events = 842;
        FlushEventsFailure flush_events_failure = 843;
        TrackingInitializeFailure tracking_initialize_failure = 844;
        EventBufferFull event_buffer_full = 845;
        RunResultWarningMessage run_result_warning_message = 846;
        IntegrationTestInfo integration_test_info = 901;
        IntegrationTestDebug integration_test_debug = 902;
        IntegrationTestWarn integration_test_warn = 903;
        IntegrationTestError integration_test_error = 904;
        IntegrationTestException integration_test_exception = 905;
        UnitTestInfo unit_test_info = 906;
    }

}

