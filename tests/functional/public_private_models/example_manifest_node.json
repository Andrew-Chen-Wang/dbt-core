{
  "metadata": {
    "dbt_schema_version": "https://schemas.getdbt.com/dbt/manifest/v7.json",
    "dbt_version": "1.4.0a1",
    "generated_at": "2022-10-10T18:30:02.053236Z",
    "invocation_id": "f7cd1404-8eab-44fc-b9d2-6c3bdd1449ac",
    "env": {},
    "project_id": "8330e1b1d54365ea716dbeca47bf2cf6",
    "user_id": "e235f509-4037-47a5-926a-32248e9ae68e",
    "send_anonymous_usage_stats": true,
    "adapter_type": "snowflake"
  },
  "nodes": {
    "model.tpch.stg_tpch_orders": {
      "resource_type": "model",
      "depends_on": { "macros": [], "nodes": ["source.tpch.tpch_test.orders"] },
      "config": {
        "enabled": true,
        "alias": null,
        "schema": null,
        "database": null,
        "tags": [],
        "meta": {},
        "materialized": "view",
        "incremental_strategy": null,
        "persist_docs": {},
        "quoting": {},
        "column_types": {},
        "full_refresh": null,
        "unique_key": null,
        "on_schema_change": "ignore",
        "grants": {},
        "packages": [],
        "docs": { "show": true, "node_color": "#cd7f32" },
        "ref_permissions": "private",
        "post-hook": [],
        "pre-hook": []
      },
      "database": "ANALYTICS",
      "schema": "dbt_sung",
      "fqn": ["tpch", "staging", "tpch", "stg_tpch_orders"],
      "unique_id": "model.tpch.stg_tpch_orders",
      "raw_code": "with source as (\n\n    select * from {{ source('tpch_test', 'orders') }}\n\n),\n\n{# source_2 as (\n\n    select * from {{ source('tpch', 'lineitem') }}\n\n), #}\n\nrenamed as (\n\n    select\n\n        o_orderkey as order_key,\n        o_custkey as customer_key,\n        o_orderstatus as status_code,\n        o_totalprice as total_price,\n        o_orderdate as order_date,\n        o_orderpriority as priority_code,\n        o_clerk as clerk_name,\n        o_shippriority as ship_priority,\n        o_comment as comment\n\n    from source\n\n)\n\nselect * from renamed\n{# join source_2 \non renamed.order_key = source_2.l_orderkey #}",
      "language": "sql",
      "package_name": "tpch",
      "root_path": "/Users/sung/Desktop/dbt/dbt_env",
      "path": "staging/tpch/stg_tpch_orders.sql",
      "original_file_path": "models/staging/tpch/stg_tpch_orders.sql",
      "name": "stg_tpch_orders",
      "alias": "stg_tpch_orders",
      "checksum": {
        "name": "sha256",
        "checksum": "ef17e83cfa73f33fc4f9b1fc0d1c5ea1c1a03b075109dd08e2cca838b8d4402f"
      },
      "tags": [],
      "refs": [],
      "sources": [["tpch_test", "orders"]],
      "metrics": [],
      "description": "staging layer for orders data",
      "columns": {
        "order_key": {
          "name": "order_key",
          "description": "primary key of the model",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "customer_key": {
          "name": "customer_key",
          "description": "foreign key to stg_tpch_customers",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "status_code": {
          "name": "status_code",
          "description": "status of the order",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "total_price": {
          "name": "total_price",
          "description": "raw price",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "order_date": {
          "name": "order_date",
          "description": "date the order was made",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "priority_code": {
          "name": "priority_code",
          "description": "code associated with the order",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "clerk_name": {
          "name": "clerk_name",
          "description": "id of the clerk",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "ship_priority": {
          "name": "ship_priority",
          "description": "numeric representation of the shipping priority, zero being the default",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "comment": {
          "name": "comment",
          "description": "additional commentary",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        }
      },
      "meta": {},
      "docs": { "show": true, "node_color": "#cd7f32" },
      "patch_path": "tpch://models/staging/tpch/stg_tpch.yml",
      "compiled_path": null,
      "build_path": null,
      "deferred": false,
      "unrendered_config": {
        "materialized": "view",
        "docs": { "node_color": "#cd7f32" },
        "ref_permissions": "private"
      },
      "created_at": 1665426351.521916
    },
    "model.tpch.stg_tpch_part_suppliers": {
      "resource_type": "model",
      "depends_on": {
        "macros": ["macro.dbt_utils.surrogate_key"],
        "nodes": ["source.tpch.tpch_test.partsupp"]
      },
      "config": {
        "enabled": true,
        "alias": null,
        "schema": null,
        "database": null,
        "tags": [],
        "meta": {},
        "materialized": "view",
        "incremental_strategy": null,
        "persist_docs": {},
        "quoting": {},
        "column_types": {},
        "full_refresh": null,
        "unique_key": null,
        "on_schema_change": "ignore",
        "grants": {},
        "packages": [],
        "docs": { "show": true, "node_color": "#cd7f32" },
        "ref_permissions": "private",
        "post-hook": [],
        "pre-hook": []
      },
      "database": "ANALYTICS",
      "schema": "dbt_sung",
      "fqn": ["tpch", "staging", "tpch", "stg_tpch_part_suppliers"],
      "unique_id": "model.tpch.stg_tpch_part_suppliers",
      "raw_code": "with source as (\n\n    select * from {{ source('tpch_test', 'partsupp') }}\n\n),\n\nrenamed as (\n\n    select\n    \n        {{ dbt_utils.surrogate_key(\n            ['ps_partkey', \n            'ps_suppkey']) }} \n                as part_supplier_key,\n        ps_partkey as part_key,\n        ps_suppkey as supplier_key,\n        ps_availqty as available_quantity,\n        ps_supplycost as cost,\n        ps_comment as comment\n\n    from source\n\n)\n\nselect * from renamed",
      "language": "sql",
      "package_name": "tpch",
      "root_path": "/Users/sung/Desktop/dbt/dbt_env",
      "path": "staging/tpch/stg_tpch_part_suppliers.sql",
      "original_file_path": "models/staging/tpch/stg_tpch_part_suppliers.sql",
      "name": "stg_tpch_part_suppliers",
      "alias": "stg_tpch_part_suppliers",
      "checksum": {
        "name": "sha256",
        "checksum": "0dd4e6abb56f4857b6b8294c6018a19289b77afcc42749f94f2ee3819bb9fa9a"
      },
      "tags": [],
      "refs": [],
      "sources": [["tpch_test", "partsupp"]],
      "metrics": [],
      "description": "staging layer for suppliers data",
      "columns": {
        "part_supplier_key": {
          "name": "part_supplier_key",
          "description": "surrogate key for the model -- combo of ps_partkey + ps_suppkey",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "part_key": {
          "name": "part_key",
          "description": "foreign key to stg_tpch_parts",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "supplier_key": {
          "name": "supplier_key",
          "description": "foreign key to stg_tpch_suppliers",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "available_quantity": {
          "name": "available_quantity",
          "description": "raw available quantity",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "cost": {
          "name": "cost",
          "description": "raw cost",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "comment": {
          "name": "comment",
          "description": "additional commentary",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        }
      },
      "meta": {},
      "docs": { "show": true, "node_color": "#cd7f32" },
      "patch_path": "tpch://models/staging/tpch/stg_tpch.yml",
      "compiled_path": null,
      "build_path": null,
      "deferred": false,
      "unrendered_config": {
        "materialized": "view",
        "docs": { "node_color": "#cd7f32" },
        "ref_permissions": "private"
      },
      "created_at": 1665426351.526172
    },
    "model.tpch.stg_tpch_suppliers": {
      "resource_type": "model",
      "depends_on": {
        "macros": [],
        "nodes": ["source.tpch.tpch_test.supplier"]
      },
      "config": {
        "enabled": true,
        "alias": null,
        "schema": null,
        "database": null,
        "tags": [],
        "meta": {},
        "materialized": "view",
        "incremental_strategy": null,
        "persist_docs": {},
        "quoting": {},
        "column_types": {},
        "full_refresh": null,
        "unique_key": null,
        "on_schema_change": "ignore",
        "grants": {},
        "packages": [],
        "docs": { "show": true, "node_color": "#cd7f32" },
        "ref_permissions": "private",
        "post-hook": [],
        "pre-hook": []
      },
      "database": "ANALYTICS",
      "schema": "dbt_sung",
      "fqn": ["tpch", "staging", "tpch", "stg_tpch_suppliers"],
      "unique_id": "model.tpch.stg_tpch_suppliers",
      "raw_code": "with source as (\n\n    select * from {{ source('tpch_test', 'supplier') }}\n\n),\n\nrenamed as (\n\n    select\n    \n        s_suppkey as supplier_key,\n        s_name as supplier_name,\n        s_address as supplier_address,\n        s_nationkey as nation_key,\n        s_phone as phone_number,\n        s_acctbal as account_balance,\n        s_comment as comment\n\n    from source\n\n)\n\nselect * from renamed",
      "language": "sql",
      "package_name": "tpch",
      "root_path": "/Users/sung/Desktop/dbt/dbt_env",
      "path": "staging/tpch/stg_tpch_suppliers.sql",
      "original_file_path": "models/staging/tpch/stg_tpch_suppliers.sql",
      "name": "stg_tpch_suppliers",
      "alias": "stg_tpch_suppliers",
      "checksum": {
        "name": "sha256",
        "checksum": "83a08e8dccbf872e4fe15461406cc96818224c33be7ead5b224e02519737988e"
      },
      "tags": [],
      "refs": [],
      "sources": [["tpch_test", "supplier"]],
      "metrics": [],
      "description": "staging layer for suppliers data",
      "columns": {
        "supplier_key": {
          "name": "supplier_key",
          "description": "primary key of the model",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "supplier_name": {
          "name": "supplier_name",
          "description": "id of the supplier",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "supplier_address": {
          "name": "supplier_address",
          "description": "address of the supplier",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "nation_key": {
          "name": "nation_key",
          "description": "foreign key to stg_tpch_nations",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "phone_number": {
          "name": "phone_number",
          "description": "phone number of the supplier",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "account_balance": {
          "name": "account_balance",
          "description": "raw account balance",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "comment": {
          "name": "comment",
          "description": "additional commentary",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        }
      },
      "meta": {},
      "docs": { "show": true, "node_color": "#cd7f32" },
      "patch_path": "tpch://models/staging/tpch/stg_tpch.yml",
      "compiled_path": null,
      "build_path": null,
      "deferred": false,
      "unrendered_config": {
        "materialized": "view",
        "docs": { "node_color": "#cd7f32" },
        "ref_permissions": "private"
      },
      "created_at": 1665426351.5377011
    },
    "model.tpch.stg_tpch_regions": {
      "resource_type": "model",
      "depends_on": { "macros": [], "nodes": ["source.tpch.tpch_test.region"] },
      "config": {
        "enabled": true,
        "alias": null,
        "schema": null,
        "database": null,
        "tags": [],
        "meta": {},
        "materialized": "view",
        "incremental_strategy": null,
        "persist_docs": {},
        "quoting": {},
        "column_types": {},
        "full_refresh": null,
        "unique_key": null,
        "on_schema_change": "ignore",
        "grants": {},
        "packages": [],
        "docs": { "show": true, "node_color": "#cd7f32" },
        "ref_permissions": "private",
        "post-hook": [],
        "pre-hook": []
      },
      "database": "ANALYTICS",
      "schema": "dbt_sung",
      "fqn": ["tpch", "staging", "tpch", "stg_tpch_regions"],
      "unique_id": "model.tpch.stg_tpch_regions",
      "raw_code": "with source as (\n\n    select * from {{ source('tpch_test', 'region') }}\n\n),\n\nrenamed as (\n\n    select\n        r_regionkey as region_key,\n        r_name as name,\n        r_comment as comment\n\n    from source\n\n)\n\nselect * from renamed",
      "language": "sql",
      "package_name": "tpch",
      "root_path": "/Users/sung/Desktop/dbt/dbt_env",
      "path": "staging/tpch/stg_tpch_regions.sql",
      "original_file_path": "models/staging/tpch/stg_tpch_regions.sql",
      "name": "stg_tpch_regions",
      "alias": "stg_tpch_regions",
      "checksum": {
        "name": "sha256",
        "checksum": "1101ce4cc20a2acc2b32bd6142b32b98ed7fe2f0468a5515b1a6223a94bbebfb"
      },
      "tags": [],
      "refs": [],
      "sources": [["tpch_test", "region"]],
      "metrics": [],
      "description": "staging layer for regions data",
      "columns": {
        "region_key": {
          "name": "region_key",
          "description": "primary key of the model",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "name": {
          "name": "name",
          "description": "region name",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "comment": {
          "name": "comment",
          "description": "additional commentary",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        }
      },
      "meta": {},
      "docs": { "show": true, "node_color": "#cd7f32" },
      "patch_path": "tpch://models/staging/tpch/stg_tpch.yml",
      "compiled_path": null,
      "build_path": null,
      "deferred": false,
      "unrendered_config": {
        "materialized": "view",
        "docs": { "node_color": "#cd7f32" },
        "ref_permissions": "private"
      },
      "created_at": 1665426351.534063
    },
    "model.tpch.stg_tpch_customers": {
      "resource_type": "model",
      "depends_on": {
        "macros": [],
        "nodes": ["source.tpch.tpch_test.customer"]
      },
      "config": {
        "enabled": true,
        "alias": null,
        "schema": null,
        "database": null,
        "tags": [],
        "meta": {},
        "materialized": "view",
        "incremental_strategy": null,
        "persist_docs": {},
        "quoting": {},
        "column_types": {},
        "full_refresh": null,
        "unique_key": null,
        "on_schema_change": "ignore",
        "grants": {},
        "packages": [],
        "docs": { "show": true, "node_color": "#cd7f32" },
        "ref_permissions": "private",
        "post-hook": [],
        "pre-hook": []
      },
      "database": "ANALYTICS",
      "schema": "dbt_sung",
      "fqn": ["tpch", "staging", "tpch", "stg_tpch_customers"],
      "unique_id": "model.tpch.stg_tpch_customers",
      "raw_code": "with source as (\n\n    select * from {{ source('tpch_test', 'customer') }}\n\n),\n\nrenamed as (\n\n    select\n    \n        c_custkey as customer_key,\n        c_name as name,\n        c_address as address, \n        c_nationkey as nation_key,\n        c_phone as phone_number,\n        c_acctbal as account_balance,\n        c_mktsegment as market_segment,\n        c_comment as comment\n\n    from source\n\n)\n\nselect * from renamed",
      "language": "sql",
      "package_name": "tpch",
      "root_path": "/Users/sung/Desktop/dbt/dbt_env",
      "path": "staging/tpch/stg_tpch_customers.sql",
      "original_file_path": "models/staging/tpch/stg_tpch_customers.sql",
      "name": "stg_tpch_customers",
      "alias": "stg_tpch_customers",
      "checksum": {
        "name": "sha256",
        "checksum": "e79862804ebdd80a7789f32badea23bf41c4aa44493c8535b6342e403fb7a5f7"
      },
      "tags": [],
      "refs": [],
      "sources": [["tpch_test", "customer"]],
      "metrics": [],
      "description": "staging layer for customers data",
      "columns": {
        "customer_key": {
          "name": "customer_key",
          "description": "primary key of the model",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "name": {
          "name": "name",
          "description": "customer id",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "address": {
          "name": "address",
          "description": "address of the customer",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "nation_key": {
          "name": "nation_key",
          "description": "foreign key to stg_tpch_nations",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "phone_number": {
          "name": "phone_number",
          "description": "phone number of the customer",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "account_balance": {
          "name": "account_balance",
          "description": "total account balance from the customer",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "market_segment": {
          "name": "market_segment",
          "description": "market segment of the customer",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "comment": {
          "name": "comment",
          "description": "additional commentary",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        }
      },
      "meta": {},
      "docs": { "show": true, "node_color": "#cd7f32" },
      "patch_path": "tpch://models/staging/tpch/stg_tpch.yml",
      "compiled_path": null,
      "build_path": null,
      "deferred": false,
      "unrendered_config": {
        "materialized": "view",
        "docs": { "node_color": "#cd7f32" },
        "ref_permissions": "private"
      },
      "created_at": 1665426351.5056808
    },
    "model.tpch.stg_tpch_nations": {
      "resource_type": "model",
      "depends_on": { "macros": [], "nodes": ["source.tpch.tpch_test.nation"] },
      "config": {
        "enabled": true,
        "alias": null,
        "schema": null,
        "database": null,
        "tags": [],
        "meta": {},
        "materialized": "view",
        "incremental_strategy": null,
        "persist_docs": {},
        "quoting": {},
        "column_types": {},
        "full_refresh": null,
        "unique_key": null,
        "on_schema_change": "ignore",
        "grants": {},
        "packages": [],
        "docs": { "show": true, "node_color": "#cd7f32" },
        "ref_permissions": "private",
        "post-hook": [],
        "pre-hook": []
      },
      "database": "ANALYTICS",
      "schema": "dbt_sung",
      "fqn": ["tpch", "staging", "tpch", "stg_tpch_nations"],
      "unique_id": "model.tpch.stg_tpch_nations",
      "raw_code": "with source as (\n\n    select * from {{ source('tpch_test', 'nation') }}\n\n),\n\nrenamed as (\n\n    select\n    \n        n_nationkey as nation_key,\n        n_name as name,\n        n_regionkey as region_key,\n        n_comment as comment\n\n    from source\n\n)\n\nselect * from renamed",
      "language": "sql",
      "package_name": "tpch",
      "root_path": "/Users/sung/Desktop/dbt/dbt_env",
      "path": "staging/tpch/stg_tpch_nations.sql",
      "original_file_path": "models/staging/tpch/stg_tpch_nations.sql",
      "name": "stg_tpch_nations",
      "alias": "stg_tpch_nations",
      "checksum": {
        "name": "sha256",
        "checksum": "3bcdf6cacb0b49b294af88261f0c383e80da471241d8cd92aeebfbde5707e340"
      },
      "tags": [],
      "refs": [],
      "sources": [["tpch_test", "nation"]],
      "metrics": [],
      "description": "staging layer for nations data",
      "columns": {
        "nation_key": {
          "name": "nation_key",
          "description": "primary key of the model",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "name": {
          "name": "name",
          "description": "nation name",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "region_key": {
          "name": "region_key",
          "description": "foreign key to stg_tpch_regions",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "comment": {
          "name": "comment",
          "description": "additional commentary",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        }
      },
      "meta": {},
      "docs": { "show": true, "node_color": "#cd7f32" },
      "patch_path": "tpch://models/staging/tpch/stg_tpch.yml",
      "compiled_path": null,
      "build_path": null,
      "deferred": false,
      "unrendered_config": {
        "materialized": "view",
        "docs": { "node_color": "#cd7f32" },
        "ref_permissions": "private"
      },
      "created_at": 1665426351.517633
    },
    "model.tpch.stg_tpch_line_items": {
      "resource_type": "model",
      "depends_on": {
        "macros": ["macro.dbt_utils.surrogate_key"],
        "nodes": ["source.tpch.tpch_test.lineitem"]
      },
      "config": {
        "enabled": true,
        "alias": null,
        "schema": null,
        "database": null,
        "tags": [],
        "meta": {},
        "materialized": "view",
        "incremental_strategy": null,
        "persist_docs": {},
        "quoting": {},
        "column_types": {},
        "full_refresh": null,
        "unique_key": null,
        "on_schema_change": "ignore",
        "grants": {},
        "packages": [],
        "docs": { "show": true, "node_color": "#cd7f32" },
        "ref_permissions": "private",
        "post-hook": [],
        "pre-hook": []
      },
      "database": "ANALYTICS",
      "schema": "dbt_sung",
      "fqn": ["tpch", "staging", "tpch", "stg_tpch_line_items"],
      "unique_id": "model.tpch.stg_tpch_line_items",
      "raw_code": "with source as (\n\n    select * from {{ source('tpch_test', 'lineitem') }}\n\n),\n\nrenamed as (\n\n    select\n    \n        {{ dbt_utils.surrogate_key(\n            ['l_orderkey', \n            'l_linenumber']) }}\n                as order_item_key,\n        l_orderkey as order_key,\n        l_partkey as part_key,\n        l_suppkey as supplier_key,\n        l_linenumber as line_number,\n        l_quantity as quantity,\n        l_extendedprice as extended_price,\n        l_discount as discount_percentage,\n        l_tax as tax_rate,\n        l_returnflag as return_flag,\n        l_linestatus as status_code,\n        l_shipdate as ship_date,\n        l_commitdate as commit_date,\n        l_receiptdate as receipt_date,\n        l_shipinstruct as ship_instructions,\n        l_shipmode as ship_mode,\n        l_comment as comment\n\n    from source\n\n)\n\nselect * from renamed",
      "language": "sql",
      "package_name": "tpch",
      "root_path": "/Users/sung/Desktop/dbt/dbt_env",
      "path": "staging/tpch/stg_tpch_line_items.sql",
      "original_file_path": "models/staging/tpch/stg_tpch_line_items.sql",
      "name": "stg_tpch_line_items",
      "alias": "stg_tpch_line_items",
      "checksum": {
        "name": "sha256",
        "checksum": "28ea9bdf2698993ef3404af6e048a63756c81edb546c21544b39985a346396e6"
      },
      "tags": [],
      "refs": [],
      "sources": [["tpch_test", "lineitem"]],
      "metrics": [],
      "description": "staging layer for line items data",
      "columns": {
        "order_item_key": {
          "name": "order_item_key",
          "description": "surrogate key for the model -- combo of order_key + line_number",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "order_key": {
          "name": "order_key",
          "description": "foreign key to stg_tpch_orders",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "part_key": {
          "name": "part_key",
          "description": "foreign key to stg_tpch_part_suppliers",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "supplier_key": {
          "name": "supplier_key",
          "description": "foreign key to stg_tpch_suppliers",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "line_number": {
          "name": "line_number",
          "description": "sequence of the order items within the order",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "quantity": {
          "name": "quantity",
          "description": "total units",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "extended_price": {
          "name": "extended_price",
          "description": "line item price",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "discount_percentage": {
          "name": "discount_percentage",
          "description": "percentage of the discount",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "tax_rate": {
          "name": "tax_rate",
          "description": "tax rate of the order item",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "return_flag": {
          "name": "return_flag",
          "description": "letter determining the status of the return",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "status_code": {
          "name": "status_code",
          "description": "status code of the order item",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "ship_date": {
          "name": "ship_date",
          "description": "the date the order item is being shipped",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "commit_date": {
          "name": "commit_date",
          "description": "the date the order item is being commited",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "receipt_date": {
          "name": "receipt_date",
          "description": "the receipt date of the order item",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "ship_instructions": {
          "name": "ship_instructions",
          "description": "additional instructions on the shipment",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "ship_mode": {
          "name": "ship_mode",
          "description": "method of shipping",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "comment": {
          "name": "comment",
          "description": "additional commentary",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        }
      },
      "meta": {},
      "docs": { "show": true, "node_color": "#cd7f32" },
      "patch_path": "tpch://models/staging/tpch/stg_tpch.yml",
      "compiled_path": null,
      "build_path": null,
      "deferred": false,
      "unrendered_config": {
        "materialized": "view",
        "docs": { "node_color": "#cd7f32" },
        "ref_permissions": "private"
      },
      "created_at": 1665426351.5147352
    },
    "model.tpch.stg_tpch_parts": {
      "resource_type": "model",
      "depends_on": { "macros": [], "nodes": ["source.tpch.tpch_test.part"] },
      "config": {
        "enabled": true,
        "alias": null,
        "schema": null,
        "database": null,
        "tags": [],
        "meta": {},
        "materialized": "view",
        "incremental_strategy": null,
        "persist_docs": {},
        "quoting": {},
        "column_types": {},
        "full_refresh": null,
        "unique_key": null,
        "on_schema_change": "ignore",
        "grants": {},
        "packages": [],
        "docs": { "show": true, "node_color": "#cd7f32" },
        "ref_permissions": "private",
        "post-hook": [],
        "pre-hook": []
      },
      "database": "ANALYTICS",
      "schema": "dbt_sung",
      "fqn": ["tpch", "staging", "tpch", "stg_tpch_parts"],
      "unique_id": "model.tpch.stg_tpch_parts",
      "raw_code": "with source as (\n\n    select * from {{ source('tpch_test', 'part') }}\n\n),\n\nrenamed as (\n\n    select\n    \n        p_partkey as part_key,\n        p_name as name,\n        p_mfgr as manufacturer,\n        p_brand as brand,\n        p_type as type,\n        p_size as size,\n        p_container as container,\n        p_retailprice as retail_price,\n        p_comment as comment\n\n    from source\n\n)\n\nselect * from renamed",
      "language": "sql",
      "package_name": "tpch",
      "root_path": "/Users/sung/Desktop/dbt/dbt_env",
      "path": "staging/tpch/stg_tpch_parts.sql",
      "original_file_path": "models/staging/tpch/stg_tpch_parts.sql",
      "name": "stg_tpch_parts",
      "alias": "stg_tpch_parts",
      "checksum": {
        "name": "sha256",
        "checksum": "3fbf8113fbc51f8f276c7a619ae8e7ac72267f34519f839604c1109419ad53bf"
      },
      "tags": [],
      "refs": [],
      "sources": [["tpch_test", "part"]],
      "metrics": [],
      "description": "staging layer for parts data",
      "columns": {
        "part_key": {
          "name": "part_key",
          "description": "primary key of the model",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "name": {
          "name": "name",
          "description": "name of the part",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "manufacturer": {
          "name": "manufacturer",
          "description": "manufacturer of the part",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "brand": {
          "name": "brand",
          "description": "brand of the part",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "type": {
          "name": "type",
          "description": "type of part including material",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "size": {
          "name": "size",
          "description": "size of the part",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "container": {
          "name": "container",
          "description": "container of the part",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "retail_price": {
          "name": "retail_price",
          "description": "raw retail price",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "comment": {
          "name": "comment",
          "description": "additional commentary",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        }
      },
      "meta": {},
      "docs": { "show": true, "node_color": "#cd7f32" },
      "patch_path": "tpch://models/staging/tpch/stg_tpch.yml",
      "compiled_path": null,
      "build_path": null,
      "deferred": false,
      "unrendered_config": {
        "materialized": "view",
        "docs": { "node_color": "#cd7f32" },
        "ref_permissions": "private"
      },
      "created_at": 1665426351.531542
    },
    "model.tpch.dim_suppliers": {
      "resource_type": "model",
      "depends_on": {
        "macros": [],
        "nodes": [
          "model.tpch.stg_tpch_suppliers",
          "model.tpch.stg_tpch_nations",
          "model.tpch.stg_tpch_regions"
        ]
      },
      "config": {
        "enabled": true,
        "alias": null,
        "schema": null,
        "database": null,
        "tags": [],
        "meta": {},
        "materialized": "view",
        "incremental_strategy": null,
        "persist_docs": {},
        "quoting": {},
        "column_types": {},
        "full_refresh": null,
        "unique_key": null,
        "on_schema_change": "ignore",
        "grants": {},
        "packages": [],
        "docs": { "show": true, "node_color": "blue" },
        "post-hook": [],
        "pre-hook": []
      },
      "database": "ANALYTICS",
      "schema": "dbt_sung",
      "fqn": ["tpch", "marts", "core", "dim_suppliers"],
      "unique_id": "model.tpch.dim_suppliers",
      "raw_code": "{{\n    config(\n        materialized = 'view'\n    )\n}}\n\nwith supplier as (\n\n    select * from {{ ref('stg_tpch_suppliers') }}\n\n),\nnation as (\n\n    select * from {{ ref('stg_tpch_nations') }}\n),\nregion as (\n\n    select * from {{ ref('stg_tpch_regions') }}\n\n),\nfinal as (\n\n    select \n        supplier.supplier_key,\n        supplier.supplier_name,\n        supplier.supplier_address,\n        nation.name as nation,\n        region.name as region,\n        supplier.phone_number,\n        supplier.account_balance\n    from\n        supplier\n    inner join nation\n            on supplier.nation_key = nation.nation_key\n    inner join region \n            on nation.region_key = region.region_key\n)\n\nselect * from final",
      "language": "sql",
      "package_name": "tpch",
      "root_path": "/Users/sung/Desktop/dbt/dbt_env",
      "path": "marts/core/dim_suppliers.sql",
      "original_file_path": "models/marts/core/dim_suppliers.sql",
      "name": "dim_suppliers",
      "alias": "dim_suppliers",
      "checksum": {
        "name": "sha256",
        "checksum": "885eb4fc0f1597b064e21e3201da395f067445e5b5a1c79a109ff51f5b152451"
      },
      "tags": [],
      "refs": [
        ["stg_tpch_suppliers"],
        ["stg_tpch_nations"],
        ["stg_tpch_regions"]
      ],
      "sources": [],
      "metrics": [],
      "description": "Suppliers dimensions table",
      "columns": {
        "supplier_key": {
          "name": "supplier_key",
          "description": "primary key of the model",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "supplier_name": {
          "name": "supplier_name",
          "description": "id of the supplier",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "supplier_address": {
          "name": "supplier_address",
          "description": "address of the supplier",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "nation": {
          "name": "nation",
          "description": "nation name",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "region": {
          "name": "region",
          "description": "region name",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "phone_number": {
          "name": "phone_number",
          "description": "phone number of the supplier",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "account_balance": {
          "name": "account_balance",
          "description": "raw account balance",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        }
      },
      "meta": {},
      "docs": { "show": true, "node_color": "blue" },
      "patch_path": "tpch://models/marts/core/core.yml",
      "compiled_path": null,
      "build_path": null,
      "deferred": false,
      "unrendered_config": {
        "materialized": "view",
        "docs": { "node_color": "blue" }
      },
      "created_at": 1665426351.597505
    },
    "model.tpch.dim_parts": {
      "resource_type": "model",
      "depends_on": { "macros": [], "nodes": ["model.tpch.stg_tpch_parts"] },
      "config": {
        "enabled": true,
        "alias": null,
        "schema": null,
        "database": null,
        "tags": [],
        "meta": {},
        "materialized": "table",
        "incremental_strategy": null,
        "persist_docs": {},
        "quoting": {},
        "column_types": {},
        "full_refresh": null,
        "unique_key": null,
        "on_schema_change": "ignore",
        "grants": {},
        "packages": [],
        "docs": { "show": true, "node_color": "blue" },
        "post-hook": [],
        "pre-hook": []
      },
      "database": "ANALYTICS",
      "schema": "dbt_sung",
      "fqn": ["tpch", "marts", "core", "dim_parts"],
      "unique_id": "model.tpch.dim_parts",
      "raw_code": "{{\n    config(\n        materialized = 'table'\n    )\n}}\nwith part as (\n\n    select * from {{ref('stg_tpch_parts')}}\n\n),\n\nfinal as (\n    select \n        part_key,\n        manufacturer,\n        name,\n        brand,\n        type,\n        size,\n        container,\n        retail_price\n    from\n        part\n)\nselect *\nfrom final  \norder by part_key",
      "language": "sql",
      "package_name": "tpch",
      "root_path": "/Users/sung/Desktop/dbt/dbt_env",
      "path": "marts/core/dim_parts.sql",
      "original_file_path": "models/marts/core/dim_parts.sql",
      "name": "dim_parts",
      "alias": "dim_parts",
      "checksum": {
        "name": "sha256",
        "checksum": "d219372a8f9f61e7f76d160ba914834de7fc5883f1fdc81c03da59c08ad262ba"
      },
      "tags": [],
      "refs": [["stg_tpch_parts"]],
      "sources": [],
      "metrics": [],
      "description": "Parts dimensions table",
      "columns": {
        "part_key": {
          "name": "part_key",
          "description": "primary key of the model",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "manufacturer": {
          "name": "manufacturer",
          "description": "manufacturer of the part",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "name": {
          "name": "name",
          "description": "name of the part",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "brand": {
          "name": "brand",
          "description": "brand of the part",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "type": {
          "name": "type",
          "description": "type of part including material",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "size": {
          "name": "size",
          "description": "size of the part",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "container": {
          "name": "container",
          "description": "container of the part",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "retail_price": {
          "name": "retail_price",
          "description": "raw retail price",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        }
      },
      "meta": {},
      "docs": { "show": true, "node_color": "blue" },
      "patch_path": "tpch://models/marts/core/core.yml",
      "compiled_path": null,
      "build_path": null,
      "deferred": false,
      "unrendered_config": {
        "materialized": "table",
        "docs": { "node_color": "blue" }
      },
      "created_at": 1665426351.594062
    },
    "model.tpch.dim_customers": {
      "resource_type": "model",
      "depends_on": {
        "macros": [],
        "nodes": [
          "model.tpch.stg_tpch_customers",
          "model.tpch.stg_tpch_nations",
          "model.tpch.stg_tpch_regions"
        ]
      },
      "config": {
        "enabled": true,
        "alias": null,
        "schema": null,
        "database": null,
        "tags": [],
        "meta": {},
        "materialized": "view",
        "incremental_strategy": null,
        "persist_docs": {},
        "quoting": {},
        "column_types": {},
        "full_refresh": null,
        "unique_key": null,
        "on_schema_change": "ignore",
        "grants": {},
        "packages": [],
        "docs": { "show": true, "node_color": "red" },
        "transient": false,
        "node_color": "pink",
        "ref_permissions": "private",
        "post-hook": [],
        "pre-hook": []
      },
      "database": "ANALYTICS",
      "schema": "dbt_sung",
      "fqn": ["tpch", "marts", "core", "dim_customers"],
      "unique_id": "model.tpch.dim_customers",
      "raw_code": "{{\n    config(\n        materialized = 'view',\n        transient=false,\n        node_color = 'pink'\n    )\n}}\n\n\nwith customer as (\n\n    select * from {{ ref('stg_tpch_customers') }}\n\n),\nnation as (\n\n    select * from {{ ref('stg_tpch_nations') }}\n),\nregion as (\n\n    select * from {{ ref('stg_tpch_regions') }}\n\n),\nfinal as (\n    select \n        customer.customer_key,\n        customer.name,\n        customer.address,\n        {# nation.nation_key as nation_key, #}\n        nation.name as nation,\n        {# region.region_key as region_key, #}\n        region.name as region,\n        customer.phone_number,\n        customer.account_balance,\n        customer.market_segment\n        -- new column\n    from\n        customer\n        inner join nation\n            on customer.nation_key = nation.nation_key\n        inner join region\n            on nation.region_key = region.region_key\n)\nselect \n    *\nfrom\n    final\norder by\n    customer_key",
      "language": "sql",
      "package_name": "tpch",
      "root_path": "/Users/sung/Desktop/dbt/dbt_env",
      "path": "marts/core/dim_customers.sql",
      "original_file_path": "models/marts/core/dim_customers.sql",
      "name": "dim_customers",
      "alias": "dim_customers",
      "checksum": {
        "name": "sha256",
        "checksum": "7737303be12a8fa3d016f064d067400d3972da0e8c14b787928fb9a4c32da757"
      },
      "tags": [],
      "refs": [
        ["stg_tpch_customers"],
        ["stg_tpch_nations"],
        ["stg_tpch_regions"]
      ],
      "sources": [],
      "metrics": [],
      "description": "Customer dimensions table",
      "columns": {
        "customer_key": {
          "name": "customer_key",
          "description": "Primary key on the customers table",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "region": {
          "name": "region",
          "description": "region name",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "name": {
          "name": "name",
          "description": "customer id",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "address": {
          "name": "address",
          "description": "address of the customer",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "nation": {
          "name": "nation",
          "description": "nation name",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "phone_number": {
          "name": "phone_number",
          "description": "phone number of the customer",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "account_balance": {
          "name": "account_balance",
          "description": "raw account balance",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "market_segment": {
          "name": "market_segment",
          "description": "market segment of the customer",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        }
      },
      "meta": {},
      "docs": { "show": true, "node_color": "red" },
      "patch_path": "tpch://models/marts/core/core.yml",
      "compiled_path": null,
      "build_path": null,
      "deferred": false,
      "unrendered_config": {
        "materialized": "view",
        "docs": { "node_color": "red" },
        "ref_permissions": "private",
        "transient": false,
        "node_color": "pink"
      },
      "created_at": 1665426351.589289
    },
    "model.tpch.fct_order_items": {
      "resource_type": "model",
      "depends_on": {
        "macros": [],
        "nodes": ["model.tpch.order_items", "model.tpch.part_suppliers"]
      },
      "config": {
        "enabled": true,
        "alias": null,
        "schema": null,
        "database": null,
        "tags": ["finance"],
        "meta": {},
        "materialized": "table",
        "incremental_strategy": null,
        "persist_docs": {},
        "quoting": {},
        "column_types": {},
        "full_refresh": null,
        "unique_key": null,
        "on_schema_change": "ignore",
        "grants": {},
        "packages": [],
        "docs": { "show": true, "node_color": "blue" },
        "post-hook": [],
        "pre-hook": []
      },
      "database": "ANALYTICS",
      "schema": "dbt_sung",
      "fqn": ["tpch", "marts", "core", "fct_order_items"],
      "unique_id": "model.tpch.fct_order_items",
      "raw_code": "{{\n    config(\n        materialized = 'table',\n        tags = ['finance']\n    )\n}}\n\nwith order_item as (\n    \n    select * from {{ ref('order_items') }}\n\n),\npart_supplier as (\n    \n    select * from {{ ref('part_suppliers') }}\n\n),\nfinal as (\n    select \n        order_item.order_item_key,\n        order_item.order_key,\n        order_item.order_date,\n        order_item.customer_key,\n        order_item.part_key,\n        order_item.supplier_key,\n        order_item.order_item_status_code,\n        order_item.return_flag,\n        order_item.line_number,\n        order_item.ship_date,\n        order_item.commit_date,\n        order_item.receipt_date,\n        order_item.ship_mode,\n        part_supplier.cost as supplier_cost,\n        {# ps.retail_price, #}\n        order_item.base_price,\n        order_item.discount_percentage,\n        order_item.discounted_price,\n        order_item.tax_rate,\n        \n        1 as order_item_count,\n        order_item.quantity,\n        order_item.gross_item_sales_amount,\n        order_item.discounted_item_sales_amount,\n        order_item.item_discount_amount,\n        order_item.item_tax_amount,\n        order_item.net_item_sales_amount\n\n    from\n        order_item\n        inner join part_supplier\n            on order_item.part_key = part_supplier.part_key and\n                order_item.supplier_key = part_supplier.supplier_key\n)\nselect \n    *\nfrom\n    final\norder by\n    order_date",
      "language": "sql",
      "package_name": "tpch",
      "root_path": "/Users/sung/Desktop/dbt/dbt_env",
      "path": "marts/core/fct_order_items.sql",
      "original_file_path": "models/marts/core/fct_order_items.sql",
      "name": "fct_order_items",
      "alias": "fct_order_items",
      "checksum": {
        "name": "sha256",
        "checksum": "5f8fb569498ac38f2f8b0208a170ff5d389bae737fec324a988757501fd17797"
      },
      "tags": ["finance"],
      "refs": [["order_items"], ["part_suppliers"]],
      "sources": [],
      "metrics": [],
      "description": "order items fact table",
      "columns": {
        "order_item_key": {
          "name": "order_item_key",
          "description": "surrogate key for the model -- combo of order_key + line_number",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "order_key": {
          "name": "order_key",
          "description": "foreign key for orders",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "order_date": {
          "name": "order_date",
          "description": "date of the order",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "customer_key": {
          "name": "customer_key",
          "description": "foreign key for customers",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "part_key": {
          "name": "part_key",
          "description": "foreign key for part",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "supplier_key": {
          "name": "supplier_key",
          "description": "foreign key for suppliers",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "order_item_status_code": {
          "name": "order_item_status_code",
          "description": "status of the order item",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "return_flag": {
          "name": "return_flag",
          "description": "letter determining the status of the return",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "line_number": {
          "name": "line_number",
          "description": "sequence of the order items within the order",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "ship_date": {
          "name": "ship_date",
          "description": "the date the order item is being shipped",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "commit_date": {
          "name": "commit_date",
          "description": "the date the order item is being commited",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "receipt_date": {
          "name": "receipt_date",
          "description": "the receipt date of the order item",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "ship_mode": {
          "name": "ship_mode",
          "description": "method of shipping",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "supplier_cost": {
          "name": "supplier_cost",
          "description": "raw cost",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "base_price": {
          "name": "base_price",
          "description": "since extended_price is the line item total, we back out the price per item",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "discount_percentage": {
          "name": "discount_percentage",
          "description": "percentage of the discount",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "discounted_price": {
          "name": "discounted_price",
          "description": "factoring in the discount_percentage, the line item discount total",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "tax_rate": {
          "name": "tax_rate",
          "description": "tax rate of the order item",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "order_item_count": {
          "name": "order_item_count",
          "description": "count of order items",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "quantity": {
          "name": "quantity",
          "description": "total units",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "gross_item_sales_amount": {
          "name": "gross_item_sales_amount",
          "description": "same as extended_price",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "discounted_item_sales_amount": {
          "name": "discounted_item_sales_amount",
          "description": "line item (includes quantity) discount amount",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "item_discount_amount": {
          "name": "item_discount_amount",
          "description": "item level discount amount. this is always a negative number",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "item_tax_amount": {
          "name": "item_tax_amount",
          "description": "item level tax total",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "net_item_sales_amount": {
          "name": "net_item_sales_amount",
          "description": "the net total which factors in discount and tax",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        }
      },
      "meta": {},
      "docs": { "show": true, "node_color": "blue" },
      "patch_path": "tpch://models/marts/core/core.yml",
      "compiled_path": null,
      "build_path": null,
      "deferred": false,
      "unrendered_config": {
        "materialized": "table",
        "docs": { "node_color": "blue" },
        "tags": ["finance"]
      },
      "created_at": 1665426351.609309
    },
    "model.tpch.fct_orders": {
      "resource_type": "model",
      "depends_on": {
        "macros": [],
        "nodes": ["model.tpch.stg_tpch_orders", "model.tpch.order_items"]
      },
      "config": {
        "enabled": true,
        "alias": null,
        "schema": null,
        "database": null,
        "tags": ["finance"],
        "meta": {},
        "materialized": "view",
        "incremental_strategy": null,
        "persist_docs": {},
        "quoting": {},
        "column_types": {},
        "full_refresh": null,
        "unique_key": null,
        "on_schema_change": "ignore",
        "grants": {},
        "packages": [],
        "docs": { "show": true, "node_color": "red" },
        "post-hook": [],
        "pre-hook": []
      },
      "database": "ANALYTICS",
      "schema": "dbt_sung",
      "fqn": ["tpch", "marts", "core", "fct_orders"],
      "unique_id": "model.tpch.fct_orders",
      "raw_code": "{{\n    config(\n        materialized = 'view',\n        tags=['finance'],\n        docs={'node_color': 'red'}\n    )\n}}\n\nwith orders as (\n    \n    select * from {{ ref('stg_tpch_orders') }} \n\n),\norder_item as (\n    \n    select * from {{ ref('order_items') }}\n\n),\norder_item_summary as (\n\n    select \n        order_key,\n        sum(gross_item_sales_amount) as gross_item_sales_amount,\n        sum(item_discount_amount) as item_discount_amount,\n        sum(item_tax_amount) as item_tax_amount,\n        sum(net_item_sales_amount) as net_item_sales_amount\n    from order_item\n    group by\n        1\n),\nfinal as (\n\n    select \n\n        orders.order_key, \n        orders.order_date,\n        orders.customer_key,\n        orders.status_code,\n        orders.priority_code,\n        orders.clerk_name,\n        orders.ship_priority,\n                \n        1 as order_count,                \n        order_item_summary.gross_item_sales_amount,\n        order_item_summary.item_discount_amount,\n        order_item_summary.item_tax_amount,\n        order_item_summary.net_item_sales_amount\n    from\n        orders\n        inner join order_item_summary\n            on orders.order_key = order_item_summary.order_key\n)\nselect \n    *\nfrom\n    final\n\norder by\n    order_date",
      "language": "sql",
      "package_name": "tpch",
      "root_path": "/Users/sung/Desktop/dbt/dbt_env",
      "path": "marts/core/fct_orders.sql",
      "original_file_path": "models/marts/core/fct_orders.sql",
      "name": "fct_orders",
      "alias": "fct_orders",
      "checksum": {
        "name": "sha256",
        "checksum": "b0af80f9e341c2630a5548992e80939e1d18b72b3398392404c4cf595490884a"
      },
      "tags": ["finance"],
      "refs": [["stg_tpch_orders"], ["order_items"]],
      "sources": [],
      "metrics": [],
      "description": "orders fact table",
      "columns": {
        "order_key": {
          "name": "order_key",
          "description": "primary key of the model",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "customer_key": {
          "name": "customer_key",
          "description": "foreign key for customers",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "order_date": {
          "name": "order_date",
          "description": "date of the order",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "status_code": {
          "name": "status_code",
          "description": "status of the order",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "priority_code": {
          "name": "priority_code",
          "description": "code associated with the order",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "clerk_name": {
          "name": "clerk_name",
          "description": "id of the clerk",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "ship_priority": {
          "name": "ship_priority",
          "description": "numeric representation of the shipping priority, zero being the default",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "order_count": {
          "name": "order_count",
          "description": "count of order",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "gross_item_sales_amount": {
          "name": "gross_item_sales_amount",
          "description": "same as extended_price",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "item_discount_amount": {
          "name": "item_discount_amount",
          "description": "item level discount amount. this is always a negative number",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "item_tax_amount": {
          "name": "item_tax_amount",
          "description": "item level tax total",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "net_item_sales_amount": {
          "name": "net_item_sales_amount",
          "description": "the net total which factors in discount and tax",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        }
      },
      "meta": {},
      "docs": { "show": true, "node_color": "red" },
      "patch_path": "tpch://models/marts/core/core.yml",
      "compiled_path": null,
      "build_path": null,
      "deferred": false,
      "unrendered_config": {
        "materialized": "view",
        "docs": { "node_color": "red" },
        "tags": ["finance"]
      },
      "created_at": 1665426351.615485
    },
    "model.tpch.test_model_v2": {
      "resource_type": "model",
      "depends_on": { "macros": [], "nodes": ["model.tpch.dim_suppliers"] },
      "config": {
        "enabled": true,
        "alias": null,
        "schema": null,
        "database": null,
        "tags": [],
        "meta": {},
        "materialized": "table",
        "incremental_strategy": null,
        "persist_docs": {},
        "quoting": {},
        "column_types": {},
        "full_refresh": null,
        "unique_key": null,
        "on_schema_change": "ignore",
        "grants": {},
        "packages": [],
        "docs": { "show": true, "node_color": "blue" },
        "post-hook": [],
        "pre-hook": []
      },
      "database": "ANALYTICS",
      "schema": "dbt_sung",
      "fqn": ["tpch", "marts", "core", "test_model_v2"],
      "unique_id": "model.tpch.test_model_v2",
      "raw_code": "select * from {{ ref('dim_suppliers') }}",
      "language": "sql",
      "package_name": "tpch",
      "root_path": "/Users/sung/Desktop/dbt/dbt_env",
      "path": "marts/core/test_model_v2.sql",
      "original_file_path": "models/marts/core/test_model_v2.sql",
      "name": "test_model_v2",
      "alias": "test_model_v2",
      "checksum": {
        "name": "sha256",
        "checksum": "d019b285397c65d0f1bd5abce80efb16aa0d5434a12e451a67c48b1a4ce58fa1"
      },
      "tags": [],
      "refs": [["dim_suppliers"]],
      "sources": [],
      "metrics": [],
      "description": "",
      "columns": {},
      "meta": {},
      "docs": { "show": true, "node_color": "blue" },
      "patch_path": null,
      "compiled_path": null,
      "build_path": null,
      "deferred": false,
      "unrendered_config": {
        "materialized": "table",
        "docs": { "node_color": "blue" }
      },
      "created_at": 1665426350.9823282
    },
    "model.tpch.agg_ship_modes_hardcoded_pivot": {
      "resource_type": "model",
      "depends_on": { "macros": [], "nodes": ["model.tpch.fct_order_items"] },
      "config": {
        "enabled": true,
        "alias": null,
        "schema": null,
        "database": null,
        "tags": [],
        "meta": {},
        "materialized": "view",
        "incremental_strategy": null,
        "persist_docs": {},
        "quoting": {},
        "column_types": {},
        "full_refresh": null,
        "unique_key": null,
        "on_schema_change": "ignore",
        "grants": {},
        "packages": [],
        "docs": { "show": true, "node_color": null },
        "post-hook": [],
        "pre-hook": []
      },
      "database": "ANALYTICS",
      "schema": "dbt_sung",
      "fqn": ["tpch", "marts", "aggregates", "agg_ship_modes_hardcoded_pivot"],
      "unique_id": "model.tpch.agg_ship_modes_hardcoded_pivot",
      "raw_code": "/* Create a pivot table with hard-coded columns based on a query of the ship modes that are in the system */\n\nwith merged as (\n    select\n        date_part('year', order_date) as order_year,\n        ship_mode,\n        gross_item_sales_amount\n    from {{ ref('fct_order_items') }}\n)\n\nselect\n    * \nfrom\n    merged\n    -- have to manually map strings in the pivot operation\n    pivot(sum(gross_item_sales_amount) for ship_mode in (\n        'AIR',\n        'REG AIR',\n        'FOB',\n        'RAIL',\n        'MAIL',\n        'SHIP',\n        'TRUCK'\n    )) as p \n\norder by order_year",
      "language": "sql",
      "package_name": "tpch",
      "root_path": "/Users/sung/Desktop/dbt/dbt_env",
      "path": "marts/aggregates/agg_ship_modes_hardcoded_pivot.sql",
      "original_file_path": "models/marts/aggregates/agg_ship_modes_hardcoded_pivot.sql",
      "name": "agg_ship_modes_hardcoded_pivot",
      "alias": "agg_ship_modes_hardcoded_pivot",
      "checksum": {
        "name": "sha256",
        "checksum": "4d9c470a572092b0132991809aa9eb9eb462edfd26511faa66376204561cfc01"
      },
      "tags": [],
      "refs": [["fct_order_items"]],
      "sources": [],
      "metrics": [],
      "description": "Example of creating a pivot table with dynamic columns based on the ship modes that are in the system",
      "columns": {
        "order_year": {
          "name": "order_year",
          "description": "year of the order",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        }
      },
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": "tpch://models/marts/aggregates/aggregates.yml",
      "compiled_path": null,
      "build_path": null,
      "deferred": false,
      "unrendered_config": {},
      "created_at": 1665426351.680531
    },
    "model.tpch.agg_ship_modes_dynamic_pivot": {
      "resource_type": "model",
      "depends_on": {
        "macros": ["macro.dbt.statement"],
        "nodes": ["model.tpch.fct_order_items"]
      },
      "config": {
        "enabled": true,
        "alias": null,
        "schema": null,
        "database": null,
        "tags": [],
        "meta": {},
        "materialized": "view",
        "incremental_strategy": null,
        "persist_docs": {},
        "quoting": {},
        "column_types": {},
        "full_refresh": null,
        "unique_key": null,
        "on_schema_change": "ignore",
        "grants": {},
        "packages": [],
        "docs": { "show": true, "node_color": null },
        "post-hook": [],
        "pre-hook": []
      },
      "database": "ANALYTICS",
      "schema": "dbt_sung",
      "fqn": ["tpch", "marts", "aggregates", "agg_ship_modes_dynamic_pivot"],
      "unique_id": "model.tpch.agg_ship_modes_dynamic_pivot",
      "raw_code": "/* Create a pivot table with dynamic columns based on the ship modes that are in the system */\n\n{%- call statement('result', fetch_result=True) -%}\n\n    {# this pulls the unique ship modes from the fct_order_items table #}\n    select ship_mode from {{ ref('fct_order_items') }} group by 1 \n\n{%- endcall %}\n\n{% set ship_modes = load_result('result').table.columns[0].values() %}\n\nselect\n    date_part('year', order_date) as ordered_year,\n\n    {# Loop over ship_modes array from above, and sum based on whether the record matches the ship mode #}\n    {%- for ship_mode in ship_modes -%}\n        sum(case when ship_mode = '{{ship_mode}}' then gross_item_sales_amount end) as \"{{ship_mode|replace(' ', '_')}}_amount\"\n        {%- if not loop.last -%},{% endif %}\n    {% endfor %}\n\nfrom {{ ref('fct_order_items') }}\ngroup by 1",
      "language": "sql",
      "package_name": "tpch",
      "root_path": "/Users/sung/Desktop/dbt/dbt_env",
      "path": "marts/aggregates/agg_ship_modes_dynamic_pivot.sql",
      "original_file_path": "models/marts/aggregates/agg_ship_modes_dynamic_pivot.sql",
      "name": "agg_ship_modes_dynamic_pivot",
      "alias": "agg_ship_modes_dynamic_pivot",
      "checksum": {
        "name": "sha256",
        "checksum": "83b4e97875d0f74d3657a2c2686538883178b20276e0c4bf19725b42e1533572"
      },
      "tags": [],
      "refs": [["fct_order_items"]],
      "sources": [],
      "metrics": [],
      "description": "Example of creating a pivot table with hard-coded columns based on a query of the ship modes that are in the system",
      "columns": {
        "order_year": {
          "name": "order_year",
          "description": "year of the order",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        }
      },
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": "tpch://models/marts/aggregates/aggregates.yml",
      "compiled_path": null,
      "build_path": null,
      "deferred": false,
      "unrendered_config": {},
      "created_at": 1665426351.681629
    },
    "model.tpch.part_suppliers": {
      "resource_type": "model",
      "depends_on": {
        "macros": [],
        "nodes": [
          "model.tpch.stg_tpch_parts",
          "model.tpch.stg_tpch_suppliers",
          "model.tpch.stg_tpch_part_suppliers"
        ]
      },
      "config": {
        "enabled": true,
        "alias": null,
        "schema": null,
        "database": null,
        "tags": [],
        "meta": {},
        "materialized": "view",
        "incremental_strategy": null,
        "persist_docs": {},
        "quoting": {},
        "column_types": {},
        "full_refresh": null,
        "unique_key": null,
        "on_schema_change": "ignore",
        "grants": {},
        "packages": [],
        "docs": { "show": true, "node_color": null },
        "post-hook": [],
        "pre-hook": []
      },
      "database": "ANALYTICS",
      "schema": "dbt_sung",
      "fqn": ["tpch", "marts", "intermediate", "part_suppliers"],
      "unique_id": "model.tpch.part_suppliers",
      "raw_code": "with part as (\n    \n    select * from {{ ref('stg_tpch_parts') }}\n\n),\n\nsupplier as (\n\n    select * from {{ ref('stg_tpch_suppliers') }}\n\n),\n\npart_supplier as (\n\n    select * from {{ ref('stg_tpch_part_suppliers') }}\n\n),\n\nfinal as (\n    select \n\n    part_supplier.part_supplier_key,\n    part.part_key,\n    part.name as part_name,\n    part.manufacturer,\n    part.brand,\n    part.type as part_type,\n    part.size as part_size,\n    part.container,\n    part.retail_price,\n\n    supplier.supplier_key,\n    supplier.supplier_name,\n    supplier.supplier_address,\n    supplier.phone_number,\n    supplier.account_balance,\n    supplier.nation_key,\n\n    part_supplier.available_quantity,\n    part_supplier.cost\nfrom\n    part \ninner join \n    part_supplier\n        on part.part_key = part_supplier.part_key\ninner join\n    supplier\n        on part_supplier.supplier_key = supplier.supplier_key\norder by\n    part.part_key\n)\n\nselect * from final",
      "language": "sql",
      "package_name": "tpch",
      "root_path": "/Users/sung/Desktop/dbt/dbt_env",
      "path": "marts/intermediate/part_suppliers.sql",
      "original_file_path": "models/marts/intermediate/part_suppliers.sql",
      "name": "part_suppliers",
      "alias": "part_suppliers",
      "checksum": {
        "name": "sha256",
        "checksum": "e0c44dc244c520b7d9a6af7e10c91899d8778c2c92e01d0f042eb2996dd25680"
      },
      "tags": [],
      "refs": [
        ["stg_tpch_parts"],
        ["stg_tpch_suppliers"],
        ["stg_tpch_part_suppliers"]
      ],
      "sources": [],
      "metrics": [],
      "description": "Intermediate model where we join part, supplier and part_supplier. This model is at the part supplier level.",
      "columns": {
        "part_supplier_key": {
          "name": "part_supplier_key",
          "description": "primary key of the models",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "part_key": {
          "name": "part_key",
          "description": "foreign key for part",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "part_name": {
          "name": "part_name",
          "description": "name of the part",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "manufacturer": {
          "name": "manufacturer",
          "description": "manufacturer of the part",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "brand": {
          "name": "brand",
          "description": "brand of the part",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "part_type": {
          "name": "part_type",
          "description": "type of part including material",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "part_size": {
          "name": "part_size",
          "description": "size of the part",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "container": {
          "name": "container",
          "description": "container of the part",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "retail_price": {
          "name": "retail_price",
          "description": "raw retail price",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "supplier_key": {
          "name": "supplier_key",
          "description": "foreign key for supplier",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "supplier_name": {
          "name": "supplier_name",
          "description": "id of the supplier",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "supplier_address": {
          "name": "supplier_address",
          "description": "address of the supplier",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "phone_number": {
          "name": "phone_number",
          "description": "phone number of the supplier",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "account_balance": {
          "name": "account_balance",
          "description": "raw account balance",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "nation_key": {
          "name": "nation_key",
          "description": "foreign key for nation",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "available_quantity": {
          "name": "available_quantity",
          "description": "raw available quantity",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "cost": {
          "name": "cost",
          "description": "raw cost",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        }
      },
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": "tpch://models/marts/intermediate/intermediate.yml",
      "compiled_path": null,
      "build_path": null,
      "deferred": false,
      "unrendered_config": {},
      "created_at": 1665426351.702026
    },
    "model.tpch.order_items": {
      "resource_type": "model",
      "depends_on": {
        "macros": ["macro.tpch.money"],
        "nodes": [
          "model.tpch.stg_tpch_orders",
          "model.tpch.stg_tpch_line_items"
        ]
      },
      "config": {
        "enabled": true,
        "alias": null,
        "schema": null,
        "database": null,
        "tags": [],
        "meta": {},
        "materialized": "view",
        "incremental_strategy": null,
        "persist_docs": {},
        "quoting": {},
        "column_types": {},
        "full_refresh": null,
        "unique_key": null,
        "on_schema_change": "ignore",
        "grants": {},
        "packages": [],
        "docs": { "show": true, "node_color": "blue" },
        "transient": false,
        "post-hook": [],
        "pre-hook": []
      },
      "database": "ANALYTICS",
      "schema": "dbt_sung",
      "fqn": ["tpch", "marts", "intermediate", "order_items"],
      "unique_id": "model.tpch.order_items",
      "raw_code": "{{\n    config(\n        materialized = 'view',\n        transient=false,\n        docs={'node_color': 'blue'}\n    )\n}}\n\nwith orders as (\n    \n    select * from {{ ref('stg_tpch_orders') }}\n\n),\n\nline_item as (\n\n    select * from {{ ref('stg_tpch_line_items') }}\n\n)\nselect \n\n    line_item.order_item_key,\n    orders.order_key,\n    orders.customer_key,\n    line_item.part_key,\n    line_item.supplier_key,\n    orders.order_date,\n    orders.status_code as order_status_code,\n    \n    \n    line_item.return_flag,\n    \n    line_item.line_number,\n    line_item.status_code as order_item_status_code,\n    line_item.ship_date,\n    line_item.commit_date,\n    line_item.receipt_date,\n    line_item.ship_mode,\n    line_item.extended_price,\n    line_item.quantity,\n    \n    -- extended_price is actually the line item total,\n    -- so we back out the extended price per item\n    (line_item.extended_price/nullif(line_item.quantity, 0)){{ money() }} as base_price,\n    line_item.discount_percentage,\n    (base_price * (1 - line_item.discount_percentage)){{ money() }} as discounted_price,\n\n    line_item.extended_price as gross_item_sales_amount,\n    (line_item.extended_price * (1 - line_item.discount_percentage)){{ money() }} as discounted_item_sales_amount,\n    -- We model discounts as negative amounts\n    (-1 * line_item.extended_price * line_item.discount_percentage){{ money() }} as item_discount_amount,\n    line_item.tax_rate,\n    ((gross_item_sales_amount + item_discount_amount) * line_item.tax_rate){{ money() }} as item_tax_amount,\n    (\n        gross_item_sales_amount + \n        item_discount_amount + \n        item_tax_amount\n    ){{ money() }} as net_item_sales_amount\n\nfrom\n    orders\ninner join line_item\n        on orders.order_key = line_item.order_key\norder by\n    orders.order_date",
      "language": "sql",
      "package_name": "tpch",
      "root_path": "/Users/sung/Desktop/dbt/dbt_env",
      "path": "marts/intermediate/order_items.sql",
      "original_file_path": "models/marts/intermediate/order_items.sql",
      "name": "order_items",
      "alias": "order_items",
      "checksum": {
        "name": "sha256",
        "checksum": "c895f5503786002710bcf2d4c607111b034f91be84f170b1676e9b186aa06827"
      },
      "tags": [],
      "refs": [["stg_tpch_orders"], ["stg_tpch_line_items"]],
      "sources": [],
      "metrics": [],
      "description": "Intermediate model where we calculate item price, discounts and tax. This model is at the order item level.",
      "columns": {
        "order_item_key": {
          "name": "order_item_key",
          "description": "surrogate key for the model -- combo of order_key + line_number",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "order_key": {
          "name": "order_key",
          "description": "foreign key for orders",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "customer_key": {
          "name": "customer_key",
          "description": "foreign key for customers",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "part_key": {
          "name": "part_key",
          "description": "foreign key for part",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "supplier_key": {
          "name": "supplier_key",
          "description": "foreign key for suppliers",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "order_date": {
          "name": "order_date",
          "description": "date of the order",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "order_status_code": {
          "name": "order_status_code",
          "description": "status of the order",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "return_flag": {
          "name": "return_flag",
          "description": "letter determining the status of the return",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "line_number": {
          "name": "line_number",
          "description": "sequence of the order items within the order",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "order_item_status_code": {
          "name": "order_item_status_code",
          "description": "status of the order item",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "ship_date": {
          "name": "ship_date",
          "description": "the date the order item is being shipped",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "commit_date": {
          "name": "commit_date",
          "description": "the date the order item is being commited",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "receipt_date": {
          "name": "receipt_date",
          "description": "the receipt date of the order item",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "ship_mode": {
          "name": "ship_mode",
          "description": "method of shipping",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "extended_price": {
          "name": "extended_price",
          "description": "line item price",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "quantity": {
          "name": "quantity",
          "description": "total units",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "base_price": {
          "name": "base_price",
          "description": "since extended_price is the line item total, we back out the price per item",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "discount_percentage": {
          "name": "discount_percentage",
          "description": "percentage of the discount",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "discounted_price": {
          "name": "discounted_price",
          "description": "factoring in the discount_percentage, the line item discount total",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "gross_item_sales_amount": {
          "name": "gross_item_sales_amount",
          "description": "same as extended_price",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "discounted_item_sales_amount": {
          "name": "discounted_item_sales_amount",
          "description": "line item (includes quantity) discount amount",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "item_discount_amount": {
          "name": "item_discount_amount",
          "description": "item level discount amount. this is always a negative number",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "tax_rate": {
          "name": "tax_rate",
          "description": "tax rate of the order item",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "item_tax_amount": {
          "name": "item_tax_amount",
          "description": "item level tax total",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "net_item_sales_amount": {
          "name": "net_item_sales_amount",
          "description": "the net total which factors in discount and tax",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        }
      },
      "meta": {},
      "docs": { "show": true, "node_color": "blue" },
      "patch_path": "tpch://models/marts/intermediate/intermediate.yml",
      "compiled_path": null,
      "build_path": null,
      "deferred": false,
      "unrendered_config": {
        "materialized": "view",
        "transient": false,
        "docs": { "node_color": "blue" }
      },
      "created_at": 1665426351.694635
    },
    "model.tpch.all_days": {
      "resource_type": "model",
      "depends_on": { "macros": ["macro.dbt_utils.date_spine"], "nodes": [] },
      "config": {
        "enabled": true,
        "alias": null,
        "schema": null,
        "database": null,
        "tags": [],
        "meta": {},
        "materialized": "view",
        "incremental_strategy": null,
        "persist_docs": {},
        "quoting": {},
        "column_types": {},
        "full_refresh": null,
        "unique_key": null,
        "on_schema_change": "ignore",
        "grants": {},
        "packages": [],
        "docs": { "show": true, "node_color": null },
        "post-hook": [],
        "pre-hook": []
      },
      "database": "ANALYTICS",
      "schema": "dbt_sung",
      "fqn": ["tpch", "utils", "all_days"],
      "unique_id": "model.tpch.all_days",
      "raw_code": "{{ dbt_utils.date_spine(\n    datepart=\"day\",\n    start_date=\"to_date('01/01/1992', 'mm/dd/yyyy')\",\n    end_date=\"dateadd(year, 1, current_date)\"\n   )\n}}",
      "language": "sql",
      "package_name": "tpch",
      "root_path": "/Users/sung/Desktop/dbt/dbt_env",
      "path": "utils/all_days.sql",
      "original_file_path": "models/utils/all_days.sql",
      "name": "all_days",
      "alias": "all_days",
      "checksum": {
        "name": "sha256",
        "checksum": "085c7fe9dcf86861369fae49eacbccaaec2d689fbfc92edb07e18b17e21821e8"
      },
      "tags": [],
      "refs": [],
      "sources": [],
      "metrics": [],
      "description": "This model is an example of how to create a date spine using dbt_utils. Rather than writing a bunch of code to create this, we're able to three lines of code.",
      "columns": {
        "date_day": {
          "name": "date_day",
          "description": "date generated by the macro",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        }
      },
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": "tpch://models/utils/utils.yml",
      "compiled_path": null,
      "build_path": null,
      "deferred": false,
      "unrendered_config": {},
      "created_at": 1665426351.7134101
    },
    "model.tpch.get_area_of_circle": {
      "resource_type": "model",
      "depends_on": { "macros": [], "nodes": [] },
      "config": {
        "enabled": true,
        "alias": null,
        "schema": null,
        "database": null,
        "tags": [],
        "meta": {},
        "materialized": "view",
        "incremental_strategy": null,
        "persist_docs": {},
        "quoting": {},
        "column_types": {},
        "full_refresh": null,
        "unique_key": null,
        "on_schema_change": "ignore",
        "grants": {},
        "packages": [],
        "docs": { "show": true, "node_color": null },
        "post-hook": [],
        "pre-hook": []
      },
      "database": "ANALYTICS",
      "schema": "dbt_sung",
      "fqn": ["tpch", "demo_examples", "get_area_of_circle"],
      "unique_id": "model.tpch.get_area_of_circle",
      "raw_code": "SELECT area_of_circle(1.0) AS area",
      "language": "sql",
      "package_name": "tpch",
      "root_path": "/Users/sung/Desktop/dbt/dbt_env",
      "path": "demo_examples/get_area_of_circle.sql",
      "original_file_path": "models/demo_examples/get_area_of_circle.sql",
      "name": "get_area_of_circle",
      "alias": "get_area_of_circle",
      "checksum": {
        "name": "sha256",
        "checksum": "3596e6223f2cff36ab79977e5f1370e50ddc59e7f0974ec9554b75fcf8e87c52"
      },
      "tags": [],
      "refs": [],
      "sources": [],
      "metrics": [],
      "description": "demo to show udfs",
      "columns": {},
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": "tpch://models/demo_examples/demo_examples.yml",
      "compiled_path": null,
      "build_path": null,
      "deferred": false,
      "unrendered_config": {},
      "created_at": 1665426351.739418
    },
    "model.tpch.use_variables": {
      "resource_type": "model",
      "depends_on": {
        "macros": [],
        "nodes": ["model.tpch.fct_order_items", "model.tpch.fct_order_items"]
      },
      "config": {
        "enabled": true,
        "alias": null,
        "schema": null,
        "database": null,
        "tags": [],
        "meta": {},
        "materialized": "view",
        "incremental_strategy": null,
        "persist_docs": {},
        "quoting": {},
        "column_types": {},
        "full_refresh": null,
        "unique_key": null,
        "on_schema_change": "ignore",
        "grants": {},
        "packages": [],
        "docs": { "show": true, "node_color": null },
        "post-hook": [],
        "pre-hook": []
      },
      "database": "ANALYTICS",
      "schema": "dbt_sung",
      "fqn": ["tpch", "demo_examples", "use_variables"],
      "unique_id": "model.tpch.use_variables",
      "raw_code": "-- This is here to show that data older than start_date exists - run this first\n-- select min(order_date) from {{ ref('fct_order_items') }}\n\n-- start_date is defined in the dbt_project.yml \n-- to illustrate overriding variables from the command line, run dbt run -m use_variables --vars '{\"start_date\": \"1996-01-01\"}'\nselect * from {{ ref('fct_order_items') }} where order_date >= '{{ var(\"start_date\") }}'",
      "language": "sql",
      "package_name": "tpch",
      "root_path": "/Users/sung/Desktop/dbt/dbt_env",
      "path": "demo_examples/use_variables.sql",
      "original_file_path": "models/demo_examples/use_variables.sql",
      "name": "use_variables",
      "alias": "use_variables",
      "checksum": {
        "name": "sha256",
        "checksum": "2c9542a54b800a45ae4a6b5a0eee8e4609f5e15c9745aa48715872e6a4560b32"
      },
      "tags": [],
      "refs": [["fct_order_items"], ["fct_order_items"]],
      "sources": [],
      "metrics": [],
      "description": "demo to show variables",
      "columns": {
        "order_item_key": {
          "name": "order_item_key",
          "description": "",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        }
      },
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": "tpch://models/demo_examples/demo_examples.yml",
      "compiled_path": null,
      "build_path": null,
      "deferred": false,
      "unrendered_config": {},
      "created_at": 1665426351.7388911
    },
    "model.tpch.my_first_model": {
      "resource_type": "model",
      "depends_on": { "macros": [], "nodes": [] },
      "config": {
        "enabled": true,
        "alias": null,
        "schema": null,
        "database": null,
        "tags": [],
        "meta": {},
        "materialized": "view",
        "incremental_strategy": null,
        "persist_docs": {},
        "quoting": {},
        "column_types": {},
        "full_refresh": null,
        "unique_key": null,
        "on_schema_change": "ignore",
        "grants": {},
        "packages": [],
        "docs": { "show": true, "node_color": null },
        "post-hook": [],
        "pre-hook": []
      },
      "database": "ANALYTICS",
      "schema": "dbt_sung",
      "fqn": ["tpch", "demo_examples", "my_first_model"],
      "unique_id": "model.tpch.my_first_model",
      "raw_code": "/*\n    Welcome to your first dbt model!\n    Did you know that you can also configure models directly within SQL files?\n    This will override configurations stated in dbt_project.yml\n    Try changing \"table\" to \"view\" below\n*/\n\n\n{{ config(materialized='view') }}\n\n\nwith source_data as (\n\n    select 1 as id\n    union all\n    select 2 as id\n\n)\n\nselect *\nfrom source_data\n\n/*\n    Uncomment the line below to remove records with null `id` values\n*/\n\n-- where id is not null",
      "language": "sql",
      "package_name": "tpch",
      "root_path": "/Users/sung/Desktop/dbt/dbt_env",
      "path": "demo_examples/my_first_model.sql",
      "original_file_path": "models/demo_examples/my_first_model.sql",
      "name": "my_first_model",
      "alias": "my_first_model",
      "checksum": {
        "name": "sha256",
        "checksum": "727d4af05e45dc7556410e97db98eb49597270b9f9e0976773a3efe4a40deb47"
      },
      "tags": [],
      "refs": [],
      "sources": [],
      "metrics": [],
      "description": "",
      "columns": {},
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "compiled_path": null,
      "build_path": null,
      "deferred": false,
      "unrendered_config": { "materialized": "view" },
      "created_at": 1665426351.0635872
    },
    "model.tpch.my_second_model": {
      "resource_type": "model",
      "depends_on": { "macros": [], "nodes": ["model.tpch.my_first_model"] },
      "config": {
        "enabled": true,
        "alias": null,
        "schema": null,
        "database": null,
        "tags": [],
        "meta": {},
        "materialized": "view",
        "incremental_strategy": null,
        "persist_docs": {},
        "quoting": {},
        "column_types": {},
        "full_refresh": null,
        "unique_key": null,
        "on_schema_change": "ignore",
        "grants": {},
        "packages": [],
        "docs": { "show": true, "node_color": null },
        "post-hook": [],
        "pre-hook": []
      },
      "database": "ANALYTICS",
      "schema": "dbt_sung",
      "fqn": ["tpch", "demo_examples", "my_second_model"],
      "unique_id": "model.tpch.my_second_model",
      "raw_code": "-- Use the `ref` function to select from other models\n\n{# {{ config(alias='my_first_model') }} #}\n\nselect *\nfrom {{ ref('my_first_model') }}\nwhere id = 2",
      "language": "sql",
      "package_name": "tpch",
      "root_path": "/Users/sung/Desktop/dbt/dbt_env",
      "path": "demo_examples/my_second_model.sql",
      "original_file_path": "models/demo_examples/my_second_model.sql",
      "name": "my_second_model",
      "alias": "my_second_model",
      "checksum": {
        "name": "sha256",
        "checksum": "98dac9267a4af4c67c8d8a9a96930745764aa83dd8376df1d084f119e0fec0b7"
      },
      "tags": [],
      "refs": [["my_first_model"]],
      "sources": [],
      "metrics": [],
      "description": "",
      "columns": {},
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "compiled_path": null,
      "build_path": null,
      "deferred": false,
      "unrendered_config": {},
      "created_at": 1665426351.066562
    },
    "model.tpch.json_parse_example": {
      "resource_type": "model",
      "depends_on": { "macros": [], "nodes": ["seed.tpch.json_example"] },
      "config": {
        "enabled": true,
        "alias": null,
        "schema": null,
        "database": null,
        "tags": [],
        "meta": {},
        "materialized": "view",
        "incremental_strategy": null,
        "persist_docs": {},
        "quoting": {},
        "column_types": {},
        "full_refresh": null,
        "unique_key": null,
        "on_schema_change": "ignore",
        "grants": {},
        "packages": [],
        "docs": { "show": true, "node_color": null },
        "post-hook": [],
        "pre-hook": []
      },
      "database": "ANALYTICS",
      "schema": "dbt_sung",
      "fqn": ["tpch", "demo_examples", "json_parse_example"],
      "unique_id": "model.tpch.json_parse_example",
      "raw_code": "--snowflake functionality to demo how SQL can be used to parse json in a single column \n\nwith json_example as (\nselect * from {{ref('json_example')}}\n),\n\n--use the snowflake parse_json() function\njson_to_parse as (\n  select parse_json(column_1) as json_to_parse_column\n  from json_example\n),\n\n--extract the key value pairs into columns\njson_parsed as (\nselect json_to_parse_column:product::string as product,\njson_to_parse_column:order_date::string as order_date,\njson_to_parse_column:price::float as price\nfrom json_to_parse\n),\n\n--convert data types\nfinal as (\n  select product, \n  TO_DATE(order_date,'MM-DD-YYYY') as order_date,\n  price\n  from json_parsed\n)\n\nselect * from final",
      "language": "sql",
      "package_name": "tpch",
      "root_path": "/Users/sung/Desktop/dbt/dbt_env",
      "path": "demo_examples/json_parse_example.sql",
      "original_file_path": "models/demo_examples/json_parse_example.sql",
      "name": "json_parse_example",
      "alias": "json_parse_example",
      "checksum": {
        "name": "sha256",
        "checksum": "ac1abd776d5f46f4f42be412877f33c2a8da155fb64990abfbcea9dda9a7fff3"
      },
      "tags": [],
      "refs": [["json_example"]],
      "sources": [],
      "metrics": [],
      "description": "",
      "columns": {},
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "compiled_path": null,
      "build_path": null,
      "deferred": false,
      "unrendered_config": {},
      "created_at": 1665426351.0701172
    },
    "model.tpch.materialization_incremental": {
      "resource_type": "model",
      "depends_on": {
        "macros": ["macro.dbt.is_incremental"],
        "nodes": ["source.tpch.tpch_test.customer"]
      },
      "config": {
        "enabled": true,
        "alias": null,
        "schema": null,
        "database": null,
        "tags": [],
        "meta": {},
        "materialized": "incremental",
        "incremental_strategy": null,
        "persist_docs": {},
        "quoting": {},
        "column_types": {},
        "full_refresh": null,
        "unique_key": null,
        "on_schema_change": "ignore",
        "grants": {},
        "packages": [],
        "docs": { "show": true, "node_color": null },
        "post-hook": [],
        "pre-hook": []
      },
      "database": "ANALYTICS",
      "schema": "dbt_sung",
      "fqn": ["tpch", "demo_examples", "materialization_incremental"],
      "unique_id": "model.tpch.materialization_incremental",
      "raw_code": "{{ config(materialized='incremental') }}\n\nwith source as (\n\n    select * from {{ source('tpch_test', 'customer') }}\n\n),\n\n\nrenamed as (\n\n    select\n        c_custkey as customer_key,\n        c_name as name,\n        c_address as address, \n        c_nationkey as nation_key,\n        c_phone as phone_number,\n        c_acctbal as account_balance,\n        c_mktsegment as market_segment,\n        c_comment as comment\n\n    from source\n\n)\n\nselect * from renamed\n\n{% if is_incremental() %}\n  -- this filter will only be applied on an incremental run\n  where customer_key not in (select customer_key from {{this}} )\n\n{% endif %}",
      "language": "sql",
      "package_name": "tpch",
      "root_path": "/Users/sung/Desktop/dbt/dbt_env",
      "path": "demo_examples/materialization_incremental.sql",
      "original_file_path": "models/demo_examples/materialization_incremental.sql",
      "name": "materialization_incremental",
      "alias": "materialization_incremental",
      "checksum": {
        "name": "sha256",
        "checksum": "a6c88d8bd8b6f938487965a357514814693e0796bbdc657dc3704e0261cd9920"
      },
      "tags": [],
      "refs": [],
      "sources": [["tpch_test", "customer"]],
      "metrics": [],
      "description": "demo to show incremental model",
      "columns": {
        "customer_key": {
          "name": "customer_key",
          "description": "",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        }
      },
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": "tpch://models/demo_examples/demo_examples.yml",
      "compiled_path": null,
      "build_path": null,
      "deferred": false,
      "unrendered_config": { "materialized": "incremental" },
      "created_at": 1665426351.737568
    },
    "analysis.tpch.select_from_orders_example": {
      "resource_type": "analysis",
      "depends_on": {
        "macros": ["macro.tpch.standard_account_fields"],
        "nodes": ["model.tpch.fct_orders"]
      },
      "config": {
        "enabled": true,
        "alias": null,
        "schema": null,
        "database": null,
        "tags": [],
        "meta": {},
        "materialized": "view",
        "incremental_strategy": null,
        "persist_docs": {},
        "quoting": {},
        "column_types": {},
        "full_refresh": null,
        "unique_key": null,
        "on_schema_change": "ignore",
        "grants": {},
        "packages": [],
        "docs": { "show": true, "node_color": null },
        "post-hook": [],
        "pre-hook": []
      },
      "database": "ANALYTICS",
      "schema": "dbt_sung",
      "fqn": ["tpch", "analysis", "select_from_orders_example"],
      "unique_id": "analysis.tpch.select_from_orders_example",
      "raw_code": "SELECT order_key, \n       order_date, \n       {{ standard_account_fields() }} \nFROM {{ ref('fct_orders') }}",
      "language": "sql",
      "package_name": "tpch",
      "root_path": "/Users/sung/Desktop/dbt/dbt_env",
      "path": "analysis/select_from_orders_example.sql",
      "original_file_path": "analysis/select_from_orders_example.sql",
      "name": "select_from_orders_example",
      "alias": "select_from_orders_example",
      "checksum": {
        "name": "sha256",
        "checksum": "2449c7b6591e3bf0b1251134ee167eaeb3fa5b71e6ede64bc23d7a023a2da04e"
      },
      "tags": [],
      "refs": [["fct_orders"]],
      "sources": [],
      "metrics": [],
      "description": "",
      "columns": {},
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "compiled_path": null,
      "build_path": null,
      "deferred": false,
      "unrendered_config": {},
      "created_at": 1665426351.0999339
    },
    "test.tpch.macro_stg_tpch_orders_assert_pos_price": {
      "resource_type": "test",
      "depends_on": {
        "macros": ["macro.tpch.test_all_values_gte_zero"],
        "nodes": ["model.tpch.stg_tpch_orders"]
      },
      "config": {
        "enabled": true,
        "alias": null,
        "schema": "dbt_test__audit",
        "database": null,
        "tags": ["finance"],
        "meta": {},
        "materialized": "test",
        "severity": "error",
        "store_failures": null,
        "where": null,
        "limit": null,
        "fail_calc": "count(*)",
        "warn_if": "!= 0",
        "error_if": "!= 0"
      },
      "database": "ANALYTICS",
      "schema": "dbt_sung_dbt_test__audit",
      "fqn": ["tpch", "macro_stg_tpch_orders_assert_pos_price"],
      "unique_id": "test.tpch.macro_stg_tpch_orders_assert_pos_price",
      "raw_code": "{{\n    config(\n        enabled=true,\n        severity='error',\n        tags = ['finance']\n    )\n}}\n\n\n{{ test_all_values_gte_zero('stg_tpch_orders', 'total_price') }}",
      "language": "sql",
      "package_name": "tpch",
      "root_path": "/Users/sung/Desktop/dbt/dbt_env",
      "path": "macro_stg_tpch_orders_assert_pos_price.sql",
      "original_file_path": "tests/macro_stg_tpch_orders_assert_pos_price.sql",
      "name": "macro_stg_tpch_orders_assert_pos_price",
      "alias": "macro_stg_tpch_orders_assert_pos_price",
      "checksum": {
        "name": "sha256",
        "checksum": "bd383c3dbfe817a0fc1b18fa7431a8d3da0e4b53802e70a10f6c8461bbe89e79"
      },
      "tags": ["finance"],
      "refs": [["stg_tpch_orders"]],
      "sources": [],
      "metrics": [],
      "description": "",
      "columns": {},
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "compiled_path": null,
      "build_path": null,
      "deferred": false,
      "unrendered_config": {
        "enabled": true,
        "severity": "error",
        "tags": ["finance"]
      },
      "created_at": 1665426351.1659489
    },
    "test.tpch.stg_tpch_orders_assert_positive_price": {
      "resource_type": "test",
      "depends_on": { "macros": [], "nodes": ["model.tpch.stg_tpch_orders"] },
      "config": {
        "enabled": true,
        "alias": null,
        "schema": "dbt_test__audit",
        "database": null,
        "tags": ["finance"],
        "meta": {},
        "materialized": "test",
        "severity": "error",
        "store_failures": null,
        "where": null,
        "limit": null,
        "fail_calc": "count(*)",
        "warn_if": "!= 0",
        "error_if": "!= 0"
      },
      "database": "ANALYTICS",
      "schema": "dbt_sung_dbt_test__audit",
      "fqn": ["tpch", "stg_tpch_orders_assert_positive_price"],
      "unique_id": "test.tpch.stg_tpch_orders_assert_positive_price",
      "raw_code": "{{\n    config(\n        enabled=true,\n        severity='error',\n        tags = ['finance']\n    )\n}}\n\nwith orders as ( select * from {{ ref('stg_tpch_orders') }} )\n\nselect *\nfrom   orders \nwhere  total_price < 0",
      "language": "sql",
      "package_name": "tpch",
      "root_path": "/Users/sung/Desktop/dbt/dbt_env",
      "path": "stg_tpch_orders_assert_positive_price.sql",
      "original_file_path": "tests/stg_tpch_orders_assert_positive_price.sql",
      "name": "stg_tpch_orders_assert_positive_price",
      "alias": "stg_tpch_orders_assert_positive_price",
      "checksum": {
        "name": "sha256",
        "checksum": "8053b8720b4b33690bebc56cb881005b949ee16023e351a1bc962529f18fe038"
      },
      "tags": ["finance"],
      "refs": [["stg_tpch_orders"]],
      "sources": [],
      "metrics": [],
      "description": "",
      "columns": {},
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "compiled_path": null,
      "build_path": null,
      "deferred": false,
      "unrendered_config": {
        "enabled": true,
        "severity": "error",
        "tags": ["finance"]
      },
      "created_at": 1665426351.173882
    },
    "test.tpch.macro_stg_tphc_suppliers_assert_pos_acct_bal": {
      "resource_type": "test",
      "depends_on": {
        "macros": ["macro.tpch.test_all_values_gte_zero"],
        "nodes": ["model.tpch.stg_tpch_suppliers"]
      },
      "config": {
        "enabled": true,
        "alias": null,
        "schema": "dbt_test__audit",
        "database": null,
        "tags": ["finance"],
        "meta": {},
        "materialized": "test",
        "severity": "error",
        "store_failures": null,
        "where": null,
        "limit": null,
        "fail_calc": "count(*)",
        "warn_if": "!= 0",
        "error_if": "!= 0"
      },
      "database": "ANALYTICS",
      "schema": "dbt_sung_dbt_test__audit",
      "fqn": ["tpch", "macro_stg_tphc_suppliers_assert_pos_acct_bal"],
      "unique_id": "test.tpch.macro_stg_tphc_suppliers_assert_pos_acct_bal",
      "raw_code": "{{\n    config(\n        enabled=true,\n        severity='error',\n        tags = ['finance']\n    )\n}}\n\n\n{{ test_all_values_gte_zero('stg_tpch_suppliers', 'account_balance') }}",
      "language": "sql",
      "package_name": "tpch",
      "root_path": "/Users/sung/Desktop/dbt/dbt_env",
      "path": "macro_stg_tphc_suppliers_assert_pos_acct_bal.sql",
      "original_file_path": "tests/macro_stg_tphc_suppliers_assert_pos_acct_bal.sql",
      "name": "macro_stg_tphc_suppliers_assert_pos_acct_bal",
      "alias": "macro_stg_tphc_suppliers_assert_pos_acct_bal",
      "checksum": {
        "name": "sha256",
        "checksum": "491aef170fc9d2bf15a1270f552d4a9690b094930adb723ade7b3964391fecde"
      },
      "tags": ["finance"],
      "refs": [["stg_tpch_suppliers"]],
      "sources": [],
      "metrics": [],
      "description": "",
      "columns": {},
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "compiled_path": null,
      "build_path": null,
      "deferred": false,
      "unrendered_config": {
        "enabled": true,
        "severity": "error",
        "tags": ["finance"]
      },
      "created_at": 1665426351.180458
    },
    "seed.tpch.json_example": {
      "resource_type": "seed",
      "depends_on": { "macros": [], "nodes": [] },
      "config": {
        "enabled": true,
        "alias": null,
        "schema": null,
        "database": null,
        "tags": [],
        "meta": {},
        "materialized": "seed",
        "incremental_strategy": null,
        "persist_docs": {},
        "quoting": {},
        "column_types": {},
        "full_refresh": null,
        "unique_key": null,
        "on_schema_change": "ignore",
        "grants": {},
        "packages": [],
        "docs": { "show": true, "node_color": null },
        "quote_columns": null,
        "post-hook": [],
        "pre-hook": []
      },
      "database": "ANALYTICS",
      "schema": "dbt_sung",
      "fqn": ["tpch", "json_example"],
      "unique_id": "seed.tpch.json_example",
      "raw_code": "",
      "language": "sql",
      "package_name": "tpch",
      "root_path": "/Users/sung/Desktop/dbt/dbt_env",
      "path": "json_example.csv",
      "original_file_path": "data/json_example.csv",
      "name": "json_example",
      "alias": "json_example",
      "checksum": {
        "name": "sha256",
        "checksum": "447c52c13cef41ab7dc8a2a7b468d1113dc990c22a53713060873efc203914ff"
      },
      "tags": [],
      "refs": [],
      "sources": [],
      "metrics": [],
      "description": "",
      "columns": {},
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "compiled_path": null,
      "build_path": null,
      "deferred": false,
      "unrendered_config": {},
      "created_at": 1665426351.202322
    },
    "seed.tpch.snowflake_contract_rates": {
      "resource_type": "seed",
      "depends_on": { "macros": [], "nodes": [] },
      "config": {
        "enabled": true,
        "alias": null,
        "schema": null,
        "database": null,
        "tags": [],
        "meta": {},
        "materialized": "seed",
        "incremental_strategy": null,
        "persist_docs": {},
        "quoting": {},
        "column_types": { "effective_date": "DATE", "rate": "NUMBER" },
        "full_refresh": null,
        "unique_key": null,
        "on_schema_change": "ignore",
        "grants": {},
        "packages": [],
        "docs": { "show": true, "node_color": null },
        "quote_columns": null,
        "post-hook": [],
        "pre-hook": []
      },
      "database": "ANALYTICS",
      "schema": "dbt_sung",
      "fqn": ["tpch", "snowflake_contract_rates"],
      "unique_id": "seed.tpch.snowflake_contract_rates",
      "raw_code": "",
      "language": "sql",
      "package_name": "tpch",
      "root_path": "/Users/sung/Desktop/dbt/dbt_env",
      "path": "snowflake_contract_rates.csv",
      "original_file_path": "data/snowflake_contract_rates.csv",
      "name": "snowflake_contract_rates",
      "alias": "snowflake_contract_rates",
      "checksum": {
        "name": "sha256",
        "checksum": "c6e1cea47545026b5501e22bf1f8756ddc4d1b8456ef90575f3b2aa8e47e1e5d"
      },
      "tags": [],
      "refs": [],
      "sources": [],
      "metrics": [],
      "description": "This is an example of a seed. Seeds are CSV files in your dbt project (typically in your data directory), that dbt can load into your data warehouse using the dbt seed command.\n",
      "columns": {
        "effective_date": {
          "name": "effective_date",
          "description": "effective date of contract",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "rate": {
          "name": "rate",
          "description": "rate based on the effective date",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        }
      },
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": "tpch://data/data.yml",
      "compiled_path": null,
      "build_path": null,
      "deferred": false,
      "unrendered_config": {
        "column_types": { "effective_date": "DATE", "rate": "NUMBER" }
      },
      "created_at": 1665426351.7528021
    },
    "operation.tpch.tpch-on-run-start-0": {
      "resource_type": "operation",
      "depends_on": { "macros": [], "nodes": [] },
      "config": {
        "enabled": true,
        "alias": null,
        "schema": null,
        "database": null,
        "tags": [],
        "meta": {},
        "materialized": "view",
        "incremental_strategy": null,
        "persist_docs": {},
        "quoting": {},
        "column_types": {},
        "full_refresh": null,
        "unique_key": null,
        "on_schema_change": "ignore",
        "grants": {},
        "packages": [],
        "docs": { "show": true, "node_color": null },
        "post-hook": [],
        "pre-hook": []
      },
      "database": "ANALYTICS",
      "schema": "dbt_sung",
      "fqn": ["tpch", "hooks", "tpch-on-run-start-0"],
      "unique_id": "operation.tpch.tpch-on-run-start-0",
      "raw_code": "alter warehouse transforming set warehouse_size=small;",
      "language": "sql",
      "package_name": "tpch",
      "root_path": "/Users/sung/Desktop/dbt/dbt_env",
      "path": "hooks/tpch-on-run-start-0.sql",
      "original_file_path": "./dbt_project.yml",
      "name": "tpch-on-run-start-0",
      "alias": "tpch-on-run-start-0",
      "checksum": {
        "name": "sha256",
        "checksum": "70a37a2c2f9f9fbceec983d27d6f01f8e40d695b827e3aa24f229a282160845f"
      },
      "tags": ["on-run-start"],
      "refs": [],
      "sources": [],
      "metrics": [],
      "description": "",
      "columns": {},
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "compiled_path": null,
      "build_path": null,
      "deferred": false,
      "unrendered_config": {},
      "created_at": 1665426351.22265,
      "index": 0
    },
    "operation.tpch.tpch-on-run-start-1": {
      "resource_type": "operation",
      "depends_on": { "macros": ["macro.tpch.create_udfs"], "nodes": [] },
      "config": {
        "enabled": true,
        "alias": null,
        "schema": null,
        "database": null,
        "tags": [],
        "meta": {},
        "materialized": "view",
        "incremental_strategy": null,
        "persist_docs": {},
        "quoting": {},
        "column_types": {},
        "full_refresh": null,
        "unique_key": null,
        "on_schema_change": "ignore",
        "grants": {},
        "packages": [],
        "docs": { "show": true, "node_color": null },
        "post-hook": [],
        "pre-hook": []
      },
      "database": "ANALYTICS",
      "schema": "dbt_sung",
      "fqn": ["tpch", "hooks", "tpch-on-run-start-1"],
      "unique_id": "operation.tpch.tpch-on-run-start-1",
      "raw_code": "{{create_udfs()}}",
      "language": "sql",
      "package_name": "tpch",
      "root_path": "/Users/sung/Desktop/dbt/dbt_env",
      "path": "hooks/tpch-on-run-start-1.sql",
      "original_file_path": "./dbt_project.yml",
      "name": "tpch-on-run-start-1",
      "alias": "tpch-on-run-start-1",
      "checksum": {
        "name": "sha256",
        "checksum": "70a37a2c2f9f9fbceec983d27d6f01f8e40d695b827e3aa24f229a282160845f"
      },
      "tags": ["on-run-start"],
      "refs": [],
      "sources": [],
      "metrics": [],
      "description": "",
      "columns": {},
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "compiled_path": null,
      "build_path": null,
      "deferred": false,
      "unrendered_config": {},
      "created_at": 1665426351.228,
      "index": 1
    },
    "operation.tpch.tpch-on-run-end-0": {
      "resource_type": "operation",
      "depends_on": { "macros": [], "nodes": [] },
      "config": {
        "enabled": true,
        "alias": null,
        "schema": null,
        "database": null,
        "tags": [],
        "meta": {},
        "materialized": "view",
        "incremental_strategy": null,
        "persist_docs": {},
        "quoting": {},
        "column_types": {},
        "full_refresh": null,
        "unique_key": null,
        "on_schema_change": "ignore",
        "grants": {},
        "packages": [],
        "docs": { "show": true, "node_color": null },
        "post-hook": [],
        "pre-hook": []
      },
      "database": "ANALYTICS",
      "schema": "dbt_sung",
      "fqn": ["tpch", "hooks", "tpch-on-run-end-0"],
      "unique_id": "operation.tpch.tpch-on-run-end-0",
      "raw_code": "alter warehouse transforming set warehouse_size=xsmall;",
      "language": "sql",
      "package_name": "tpch",
      "root_path": "/Users/sung/Desktop/dbt/dbt_env",
      "path": "hooks/tpch-on-run-end-0.sql",
      "original_file_path": "./dbt_project.yml",
      "name": "tpch-on-run-end-0",
      "alias": "tpch-on-run-end-0",
      "checksum": {
        "name": "sha256",
        "checksum": "70a37a2c2f9f9fbceec983d27d6f01f8e40d695b827e3aa24f229a282160845f"
      },
      "tags": ["on-run-end"],
      "refs": [],
      "sources": [],
      "metrics": [],
      "description": "",
      "columns": {},
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "compiled_path": null,
      "build_path": null,
      "deferred": false,
      "unrendered_config": {},
      "created_at": 1665426351.2387,
      "index": 0
    },
    "operation.tpch.tpch-on-run-end-1": {
      "resource_type": "operation",
      "depends_on": {
        "macros": ["macro.tpch.grant_all_on_schemas"],
        "nodes": []
      },
      "config": {
        "enabled": true,
        "alias": null,
        "schema": null,
        "database": null,
        "tags": [],
        "meta": {},
        "materialized": "view",
        "incremental_strategy": null,
        "persist_docs": {},
        "quoting": {},
        "column_types": {},
        "full_refresh": null,
        "unique_key": null,
        "on_schema_change": "ignore",
        "grants": {},
        "packages": [],
        "docs": { "show": true, "node_color": null },
        "post-hook": [],
        "pre-hook": []
      },
      "database": "ANALYTICS",
      "schema": "dbt_sung",
      "fqn": ["tpch", "hooks", "tpch-on-run-end-1"],
      "unique_id": "operation.tpch.tpch-on-run-end-1",
      "raw_code": "{{ grant_all_on_schemas(schemas, 'transformer') }}",
      "language": "sql",
      "package_name": "tpch",
      "root_path": "/Users/sung/Desktop/dbt/dbt_env",
      "path": "hooks/tpch-on-run-end-1.sql",
      "original_file_path": "./dbt_project.yml",
      "name": "tpch-on-run-end-1",
      "alias": "tpch-on-run-end-1",
      "checksum": {
        "name": "sha256",
        "checksum": "70a37a2c2f9f9fbceec983d27d6f01f8e40d695b827e3aa24f229a282160845f"
      },
      "tags": ["on-run-end"],
      "refs": [],
      "sources": [],
      "metrics": [],
      "description": "",
      "columns": {},
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "compiled_path": null,
      "build_path": null,
      "deferred": false,
      "unrendered_config": {},
      "created_at": 1665426351.2444859,
      "index": 1
    },
    "model.dbt_artifacts.fct_dbt__latest_full_model_executions": {
      "resource_type": "model",
      "depends_on": {
        "macros": [],
        "nodes": [
          "model.dbt_artifacts.fct_dbt__run_results",
          "model.dbt_artifacts.fct_dbt__model_executions"
        ]
      },
      "config": {
        "enabled": true,
        "alias": null,
        "schema": "dbt_artifacts_sung",
        "database": null,
        "tags": [],
        "meta": {},
        "materialized": "table",
        "incremental_strategy": null,
        "persist_docs": {},
        "quoting": {},
        "column_types": {},
        "full_refresh": null,
        "unique_key": null,
        "on_schema_change": "ignore",
        "grants": {},
        "packages": [],
        "docs": { "show": false, "node_color": null },
        "post-hook": [],
        "pre-hook": []
      },
      "database": "ANALYTICS",
      "schema": "dbt_sung_dbt_artifacts_sung",
      "fqn": ["dbt_artifacts", "fct_dbt__latest_full_model_executions"],
      "unique_id": "model.dbt_artifacts.fct_dbt__latest_full_model_executions",
      "raw_code": "with run_results as (\n\n    select *\n    from {{ ref('fct_dbt__run_results') }}\n\n),\n\nmodel_executions as (\n\n    select *\n    from {{ ref('fct_dbt__model_executions') }}\n\n),\n\nlatest_full as (\n\n    select *\n    from run_results\n    where selected_models is null and was_full_refresh = false\n    order by artifact_generated_at desc\n    limit 1\n\n),\n\njoined as (\n\n    select\n        model_executions.*\n    from latest_full\n    left join model_executions on\n        model_executions.command_invocation_id = latest_full.command_invocation_id\n        or model_executions.dbt_cloud_run_id = latest_full.dbt_cloud_run_id\n\n),\n\nfields as (\n\n    select\n        artifact_generated_at,\n        command_invocation_id,\n        dbt_cloud_run_id,\n        compile_started_at,\n        query_completed_at,\n        total_node_runtime,\n        model_execution_id,\n        model_materialization,\n        model_schema,\n        name,\n        node_id,\n        thread_id,\n        rows_affected,\n        status,\n        was_full_refresh\n    from joined\n\n)\n\nselect * from fields",
      "language": "sql",
      "package_name": "dbt_artifacts",
      "root_path": "/Users/sung/Desktop/dbt/dbt_env/dbt_packages/dbt_artifacts",
      "path": "fct_dbt__latest_full_model_executions.sql",
      "original_file_path": "models/fct_dbt__latest_full_model_executions.sql",
      "name": "fct_dbt__latest_full_model_executions",
      "alias": "fct_dbt__latest_full_model_executions",
      "checksum": {
        "name": "sha256",
        "checksum": "1db7cc8b413fc690d2f4fb6f692ed836551f4288c2fbc454ec7c710d3d6f864e"
      },
      "tags": [],
      "refs": [["fct_dbt__run_results"], ["fct_dbt__model_executions"]],
      "sources": [],
      "metrics": [],
      "description": "A list of all models and executions times from the most recent, incremental run.",
      "columns": {
        "node_id": {
          "name": "node_id",
          "description": "Primary key.",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "artifact_generated_at": {
          "name": "artifact_generated_at",
          "description": "Timestamp of when the source artifact was generated.",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "command_invocation_id": {
          "name": "command_invocation_id",
          "description": "Foreign key to fct_dbt_run_results. The id of the command which resulted in the source artifact's generation.",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "compile_started_at": {
          "name": "compile_started_at",
          "description": "Timestamp of when a model starts to be compiled.",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "query_completed_at": {
          "name": "query_completed_at",
          "description": "Timestamp of when a model's SQL is completed",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "total_node_runtime": {
          "name": "total_node_runtime",
          "description": "The duration of time in seconds for the model to run. Note that this is _not_ equal to the delta between `compile_started_at` and `query_completed_at` since it includes extra tasks performed by dbt.",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "model_execution_id": {
          "name": "model_execution_id",
          "description": "A surrogate key of command_invocation_id and node_id.",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "model_materialization": {
          "name": "model_materialization",
          "description": "",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "model_schema": {
          "name": "model_schema",
          "description": "",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "name": {
          "name": "name",
          "description": "The model name.",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "rows_affected": {
          "name": "rows_affected",
          "description": "The number of rows affected by the model's execution. Always 1 for non-incremental executions.",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "status": {
          "name": "status",
          "description": "Success/fail status of the model's execution.",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "was_full_refresh": {
          "name": "was_full_refresh",
          "description": "Boolean value for whether this model was executed with a --full-refresh flag.",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        }
      },
      "meta": {},
      "docs": { "show": false, "node_color": null },
      "patch_path": "dbt_artifacts://models/schemas.yml",
      "compiled_path": null,
      "build_path": null,
      "deferred": false,
      "unrendered_config": {
        "materialized": "table",
        "docs": { "show": false },
        "schema": "dbt_artifacts_sung"
      },
      "created_at": 1665426351.7950652
    },
    "model.dbt_artifacts.fct_dbt__exposures_updates": {
      "resource_type": "model",
      "depends_on": {
        "macros": [],
        "nodes": [
          "model.dbt_artifacts.fct_dbt__model_executions",
          "model.dbt_artifacts.dim_dbt__exposures"
        ]
      },
      "config": {
        "enabled": true,
        "alias": null,
        "schema": "dbt_artifacts_sung",
        "database": null,
        "tags": [],
        "meta": {},
        "materialized": "table",
        "incremental_strategy": null,
        "persist_docs": {},
        "quoting": {},
        "column_types": {},
        "full_refresh": null,
        "unique_key": null,
        "on_schema_change": "ignore",
        "grants": {},
        "packages": [],
        "docs": { "show": false, "node_color": null },
        "post-hook": [],
        "pre-hook": []
      },
      "database": "ANALYTICS",
      "schema": "dbt_sung_dbt_artifacts_sung",
      "fqn": ["dbt_artifacts", "fct_dbt__exposures_updates"],
      "unique_id": "model.dbt_artifacts.fct_dbt__exposures_updates",
      "raw_code": "with model_executions as (\n\n    select * from {{ ref('fct_dbt__model_executions') }}\n\n),\n\nexposures_record as (\n\n    select * from {{ ref('dim_dbt__exposures') }}\n\n),\n\n\nmodel_updates as (\n\n    select \n        max(query_completed_at) as latest_update,\n        node_id\n    from model_executions\n    group by node_id\n\n),\n\nexposures_latest as (\n\n    select\n        artifact_generated_at as latest_generation,\n        node_id,\n        name,\n        type,\n        owner,\n        maturity,\n        package_name,\n        output_feeds\n    from exposures_record\n    where artifact_generated_at = (select max(artifact_generated_at) from exposures_record)\n\n),\n\nexposures_updates as (\n\n    select \n        e.latest_generation,\n        e.node_id,\n        e.name, \n        e.type,\n        e.owner,\n        e.maturity,\n        e.package_name,\n        e.output_feeds,\n        latest_update as feed_latest_update\n    from exposures_latest e\n    left join model_updates m\n      on m.node_id = e.output_feeds\n\n)\n\nselect * from exposures_updates",
      "language": "sql",
      "package_name": "dbt_artifacts",
      "root_path": "/Users/sung/Desktop/dbt/dbt_env/dbt_packages/dbt_artifacts",
      "path": "fct_dbt__exposures_updates.sql",
      "original_file_path": "models/fct_dbt__exposures_updates.sql",
      "name": "fct_dbt__exposures_updates",
      "alias": "fct_dbt__exposures_updates",
      "checksum": {
        "name": "sha256",
        "checksum": "4576e81b8cbe4aed9e61109289fd3a38543a61c05db20c8b9cb78696d56628c6"
      },
      "tags": [],
      "refs": [["fct_dbt__model_executions"], ["dim_dbt__exposures"]],
      "sources": [],
      "metrics": [],
      "description": "A table of exposures and models feeding them. Latest update time for each models is provided.",
      "columns": {
        "latest_generation": {
          "name": "latest_generation",
          "description": "Timestamp of when the source artifact was generated.",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "node_id": {
          "name": "node_id",
          "description": "Unique id for the node, in the form of exposure.[package_name].[exposure_name]",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "name": {
          "name": "name",
          "description": "User-defined name of the exposure.",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "type": {
          "name": "type",
          "description": "User-defined type of the exposure.",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "owner": {
          "name": "owner",
          "description": "User-defined owner of the exposure.",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "maturity": {
          "name": "maturity",
          "description": "User-defined name of the exposure.",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "package_name": {
          "name": "package_name",
          "description": "Source package in which each feed of an exposure was defined.",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "output_feeds": {
          "name": "output_feeds",
          "description": "Unique id for each feed of an exposure, in the form of model.[package_name].[model_name]",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "feed_latest_update": {
          "name": "feed_latest_update",
          "description": "Timestamp of the latest update of each feed of an exposure.",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        }
      },
      "meta": {},
      "docs": { "show": false, "node_color": null },
      "patch_path": "dbt_artifacts://models/schemas.yml",
      "compiled_path": null,
      "build_path": null,
      "deferred": false,
      "unrendered_config": {
        "materialized": "table",
        "docs": { "show": false },
        "schema": "dbt_artifacts_sung"
      },
      "created_at": 1665426351.786806
    },
    "model.dbt_artifacts.fct_dbt__critical_path": {
      "resource_type": "model",
      "depends_on": {
        "macros": [],
        "nodes": [
          "model.dbt_artifacts.stg_dbt__models",
          "model.dbt_artifacts.fct_dbt__latest_full_model_executions"
        ]
      },
      "config": {
        "enabled": true,
        "alias": null,
        "schema": "dbt_artifacts_sung",
        "database": null,
        "tags": [],
        "meta": {},
        "materialized": "table",
        "incremental_strategy": null,
        "persist_docs": {},
        "quoting": {},
        "column_types": {},
        "full_refresh": null,
        "unique_key": null,
        "on_schema_change": "ignore",
        "grants": {},
        "packages": [],
        "docs": { "show": false, "node_color": null },
        "post-hook": [],
        "pre-hook": []
      },
      "database": "ANALYTICS",
      "schema": "dbt_sung_dbt_artifacts_sung",
      "fqn": ["dbt_artifacts", "fct_dbt__critical_path"],
      "unique_id": "model.dbt_artifacts.fct_dbt__critical_path",
      "raw_code": "with models as (\n\n    select *\n    from {{ ref('stg_dbt__models') }}\n\n),\n\nlatest_executions as (\n\n    select *\n    from {{ ref('fct_dbt__latest_full_model_executions') }}\n\n),\n\nlatest_id as (\n    -- Find the latest full, incremental execution\n\n    select\n        any_value(command_invocation_id) as command_invocation_id,\n        any_value(dbt_cloud_run_id) as dbt_cloud_run_id\n    from latest_executions\n\n),\n\nlatest_models as (\n    -- Get the latest set of models for the above execution\n\n    select\n        models.node_id,\n        models.depends_on_nodes,\n        models.model_materialization\n    from latest_id\n    left join models on\n        latest_id.command_invocation_id = models.command_invocation_id\n        or latest_id.dbt_cloud_run_id = models.dbt_cloud_run_id\n\n\n),\n\nnode_dependencies as (\n    -- Create a row for each model and dependency (could be another model, or source)\n\n    select\n        latest_models.node_id,\n        node.value::string as depends_on_node_id,\n        regexp_substr(node.value::string, '^([a-z]+)') as depends_on_node_type\n    from latest_models,\n    lateral flatten(input => latest_models.depends_on_nodes) as node\n\n),\n\nnode_dependencies_deduped as (\n    -- depends_on_nodes is simply a list of all the ref() statements used in a model, so it may contain duplicates\n\n    select distinct\n        node_id,\n        depends_on_node_type,\n        depends_on_node_id\n    from node_dependencies\n\n),\n\nmodel_dependencies_with_total_node_runtime as (\n    -- Model dependencies enriched with execution time\n\n    select distinct\n        node_dependencies_deduped.node_id,\n        latest_executions.total_node_runtime,\n        depends_on_node_id\n    from node_dependencies_deduped\n    left join latest_executions on node_dependencies_deduped.node_id = latest_executions.node_id\n    where depends_on_node_type = 'model'\n\n),\n\nmodels_with_at_least_one_model_dependency as (\n    -- Return a list of model nodes which have at least one model dependency\n\n    select distinct\n        node_id\n    from node_dependencies\n    where depends_on_node_type = 'model'\n\n),\n\nmodels_with_no_model_dependencies_with_total_node_runtime as (\n    -- Models which have no dependencies enriched with execution time\n    -- These are models at the base of the tree\n\n    select\n        latest_models.node_id,\n        latest_executions.total_node_runtime\n    from latest_models\n    left join models_with_at_least_one_model_dependency\n        on latest_models.node_id = models_with_at_least_one_model_dependency.node_id\n    left join latest_executions on latest_models.node_id = latest_executions.node_id\n    where models_with_at_least_one_model_dependency.node_id is null\n\n),\n\nmodels_with_dependent_models as (\n    -- Get a list of all the models which have dependent models\n\n    select distinct depends_on_node_id as node_id\n    from node_dependencies_deduped\n\n),\n\nmodels_with_no_dependent_models as (\n    -- Models which have no dependents\n    -- These are models at the tips of the tree\n\n    select\n        latest_models.node_id\n    from latest_models\n    left join models_with_dependent_models\n    on latest_models.node_id = models_with_dependent_models.node_id\n    where models_with_dependent_models.node_id is null\n\n),\n\nanchor as (\n    -- The anchor of a recursive CTE is the initial query\n    -- The anchor in this case is models which have no dependents, the tips of the tree\n    -- The dependencies for these models are joined in to build out the paths during recursion\n\n    select\n        models_with_no_dependent_models.node_id,\n        coalesce(node_dependencies_deduped.depends_on_node_id, '') as depends_on_node_id,\n        coalesce(latest_executions.total_node_runtime, 0) as total_node_runtime\n    from models_with_no_dependent_models\n    left join node_dependencies_deduped on models_with_no_dependent_models.node_id = node_dependencies_deduped.node_id\n    left join latest_executions on models_with_no_dependent_models.node_id = latest_executions.node_id\n\n),\n\nall_needed_dependencies as (\n    -- Union all the base models with all other dependencies\n    -- Use an empty string for depends_on_node_id to avoid NULL result in a non-nullable column error\n    -- Nothing will join onto the empty string depends_on_node_id, ending the recursion at the base.\n\n    select\n        node_id,\n        total_node_runtime,\n        '' as depends_on_node_id\n    from models_with_no_model_dependencies_with_total_node_runtime\n    union\n    select\n        node_id,\n        total_node_runtime,\n        depends_on_node_id as depends_on_node_id\n    from model_dependencies_with_total_node_runtime\n\n),\n\nsearch_path (node_ids, total_time) as (\n    -- The recursive part\n    -- This CTE creates an array of node_ids and total_time for every possible path through the DAG\n    -- Starting with the tips of the tree, work backwards through every path until there's a '' depends_on_node_id\n\n    select\n        array_construct(depends_on_node_id, node_id),\n        total_node_runtime\n    from anchor\n    union all\n    select\n        array_cat(to_array(all_needed_dependencies.depends_on_node_id), search_path.node_ids) as node_ids,\n        all_needed_dependencies.total_node_runtime + search_path.total_time\n    from search_path\n    left join all_needed_dependencies\n    where get(search_path.node_ids, 0) = all_needed_dependencies.node_id\n\n),\n\nlongest_path_node_ids as (\n    -- Find the path with the longest total time\n\n    select\n        -- Remove any empty strings from the beginning of the array that were introduced in search_path to prevent infinite recursion\n        case\n            when get(node_ids, 0) = ''\n            -- Ensure we keep the last element of the array by using array_size for the last index\n            then array_slice(node_ids, 1, array_size(node_ids))\n            else node_ids\n        end as node_ids,\n        total_time\n    from search_path\n    order by total_time desc\n    limit 1\n\n),\n\nflattened as (\n    -- Flatten the array of node_ids and keep the index\n\n    select\n        value as node_id,\n        index\n    from longest_path_node_ids,\n    lateral flatten (input => node_ids)\n\n),\n\nlongest_path_with_times as (\n    -- Join the indidivual model execution times back in along with the materializations\n\n    select\n        flattened.node_id::string as node_id,\n        flattened.index,\n        latest_executions.total_node_runtime/60 as execution_minutes,\n        latest_models.model_materialization\n    from flattened\n    left join latest_executions on flattened.node_id = latest_executions.node_id\n    left join latest_models on flattened.node_id = latest_models.node_id\n\n)\n\nselect * from longest_path_with_times",
      "language": "sql",
      "package_name": "dbt_artifacts",
      "root_path": "/Users/sung/Desktop/dbt/dbt_env/dbt_packages/dbt_artifacts",
      "path": "fct_dbt__critical_path.sql",
      "original_file_path": "models/fct_dbt__critical_path.sql",
      "name": "fct_dbt__critical_path",
      "alias": "fct_dbt__critical_path",
      "checksum": {
        "name": "sha256",
        "checksum": "26501656a94a65deb9aa2b1820dfc23fbc1cc44ca8de36a60282c1a8cc09931a"
      },
      "tags": [],
      "refs": [["stg_dbt__models"], ["fct_dbt__latest_full_model_executions"]],
      "sources": [],
      "metrics": [],
      "description": "A table of models and executions times that make up the critical path of a full, incremental run.",
      "columns": {
        "node_id": {
          "name": "node_id",
          "description": "Primary key.",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "index": {
          "name": "index",
          "description": "The index of the model in the critical path. Starts at 0.",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "execution_minutes": {
          "name": "execution_minutes",
          "description": "The duration of time in minutes for the model to run.",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "model_materialization": {
          "name": "model_materialization",
          "description": "",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        }
      },
      "meta": {},
      "docs": { "show": false, "node_color": null },
      "patch_path": "dbt_artifacts://models/schemas.yml",
      "compiled_path": null,
      "build_path": null,
      "deferred": false,
      "unrendered_config": {
        "materialized": "table",
        "docs": { "show": false },
        "schema": "dbt_artifacts_sung"
      },
      "created_at": 1665426351.7820249
    },
    "model.dbt_artifacts.stg_dbt__models": {
      "resource_type": "model",
      "depends_on": {
        "macros": ["macro.dbt_utils.surrogate_key"],
        "nodes": ["model.dbt_artifacts.stg_dbt__artifacts"]
      },
      "config": {
        "enabled": true,
        "alias": null,
        "schema": "dbt_artifacts_sung",
        "database": null,
        "tags": [],
        "meta": {},
        "materialized": "view",
        "incremental_strategy": null,
        "persist_docs": {},
        "quoting": {},
        "column_types": {},
        "full_refresh": null,
        "unique_key": null,
        "on_schema_change": "ignore",
        "grants": {},
        "packages": [],
        "docs": { "show": false, "node_color": null },
        "post-hook": [],
        "pre-hook": []
      },
      "database": "ANALYTICS",
      "schema": "dbt_sung_dbt_artifacts_sung",
      "fqn": ["dbt_artifacts", "staging", "stg_dbt__models"],
      "unique_id": "model.dbt_artifacts.stg_dbt__models",
      "raw_code": "with base as (\n\n    select *\n    from {{ ref('stg_dbt__artifacts') }}\n\n),\n\nmanifests as (\n\n    select *\n    from base\n    where artifact_type = 'manifest.json'\n\n),\n\nflatten as (\n\n    select\n        command_invocation_id,\n        dbt_cloud_run_id,\n        generated_at as artifact_generated_at,\n        node.key as node_id,\n        node.value:database::string as model_database,\n        node.value:schema::string as model_schema,\n        node.value:name::string as name,\n        to_array(node.value:depends_on:nodes) as depends_on_nodes,\n        node.value:package_name::string as package_name,\n        node.value:path::string as model_path,\n        node.value:checksum.checksum::string as checksum,\n        node.value:config.materialized::string as model_materialization\n    from manifests,\n    lateral flatten(input => data:nodes) as node\n    where node.value:resource_type = 'model'\n\n),\n\nsurrogate_key as (\n\n    select\n        {{ dbt_utils.surrogate_key(['command_invocation_id', 'node_id']) }} as manifest_model_id,\n        command_invocation_id,\n        dbt_cloud_run_id,\n        artifact_generated_at,\n        node_id,\n        model_database,\n        model_schema,\n        name,\n        depends_on_nodes,\n        package_name,\n        model_path,\n        checksum,\n        model_materialization\n    from flatten\n\n)\n\nselect * from surrogate_key",
      "language": "sql",
      "package_name": "dbt_artifacts",
      "root_path": "/Users/sung/Desktop/dbt/dbt_env/dbt_packages/dbt_artifacts",
      "path": "staging/stg_dbt__models.sql",
      "original_file_path": "models/staging/stg_dbt__models.sql",
      "name": "stg_dbt__models",
      "alias": "stg_dbt__models",
      "checksum": {
        "name": "sha256",
        "checksum": "62f40a8717fbc9c2ff5e961f00b59c8d7bd31ed333f591c69f14272e37205e93"
      },
      "tags": [],
      "refs": [["stg_dbt__artifacts"]],
      "sources": [],
      "metrics": [],
      "description": "",
      "columns": {},
      "meta": {},
      "docs": { "show": false, "node_color": null },
      "patch_path": null,
      "compiled_path": null,
      "build_path": null,
      "deferred": false,
      "unrendered_config": {
        "materialized": "view",
        "docs": { "show": false },
        "schema": "dbt_artifacts_sung"
      },
      "created_at": 1665426351.303912
    },
    "model.dbt_artifacts.stg_dbt__run_results_env_keys": {
      "resource_type": "model",
      "depends_on": {
        "macros": [],
        "nodes": ["model.dbt_artifacts.stg_dbt__artifacts"]
      },
      "config": {
        "enabled": true,
        "alias": null,
        "schema": "dbt_artifacts_sung",
        "database": null,
        "tags": [],
        "meta": {},
        "materialized": "view",
        "incremental_strategy": null,
        "persist_docs": {},
        "quoting": {},
        "column_types": {},
        "full_refresh": null,
        "unique_key": null,
        "on_schema_change": "ignore",
        "grants": {},
        "packages": [],
        "docs": { "show": false, "node_color": null },
        "post-hook": [],
        "pre-hook": []
      },
      "database": "ANALYTICS",
      "schema": "dbt_sung_dbt_artifacts_sung",
      "fqn": ["dbt_artifacts", "staging", "stg_dbt__run_results_env_keys"],
      "unique_id": "model.dbt_artifacts.stg_dbt__run_results_env_keys",
      "raw_code": "with base as (\n\n    select *\n    from {{ ref('stg_dbt__artifacts') }}\n\n),\n\nrun_results as (\n\n    select *\n    from base\n    where artifact_type = 'run_results.json'\n\n),\n\ndbt_run as (\n\n    select *\n    from run_results\n    where data:args:which = 'run'\n\n),\n\nenv_keys as (\n\n    select\n        distinct(env.key)\n    from dbt_run,\n    lateral flatten(input => data:metadata:env) as env\n    -- Sort results to ensure things are deterministic\n    order by 1\n\n)\n\nselect * from env_keys",
      "language": "sql",
      "package_name": "dbt_artifacts",
      "root_path": "/Users/sung/Desktop/dbt/dbt_env/dbt_packages/dbt_artifacts",
      "path": "staging/stg_dbt__run_results_env_keys.sql",
      "original_file_path": "models/staging/stg_dbt__run_results_env_keys.sql",
      "name": "stg_dbt__run_results_env_keys",
      "alias": "stg_dbt__run_results_env_keys",
      "checksum": {
        "name": "sha256",
        "checksum": "fee22d08223cd2536fecb09556ad48b21483e72146b5535812c53ef731603651"
      },
      "tags": [],
      "refs": [["stg_dbt__artifacts"]],
      "sources": [],
      "metrics": [],
      "description": "",
      "columns": {},
      "meta": {},
      "docs": { "show": false, "node_color": null },
      "patch_path": null,
      "compiled_path": null,
      "build_path": null,
      "deferred": false,
      "unrendered_config": {
        "materialized": "view",
        "docs": { "show": false },
        "schema": "dbt_artifacts_sung"
      },
      "created_at": 1665426351.314086
    },
    "model.dbt_artifacts.stg_dbt__exposures": {
      "resource_type": "model",
      "depends_on": {
        "macros": ["macro.dbt_utils.surrogate_key"],
        "nodes": ["model.dbt_artifacts.stg_dbt__artifacts"]
      },
      "config": {
        "enabled": true,
        "alias": null,
        "schema": "dbt_artifacts_sung",
        "database": null,
        "tags": [],
        "meta": {},
        "materialized": "view",
        "incremental_strategy": null,
        "persist_docs": {},
        "quoting": {},
        "column_types": {},
        "full_refresh": null,
        "unique_key": null,
        "on_schema_change": "ignore",
        "grants": {},
        "packages": [],
        "docs": { "show": false, "node_color": null },
        "post-hook": [],
        "pre-hook": []
      },
      "database": "ANALYTICS",
      "schema": "dbt_sung_dbt_artifacts_sung",
      "fqn": ["dbt_artifacts", "staging", "stg_dbt__exposures"],
      "unique_id": "model.dbt_artifacts.stg_dbt__exposures",
      "raw_code": "with base as (\n\n    select *\n    from {{ ref('stg_dbt__artifacts') }}\n\n),\n\nmanifests as (\n\n    select *\n    from base\n    where artifact_type = 'manifest.json'\n\n),\n\nflatten as (\n\n    select\n        command_invocation_id,\n        dbt_cloud_run_id,\n        generated_at as artifact_generated_at,\n        node.key as node_id,\n        node.value:name::string as name,\n        to_array(node.value:depends_on:nodes) as depends_on_nodes,\n        to_array(node.value:sources:nodes) as depends_on_sources,\n        node.value:type::string as type,\n        node.value:owner:name::string as owner,\n        node.value:maturity::string as maturity,\n        node.value:package_name::string as package_name\n    from manifests,\n    lateral flatten(input => data:exposures) as node\n\n),\n\nsurrogate_key as (\n\n    select\n        {{ dbt_utils.surrogate_key(['command_invocation_id', 'node_id']) }} as manifest_model_id,\n        command_invocation_id,\n        dbt_cloud_run_id,\n        artifact_generated_at,\n        node_id,\n        name,\n        depends_on_nodes,\n        depends_on_sources,\n        type,\n        owner,\n        maturity,\n        package_name\n    from flatten\n\n)\n\nselect * from surrogate_key",
      "language": "sql",
      "package_name": "dbt_artifacts",
      "root_path": "/Users/sung/Desktop/dbt/dbt_env/dbt_packages/dbt_artifacts",
      "path": "staging/stg_dbt__exposures.sql",
      "original_file_path": "models/staging/stg_dbt__exposures.sql",
      "name": "stg_dbt__exposures",
      "alias": "stg_dbt__exposures",
      "checksum": {
        "name": "sha256",
        "checksum": "bf35674d9f92eca84841231602eea633efae7555a9cc5057a1555001b1ac14b2"
      },
      "tags": [],
      "refs": [["stg_dbt__artifacts"]],
      "sources": [],
      "metrics": [],
      "description": "",
      "columns": {},
      "meta": {},
      "docs": { "show": false, "node_color": null },
      "patch_path": null,
      "compiled_path": null,
      "build_path": null,
      "deferred": false,
      "unrendered_config": {
        "materialized": "view",
        "docs": { "show": false },
        "schema": "dbt_artifacts_sung"
      },
      "created_at": 1665426351.317288
    },
    "model.dbt_artifacts.stg_dbt__test_executions": {
      "resource_type": "model",
      "depends_on": {
        "macros": ["macro.dbt_utils.surrogate_key"],
        "nodes": ["model.dbt_artifacts.stg_dbt__artifacts"]
      },
      "config": {
        "enabled": true,
        "alias": null,
        "schema": "dbt_artifacts_sung",
        "database": null,
        "tags": [],
        "meta": {},
        "materialized": "view",
        "incremental_strategy": null,
        "persist_docs": {},
        "quoting": {},
        "column_types": {},
        "full_refresh": null,
        "unique_key": null,
        "on_schema_change": "ignore",
        "grants": {},
        "packages": [],
        "docs": { "show": false, "node_color": null },
        "post-hook": [],
        "pre-hook": []
      },
      "database": "ANALYTICS",
      "schema": "dbt_sung_dbt_artifacts_sung",
      "fqn": ["dbt_artifacts", "staging", "stg_dbt__test_executions"],
      "unique_id": "model.dbt_artifacts.stg_dbt__test_executions",
      "raw_code": "with base as (\n\n    select *\n    from {{ ref('stg_dbt__artifacts') }}\n\n),\n\nrun_results as (\n\n    select *\n    from base\n    where artifact_type = 'run_results.json'\n\n),\n\ndbt_run as (\n\n    select *\n    from run_results\n    where data:args:which = 'test'\n\n),\n\nfields as (\n\n    select\n        command_invocation_id,\n        dbt_cloud_run_id,\n        generated_at as artifact_generated_at,\n        coalesce(data:args:full_refresh, 'false')::boolean as was_full_refresh,\n        result.value:unique_id::string as node_id,\n        split(result.value:thread_id::string, '-')[1]::integer as thread_id,\n        result.value:status::string as status,\n        result.value:message::string as message,\n\n        -- The first item in the timing array is the model-level `compile`\n        result.value:timing[0]:started_at::timestamp_ntz as compile_started_at,\n\n        -- The second item in the timing array is `execute`.\n        result.value:timing[1]:completed_at::timestamp_ntz as query_completed_at,\n\n        -- Confusingly, this does not match the delta of the above two timestamps.\n        -- should we calculate it instead?\n        coalesce(result.value:execution_time::float, 0) as total_node_runtime,\n\n        result.value:adapter_response:rows_affected::int as rows_affected\n    from dbt_run,\n    lateral flatten(input => data:results) as result\n\n),\n\nsurrogate_key as (\n\n    select\n        {{ dbt_utils.surrogate_key(['command_invocation_id', 'node_id']) }} as model_execution_id,\n        command_invocation_id,\n        dbt_cloud_run_id,\n        artifact_generated_at,\n        was_full_refresh,\n        node_id,\n        thread_id,\n        status,\n        message,\n        compile_started_at,\n        query_completed_at,\n        total_node_runtime,\n        rows_affected\n    from fields\n\n)\n\nselect * from surrogate_key",
      "language": "sql",
      "package_name": "dbt_artifacts",
      "root_path": "/Users/sung/Desktop/dbt/dbt_env/dbt_packages/dbt_artifacts",
      "path": "staging/stg_dbt__test_executions.sql",
      "original_file_path": "models/staging/stg_dbt__test_executions.sql",
      "name": "stg_dbt__test_executions",
      "alias": "stg_dbt__test_executions",
      "checksum": {
        "name": "sha256",
        "checksum": "9d5a7fdd7416b004e7c160c49cc12024c3f1eb8304c365ec28c21fddc226b992"
      },
      "tags": [],
      "refs": [["stg_dbt__artifacts"]],
      "sources": [],
      "metrics": [],
      "description": "",
      "columns": {},
      "meta": {},
      "docs": { "show": false, "node_color": null },
      "patch_path": null,
      "compiled_path": null,
      "build_path": null,
      "deferred": false,
      "unrendered_config": {
        "materialized": "view",
        "docs": { "show": false },
        "schema": "dbt_artifacts_sung"
      },
      "created_at": 1665426351.326256
    },
    "model.dbt_artifacts.stg_dbt__sources": {
      "resource_type": "model",
      "depends_on": {
        "macros": ["macro.dbt_utils.surrogate_key"],
        "nodes": ["model.dbt_artifacts.stg_dbt__artifacts"]
      },
      "config": {
        "enabled": true,
        "alias": null,
        "schema": "dbt_artifacts_sung",
        "database": null,
        "tags": [],
        "meta": {},
        "materialized": "view",
        "incremental_strategy": null,
        "persist_docs": {},
        "quoting": {},
        "column_types": {},
        "full_refresh": null,
        "unique_key": null,
        "on_schema_change": "ignore",
        "grants": {},
        "packages": [],
        "docs": { "show": false, "node_color": null },
        "post-hook": [],
        "pre-hook": []
      },
      "database": "ANALYTICS",
      "schema": "dbt_sung_dbt_artifacts_sung",
      "fqn": ["dbt_artifacts", "staging", "stg_dbt__sources"],
      "unique_id": "model.dbt_artifacts.stg_dbt__sources",
      "raw_code": "with base as (\n\n    select *\n    from {{ ref('stg_dbt__artifacts') }}\n\n),\n\nmanifests as (\n\n    select *\n    from base\n    where artifact_type = 'manifest.json'\n\n),\n\nflatten as (\n\n    select\n        command_invocation_id,\n        dbt_cloud_run_id,\n        generated_at as artifact_generated_at,\n        node.key as node_id,\n        node.value:name::string as name,\n        node.value:source_name::string as source_name,\n        node.value:schema::string as source_schema,\n        node.value:package_name::string as package_name,\n        node.value:relation_name::string as relation_name,\n        node.value:path::string as source_path\n    from manifests,\n    lateral flatten(input => data:sources) as node\n    where node.value:resource_type = 'source'\n\n),\n\nsurrogate_key as (\n\n    select\n        {{ dbt_utils.surrogate_key(['command_invocation_id', 'node_id']) }} as manifest_source_id,\n        command_invocation_id,\n        dbt_cloud_run_id,\n        artifact_generated_at,\n        node_id,\n        name,\n        source_name,\n        source_schema,\n        package_name,\n        relation_name,\n        source_path\n    from flatten\n\n)\n\nselect * from surrogate_key",
      "language": "sql",
      "package_name": "dbt_artifacts",
      "root_path": "/Users/sung/Desktop/dbt/dbt_env/dbt_packages/dbt_artifacts",
      "path": "staging/stg_dbt__sources.sql",
      "original_file_path": "models/staging/stg_dbt__sources.sql",
      "name": "stg_dbt__sources",
      "alias": "stg_dbt__sources",
      "checksum": {
        "name": "sha256",
        "checksum": "d78cd9140513a7ba667ffd88894295f53dd90986f05637154802c50a1f1bd720"
      },
      "tags": [],
      "refs": [["stg_dbt__artifacts"]],
      "sources": [],
      "metrics": [],
      "description": "",
      "columns": {},
      "meta": {},
      "docs": { "show": false, "node_color": null },
      "patch_path": null,
      "compiled_path": null,
      "build_path": null,
      "deferred": false,
      "unrendered_config": {
        "materialized": "view",
        "docs": { "show": false },
        "schema": "dbt_artifacts_sung"
      },
      "created_at": 1665426351.335882
    },
    "model.dbt_artifacts.stg_dbt__artifacts": {
      "resource_type": "model",
      "depends_on": {
        "macros": [],
        "nodes": ["source.dbt_artifacts.dbt_artifacts.artifacts"]
      },
      "config": {
        "enabled": true,
        "alias": null,
        "schema": "dbt_artifacts_sung",
        "database": null,
        "tags": [],
        "meta": {},
        "materialized": "view",
        "incremental_strategy": null,
        "persist_docs": {},
        "quoting": {},
        "column_types": {},
        "full_refresh": null,
        "unique_key": null,
        "on_schema_change": "ignore",
        "grants": {},
        "packages": [],
        "docs": { "show": false, "node_color": null },
        "post-hook": [],
        "pre-hook": []
      },
      "database": "ANALYTICS",
      "schema": "dbt_sung_dbt_artifacts_sung",
      "fqn": ["dbt_artifacts", "staging", "stg_dbt__artifacts"],
      "unique_id": "model.dbt_artifacts.stg_dbt__artifacts",
      "raw_code": "with base as (\n\n    select *\n    from {{ source('dbt_artifacts', 'artifacts') }}\n\n),\n\nfields as (\n\n    select\n        data:metadata:invocation_id::string as command_invocation_id,\n        data:metadata:env:DBT_CLOUD_RUN_ID::int as dbt_cloud_run_id,\n        generated_at,\n        path,\n        artifact_type,\n        data\n    from base\n\n),\n\ndeduped as (\n\n    select\n        *,\n        row_number() over (\n            partition by command_invocation_id, artifact_type\n            order by generated_at desc\n        ) as index\n    from fields\n    qualify index = 1\n\n),\n\nartifacts as (\n\n    select\n        command_invocation_id,\n        dbt_cloud_run_id,\n        generated_at,\n        path,\n        artifact_type,\n        data\n    from deduped\n\n)\n\nselect * from artifacts",
      "language": "sql",
      "package_name": "dbt_artifacts",
      "root_path": "/Users/sung/Desktop/dbt/dbt_env/dbt_packages/dbt_artifacts",
      "path": "staging/stg_dbt__artifacts.sql",
      "original_file_path": "models/staging/stg_dbt__artifacts.sql",
      "name": "stg_dbt__artifacts",
      "alias": "stg_dbt__artifacts",
      "checksum": {
        "name": "sha256",
        "checksum": "c33590d0b759dcaf3473cf8d59773d541dfe810d253ae31eaacade1c21d80b61"
      },
      "tags": [],
      "refs": [],
      "sources": [["dbt_artifacts", "artifacts"]],
      "metrics": [],
      "description": "",
      "columns": {},
      "meta": {},
      "docs": { "show": false, "node_color": null },
      "patch_path": null,
      "compiled_path": null,
      "build_path": null,
      "deferred": false,
      "unrendered_config": {
        "materialized": "view",
        "docs": { "show": false },
        "schema": "dbt_artifacts_sung"
      },
      "created_at": 1665426351.3454678
    },
    "model.dbt_artifacts.stg_dbt__model_executions": {
      "resource_type": "model",
      "depends_on": {
        "macros": ["macro.dbt_utils.surrogate_key"],
        "nodes": ["model.dbt_artifacts.stg_dbt__artifacts"]
      },
      "config": {
        "enabled": true,
        "alias": null,
        "schema": "dbt_artifacts_sung",
        "database": null,
        "tags": [],
        "meta": {},
        "materialized": "view",
        "incremental_strategy": null,
        "persist_docs": {},
        "quoting": {},
        "column_types": {},
        "full_refresh": null,
        "unique_key": null,
        "on_schema_change": "ignore",
        "grants": {},
        "packages": [],
        "docs": { "show": false, "node_color": null },
        "post-hook": [],
        "pre-hook": []
      },
      "database": "ANALYTICS",
      "schema": "dbt_sung_dbt_artifacts_sung",
      "fqn": ["dbt_artifacts", "staging", "stg_dbt__model_executions"],
      "unique_id": "model.dbt_artifacts.stg_dbt__model_executions",
      "raw_code": "with base as (\n\n    select *\n    from {{ ref('stg_dbt__artifacts') }}\n\n),\n\nrun_results as (\n\n    select *\n    from base\n    where artifact_type = 'run_results.json'\n\n),\n\ndbt_run as (\n\n    select *\n    from run_results\n    where data:args:which = 'run'\n\n),\n\nfields as (\n\n    select\n        command_invocation_id,\n        dbt_cloud_run_id,\n        generated_at as artifact_generated_at,\n        coalesce(data:args:full_refresh, 'false')::boolean as was_full_refresh,\n        result.value:unique_id::string as node_id,\n        split(result.value:thread_id::string, '-')[1]::integer as thread_id,\n        result.value:status::string as status,\n\n        -- The first item in the timing array is the model-level `compile`\n        result.value:timing[0]:started_at::timestamp_ntz as compile_started_at,\n\n        -- The second item in the timing array is `execute`.\n        result.value:timing[1]:completed_at::timestamp_ntz as query_completed_at,\n\n        -- Confusingly, this does not match the delta of the above two timestamps.\n        -- should we calculate it instead?\n        coalesce(result.value:execution_time::float, 0) as total_node_runtime,\n\n        result.value:adapter_response:rows_affected::int as rows_affected\n    from dbt_run,\n    lateral flatten(input => data:results) as result\n\n),\n\nsurrogate_key as (\n\n    select\n        {{ dbt_utils.surrogate_key(['command_invocation_id', 'node_id']) }} as model_execution_id,\n        command_invocation_id,\n        dbt_cloud_run_id,\n        artifact_generated_at,\n        was_full_refresh,\n        node_id,\n        thread_id,\n        status,\n        compile_started_at,\n        query_completed_at,\n        total_node_runtime,\n        rows_affected\n    from fields\n\n)\n\nselect * from surrogate_key",
      "language": "sql",
      "package_name": "dbt_artifacts",
      "root_path": "/Users/sung/Desktop/dbt/dbt_env/dbt_packages/dbt_artifacts",
      "path": "staging/stg_dbt__model_executions.sql",
      "original_file_path": "models/staging/stg_dbt__model_executions.sql",
      "name": "stg_dbt__model_executions",
      "alias": "stg_dbt__model_executions",
      "checksum": {
        "name": "sha256",
        "checksum": "8db08623fcf016a53b49936e8d85714d26f66da943f0f4eae0914dc0a559584c"
      },
      "tags": [],
      "refs": [["stg_dbt__artifacts"]],
      "sources": [],
      "metrics": [],
      "description": "",
      "columns": {},
      "meta": {},
      "docs": { "show": false, "node_color": null },
      "patch_path": null,
      "compiled_path": null,
      "build_path": null,
      "deferred": false,
      "unrendered_config": {
        "materialized": "view",
        "docs": { "show": false },
        "schema": "dbt_artifacts_sung"
      },
      "created_at": 1665426351.34891
    },
    "model.dbt_artifacts.stg_dbt__run_results": {
      "resource_type": "model",
      "depends_on": {
        "macros": [],
        "nodes": ["model.dbt_artifacts.stg_dbt__artifacts"]
      },
      "config": {
        "enabled": true,
        "alias": null,
        "schema": "dbt_artifacts_sung",
        "database": null,
        "tags": [],
        "meta": {},
        "materialized": "view",
        "incremental_strategy": null,
        "persist_docs": {},
        "quoting": {},
        "column_types": {},
        "full_refresh": null,
        "unique_key": null,
        "on_schema_change": "ignore",
        "grants": {},
        "packages": [],
        "docs": { "show": false, "node_color": null },
        "post-hook": [],
        "pre-hook": []
      },
      "database": "ANALYTICS",
      "schema": "dbt_sung_dbt_artifacts_sung",
      "fqn": ["dbt_artifacts", "staging", "stg_dbt__run_results"],
      "unique_id": "model.dbt_artifacts.stg_dbt__run_results",
      "raw_code": "with base as (\n\n    select *\n    from {{ ref('stg_dbt__artifacts') }}\n\n),\n\nrun_results as (\n\n    select *\n    from base\n    where artifact_type = 'run_results.json'\n\n),\n\ndbt_run as (\n\n    select *\n    from run_results\n    where data:args:which = 'run'\n\n),\n\nfields as (\n\n    select\n        generated_at as artifact_generated_at,\n        command_invocation_id,\n        dbt_cloud_run_id,\n        data:metadata:dbt_version::string as dbt_version,\n        data:metadata:env as env,\n        data:elapsed_time::float as elapsed_time,\n        data:args:which::string as execution_command,\n        coalesce(data:args:full_refresh, 'false')::boolean as was_full_refresh,\n        data:args:models as selected_models,\n        data:args:target::string as target\n    from dbt_run\n\n)\n\nselect * from fields",
      "language": "sql",
      "package_name": "dbt_artifacts",
      "root_path": "/Users/sung/Desktop/dbt/dbt_env/dbt_packages/dbt_artifacts",
      "path": "staging/stg_dbt__run_results.sql",
      "original_file_path": "models/staging/stg_dbt__run_results.sql",
      "name": "stg_dbt__run_results",
      "alias": "stg_dbt__run_results",
      "checksum": {
        "name": "sha256",
        "checksum": "8219a132f9eb92629931470f29221924b6f82052aba58ec8c2ec91a409eafa93"
      },
      "tags": [],
      "refs": [["stg_dbt__artifacts"]],
      "sources": [],
      "metrics": [],
      "description": "",
      "columns": {},
      "meta": {},
      "docs": { "show": false, "node_color": null },
      "patch_path": null,
      "compiled_path": null,
      "build_path": null,
      "deferred": false,
      "unrendered_config": {
        "materialized": "view",
        "docs": { "show": false },
        "schema": "dbt_artifacts_sung"
      },
      "created_at": 1665426351.3567412
    },
    "model.dbt_artifacts.int_dbt__model_executions": {
      "resource_type": "model",
      "depends_on": {
        "macros": ["macro.dbt.is_incremental"],
        "nodes": ["model.dbt_artifacts.stg_dbt__model_executions"]
      },
      "config": {
        "enabled": true,
        "alias": null,
        "schema": "dbt_artifacts_sung",
        "database": null,
        "tags": [],
        "meta": {},
        "materialized": "incremental",
        "incremental_strategy": null,
        "persist_docs": {},
        "quoting": {},
        "column_types": {},
        "full_refresh": null,
        "unique_key": "model_execution_id",
        "on_schema_change": "ignore",
        "grants": {},
        "packages": [],
        "docs": { "show": false, "node_color": null },
        "post-hook": [],
        "pre-hook": []
      },
      "database": "ANALYTICS",
      "schema": "dbt_sung_dbt_artifacts_sung",
      "fqn": ["dbt_artifacts", "incremental", "int_dbt__model_executions"],
      "unique_id": "model.dbt_artifacts.int_dbt__model_executions",
      "raw_code": "{{ config( materialized='incremental', unique_key='model_execution_id' ) }}\n\nwith model_executions as (\n\n    select *\n    from {{ ref('stg_dbt__model_executions') }}\n\n),\n\nmodel_executions_incremental as (\n\n    select *\n    from model_executions\n\n    {% if is_incremental() %}\n    -- this filter will only be applied on an incremental run\n    where artifact_generated_at > (select max(artifact_generated_at) from {{ this }})\n    {% endif %}\n\n),\n\nfields as (\n\n    select\n        model_execution_id,\n        command_invocation_id,\n        dbt_cloud_run_id,\n        artifact_generated_at,\n        was_full_refresh,\n        node_id,\n        thread_id,\n        status,\n        compile_started_at,\n        query_completed_at,\n        total_node_runtime,\n        rows_affected\n    from model_executions_incremental\n\n)\n\nselect * from fields",
      "language": "sql",
      "package_name": "dbt_artifacts",
      "root_path": "/Users/sung/Desktop/dbt/dbt_env/dbt_packages/dbt_artifacts",
      "path": "incremental/int_dbt__model_executions.sql",
      "original_file_path": "models/incremental/int_dbt__model_executions.sql",
      "name": "int_dbt__model_executions",
      "alias": "int_dbt__model_executions",
      "checksum": {
        "name": "sha256",
        "checksum": "c07703978fe740876c6b9d545a3c438171c7377ec307571a290d73d73306cbab"
      },
      "tags": [],
      "refs": [["stg_dbt__model_executions"]],
      "sources": [],
      "metrics": [],
      "description": "",
      "columns": {},
      "meta": {},
      "docs": { "show": false, "node_color": null },
      "patch_path": null,
      "compiled_path": null,
      "build_path": null,
      "deferred": false,
      "unrendered_config": {
        "materialized": "incremental",
        "unique_key": "model_execution_id",
        "docs": { "show": false },
        "schema": "dbt_artifacts_sung"
      },
      "created_at": 1665426351.360747
    },
    "model.dbt_artifacts.fct_dbt__test_executions": {
      "resource_type": "model",
      "depends_on": {
        "macros": ["macro.dbt.is_incremental"],
        "nodes": ["model.dbt_artifacts.stg_dbt__test_executions"]
      },
      "config": {
        "enabled": true,
        "alias": null,
        "schema": "dbt_artifacts_sung",
        "database": null,
        "tags": [],
        "meta": {},
        "materialized": "incremental",
        "incremental_strategy": null,
        "persist_docs": {},
        "quoting": {},
        "column_types": {},
        "full_refresh": null,
        "unique_key": "model_execution_id",
        "on_schema_change": "ignore",
        "grants": {},
        "packages": [],
        "docs": { "show": false, "node_color": null },
        "post-hook": [],
        "pre-hook": []
      },
      "database": "ANALYTICS",
      "schema": "dbt_sung_dbt_artifacts_sung",
      "fqn": ["dbt_artifacts", "incremental", "fct_dbt__test_executions"],
      "unique_id": "model.dbt_artifacts.fct_dbt__test_executions",
      "raw_code": "{{ config( materialized='incremental', unique_key='model_execution_id' ) }}\n\nwith model_executions as (\n\n    select *\n    from {{ ref('stg_dbt__test_executions') }}\n\n),\n\nmodel_executions_incremental as (\n\n    select *\n    from model_executions\n\n    {% if is_incremental() %}\n    -- this filter will only be applied on an incremental run\n    where artifact_generated_at > (select max(artifact_generated_at) from {{ this }})\n    {% endif %}\n\n),\n\nfields as (\n\n    select\n        model_execution_id,\n        command_invocation_id,\n        dbt_cloud_run_id,\n        artifact_generated_at,\n        was_full_refresh,\n        node_id,\n        thread_id,\n        status,\n        compile_started_at,\n        query_completed_at,\n        total_node_runtime,\n        rows_affected\n    from model_executions_incremental\n\n)\n\nselect * from fields",
      "language": "sql",
      "package_name": "dbt_artifacts",
      "root_path": "/Users/sung/Desktop/dbt/dbt_env/dbt_packages/dbt_artifacts",
      "path": "incremental/fct_dbt__test_executions.sql",
      "original_file_path": "models/incremental/fct_dbt__test_executions.sql",
      "name": "fct_dbt__test_executions",
      "alias": "fct_dbt__test_executions",
      "checksum": {
        "name": "sha256",
        "checksum": "63f088d2bea4f1fe4af6e663a413dbdbc8b2d8fa1a4f9f66111324df8b86be3d"
      },
      "tags": [],
      "refs": [["stg_dbt__test_executions"]],
      "sources": [],
      "metrics": [],
      "description": "",
      "columns": {},
      "meta": {},
      "docs": { "show": false, "node_color": null },
      "patch_path": null,
      "compiled_path": null,
      "build_path": null,
      "deferred": false,
      "unrendered_config": {
        "materialized": "incremental",
        "unique_key": "model_execution_id",
        "docs": { "show": false },
        "schema": "dbt_artifacts_sung"
      },
      "created_at": 1665426351.369323
    },
    "model.dbt_artifacts.fct_dbt__model_executions": {
      "resource_type": "model",
      "depends_on": {
        "macros": ["macro.dbt.is_incremental"],
        "nodes": [
          "model.dbt_artifacts.dim_dbt__models",
          "model.dbt_artifacts.int_dbt__model_executions"
        ]
      },
      "config": {
        "enabled": true,
        "alias": null,
        "schema": "dbt_artifacts_sung",
        "database": null,
        "tags": [],
        "meta": {},
        "materialized": "incremental",
        "incremental_strategy": null,
        "persist_docs": {},
        "quoting": {},
        "column_types": {},
        "full_refresh": null,
        "unique_key": "model_execution_id",
        "on_schema_change": "ignore",
        "grants": {},
        "packages": [],
        "docs": { "show": false, "node_color": null },
        "post-hook": [],
        "pre-hook": []
      },
      "database": "ANALYTICS",
      "schema": "dbt_sung_dbt_artifacts_sung",
      "fqn": ["dbt_artifacts", "incremental", "fct_dbt__model_executions"],
      "unique_id": "model.dbt_artifacts.fct_dbt__model_executions",
      "raw_code": "{{ config( materialized='incremental', unique_key='model_execution_id' ) }}\n\nwith models as (\n\n    select *\n    from {{ ref('dim_dbt__models') }}\n\n),\n\nmodel_executions as (\n\n    select *\n    from {{ ref('int_dbt__model_executions') }}\n\n),\n\nmodel_executions_incremental as (\n\n    select *\n    from model_executions\n\n    {% if is_incremental() %}\n    -- this filter will only be applied on an incremental run\n    where artifact_generated_at > (select max(artifact_generated_at) from {{ this }})\n    {% endif %}\n\n),\n\nmodel_executions_with_materialization as (\n\n    select\n        model_executions_incremental.*,\n        models.model_materialization,\n        models.model_schema,\n        models.name\n    from model_executions_incremental\n    left join models on\n        (\n            model_executions_incremental.command_invocation_id = models.command_invocation_id\n            or model_executions_incremental.dbt_cloud_run_id = models.dbt_cloud_run_id\n        )\n        and model_executions_incremental.node_id = models.node_id\n\n),\n\nfields as (\n\n    select\n        model_execution_id,\n        command_invocation_id,\n        dbt_cloud_run_id,\n        artifact_generated_at,\n        was_full_refresh,\n        node_id,\n        thread_id,\n        status,\n        compile_started_at,\n        query_completed_at,\n        total_node_runtime,\n        rows_affected,\n        model_materialization,\n        model_schema,\n        name\n    from model_executions_with_materialization\n\n)\n\nselect * from fields",
      "language": "sql",
      "package_name": "dbt_artifacts",
      "root_path": "/Users/sung/Desktop/dbt/dbt_env/dbt_packages/dbt_artifacts",
      "path": "incremental/fct_dbt__model_executions.sql",
      "original_file_path": "models/incremental/fct_dbt__model_executions.sql",
      "name": "fct_dbt__model_executions",
      "alias": "fct_dbt__model_executions",
      "checksum": {
        "name": "sha256",
        "checksum": "77e952e7773cd4b0ff5effb8a03d6181a24fcd4ba13c50d4837505215a5717e2"
      },
      "tags": [],
      "refs": [["dim_dbt__models"], ["int_dbt__model_executions"]],
      "sources": [],
      "metrics": [],
      "description": "All historic dbt model executions.",
      "columns": {
        "model_execution_id": {
          "name": "model_execution_id",
          "description": "Primary key.",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "name": {
          "name": "name",
          "description": "The name of the model.",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "model_schema": {
          "name": "model_schema",
          "description": "The schema containing the model.",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "was_full_refresh": {
          "name": "was_full_refresh",
          "description": "Boolean value for whether this model was executed with a --full-refresh flag.",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "model_materialization": {
          "name": "model_materialization",
          "description": "The configured materialization of the model.",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "compile_started_at": {
          "name": "compile_started_at",
          "description": "Timestamp of when a model starts to be compiled.",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "query_completed_at": {
          "name": "query_completed_at",
          "description": "Timestamp of when a model's SQL is completed",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "total_node_runtime": {
          "name": "total_node_runtime",
          "description": "The duration of time in seconds for the model to run. Note that this is _not_ equal to the delta between `compile_started_at` and `query_completed_at` since it includes extra tasks performed by dbt.",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "status": {
          "name": "status",
          "description": "Success/fail status of the model's execution.",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "command_invocation_id": {
          "name": "command_invocation_id",
          "description": "Foreign key to fct_dbt_run_results. The id of the command which resulted in the source artifact's generation.",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "artifact_generated_at": {
          "name": "artifact_generated_at",
          "description": "Timestamp of when the source artifact was generated.",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "node_id": {
          "name": "node_id",
          "description": "Unique id for the node, in the form of model.[package_name].[model_name]",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "rows_affected": {
          "name": "rows_affected",
          "description": "The number of rows affected by the model's execution. Always 1 for non-incremental executions.",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        }
      },
      "meta": {},
      "docs": { "show": false, "node_color": null },
      "patch_path": "dbt_artifacts://models/schemas.yml",
      "compiled_path": null,
      "build_path": null,
      "deferred": false,
      "unrendered_config": {
        "materialized": "incremental",
        "unique_key": "model_execution_id",
        "docs": { "show": false },
        "schema": "dbt_artifacts_sung"
      },
      "created_at": 1665426351.802891
    },
    "model.dbt_artifacts.dim_dbt__sources": {
      "resource_type": "model",
      "depends_on": {
        "macros": ["macro.dbt.is_incremental"],
        "nodes": ["model.dbt_artifacts.stg_dbt__sources"]
      },
      "config": {
        "enabled": true,
        "alias": null,
        "schema": "dbt_artifacts_sung",
        "database": null,
        "tags": [],
        "meta": {},
        "materialized": "incremental",
        "incremental_strategy": null,
        "persist_docs": {},
        "quoting": {},
        "column_types": {},
        "full_refresh": null,
        "unique_key": "manifest_source_id",
        "on_schema_change": "ignore",
        "grants": {},
        "packages": [],
        "docs": { "show": false, "node_color": null },
        "post-hook": [],
        "pre-hook": []
      },
      "database": "ANALYTICS",
      "schema": "dbt_sung_dbt_artifacts_sung",
      "fqn": ["dbt_artifacts", "incremental", "dim_dbt__sources"],
      "unique_id": "model.dbt_artifacts.dim_dbt__sources",
      "raw_code": "{{ config( materialized='incremental', unique_key='manifest_source_id' ) }}\n\nwith dbt_sources as (\n\n    select * from {{ ref('stg_dbt__sources') }}\n\n),\n\ndbt_sources_incremental as (\n\n    select *\n    from dbt_sources\n\n    {% if is_incremental() %}\n    -- this filter will only be applied on an incremental run\n    where artifact_generated_at > (select max(artifact_generated_at) from {{ this }})\n    {% endif %}\n\n),\n\nfields as (\n\n    select\n        manifest_source_id,\n        command_invocation_id,\n        dbt_cloud_run_id,\n        artifact_generated_at,\n        node_id,\n        name,\n        source_name,\n        source_schema,\n        package_name,\n        relation_name,\n        source_path\n    from dbt_sources_incremental\n\n)\n\nselect * from fields",
      "language": "sql",
      "package_name": "dbt_artifacts",
      "root_path": "/Users/sung/Desktop/dbt/dbt_env/dbt_packages/dbt_artifacts",
      "path": "incremental/dim_dbt__sources.sql",
      "original_file_path": "models/incremental/dim_dbt__sources.sql",
      "name": "dim_dbt__sources",
      "alias": "dim_dbt__sources",
      "checksum": {
        "name": "sha256",
        "checksum": "139f5314ed2b4fd6ccee7ecb3f36f4981f8a2a1dfbdecc96c9d77d6c60918a15"
      },
      "tags": [],
      "refs": [["stg_dbt__sources"]],
      "sources": [],
      "metrics": [],
      "description": "All dbt source metadata from every manifest.json.",
      "columns": {
        "manifest_source_id": {
          "name": "manifest_source_id",
          "description": "Primary key generated from the command_invocation_id and checksum.",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "command_invocation_id": {
          "name": "command_invocation_id",
          "description": "The id of the command which resulted in the source artifact's generation.",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "artifact_generated_at": {
          "name": "artifact_generated_at",
          "description": "Timestamp of when the source artifact was generated.",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "node_id": {
          "name": "node_id",
          "description": "Unique id for the node, in the form of model.[package_name].[model_name]",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "name": {
          "name": "name",
          "description": "The source node name.",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "source_name": {
          "name": "source_name",
          "description": "The name of the source.",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "source_schema": {
          "name": "source_schema",
          "description": "",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "package_name": {
          "name": "package_name",
          "description": "Package source is defined in.",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "relation_name": {
          "name": "relation_name",
          "description": "Name of the database entity this source resolved to.",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "source_path": {
          "name": "source_path",
          "description": "Filepath of the source.",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        }
      },
      "meta": {},
      "docs": { "show": false, "node_color": null },
      "patch_path": "dbt_artifacts://models/schemas.yml",
      "compiled_path": null,
      "build_path": null,
      "deferred": false,
      "unrendered_config": {
        "materialized": "incremental",
        "unique_key": "manifest_source_id",
        "docs": { "show": false },
        "schema": "dbt_artifacts_sung"
      },
      "created_at": 1665426351.872107
    },
    "model.dbt_artifacts.dim_dbt__exposures": {
      "resource_type": "model",
      "depends_on": {
        "macros": ["macro.dbt.is_incremental"],
        "nodes": ["model.dbt_artifacts.stg_dbt__exposures"]
      },
      "config": {
        "enabled": true,
        "alias": null,
        "schema": "dbt_artifacts_sung",
        "database": null,
        "tags": [],
        "meta": {},
        "materialized": "incremental",
        "incremental_strategy": null,
        "persist_docs": {},
        "quoting": {},
        "column_types": {},
        "full_refresh": null,
        "unique_key": "manifest_model_id",
        "on_schema_change": "ignore",
        "grants": {},
        "packages": [],
        "docs": { "show": false, "node_color": null },
        "post-hook": [],
        "pre-hook": []
      },
      "database": "ANALYTICS",
      "schema": "dbt_sung_dbt_artifacts_sung",
      "fqn": ["dbt_artifacts", "incremental", "dim_dbt__exposures"],
      "unique_id": "model.dbt_artifacts.dim_dbt__exposures",
      "raw_code": "{{\n  config(\n    materialized='incremental',\n    unique_key='manifest_model_id'\n    )\n}}\n\nwith dbt_models as (\n\n    select * from {{ ref('stg_dbt__exposures') }}\n\n),\n\ndbt_models_incremental as (\n\n    select *\n    from dbt_models\n\n    {% if is_incremental() %}\n    -- this filter will only be applied on an incremental run\n    where artifact_generated_at > (select max(artifact_generated_at) from {{ this }})\n    {% endif %}\n\n),\n\nfields as (\n\n     select\n        t.manifest_model_id,\n        t.command_invocation_id,\n        t.dbt_cloud_run_id,\n        t.artifact_generated_at,\n        t.node_id,\n        t.name,\n        t.type,\n        t.owner,\n        t.maturity,\n        f.value::string as output_feeds,\n        t.package_name\n    from dbt_models_incremental as t,\n    lateral flatten(input => depends_on_nodes) as f\n\n)\n\nselect * from fields",
      "language": "sql",
      "package_name": "dbt_artifacts",
      "root_path": "/Users/sung/Desktop/dbt/dbt_env/dbt_packages/dbt_artifacts",
      "path": "incremental/dim_dbt__exposures.sql",
      "original_file_path": "models/incremental/dim_dbt__exposures.sql",
      "name": "dim_dbt__exposures",
      "alias": "dim_dbt__exposures",
      "checksum": {
        "name": "sha256",
        "checksum": "40be79b84f7ec54fa6c4c0f19c9b5fa5be64c8e1abc355301d7bf1cfab8f6208"
      },
      "tags": [],
      "refs": [["stg_dbt__exposures"]],
      "sources": [],
      "metrics": [],
      "description": "All dbt exposures metadata from every manifest.json.",
      "columns": {
        "manifest_model_id": {
          "name": "manifest_model_id",
          "description": "Primary key generated from the command_invocation_id and checksum. Note,\nthis is not unique for a given exposure.\n",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "command_invocation_id": {
          "name": "command_invocation_id",
          "description": "The id of the command which resulted in the source artifact's generation.",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "artifact_generated_at": {
          "name": "artifact_generated_at",
          "description": "Timestamp of when the source artifact was generated.",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "node_id": {
          "name": "node_id",
          "description": "Unique id for the node, in the form of exposure.[package_name].[exposure_name]",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "name": {
          "name": "name",
          "description": "User-defined name of the exposure.",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "type": {
          "name": "type",
          "description": "User-defined type of the exposure.",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "owner": {
          "name": "owner",
          "description": "User-defined owner of the exposure.",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "maturity": {
          "name": "maturity",
          "description": "User-defined name of the exposure.",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "output_feeds": {
          "name": "output_feeds",
          "description": "Models exposed in the exposure, in the form of model.[package_name].[model_name]",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "package_name": {
          "name": "package_name",
          "description": "Source package in which each feed of an exposure was defined.",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        }
      },
      "meta": {},
      "docs": { "show": false, "node_color": null },
      "patch_path": "dbt_artifacts://models/schemas.yml",
      "compiled_path": null,
      "build_path": null,
      "deferred": false,
      "unrendered_config": {
        "materialized": "incremental",
        "unique_key": "manifest_model_id",
        "docs": { "show": false },
        "schema": "dbt_artifacts_sung"
      },
      "created_at": 1665426351.8614678
    },
    "model.dbt_artifacts.dim_dbt__models": {
      "resource_type": "model",
      "depends_on": {
        "macros": ["macro.dbt.is_incremental"],
        "nodes": ["model.dbt_artifacts.stg_dbt__models"]
      },
      "config": {
        "enabled": true,
        "alias": null,
        "schema": "dbt_artifacts_sung",
        "database": null,
        "tags": [],
        "meta": {},
        "materialized": "incremental",
        "incremental_strategy": null,
        "persist_docs": {},
        "quoting": {},
        "column_types": {},
        "full_refresh": null,
        "unique_key": "manifest_model_id",
        "on_schema_change": "ignore",
        "grants": {},
        "packages": [],
        "docs": { "show": false, "node_color": null },
        "post-hook": [],
        "pre-hook": []
      },
      "database": "ANALYTICS",
      "schema": "dbt_sung_dbt_artifacts_sung",
      "fqn": ["dbt_artifacts", "incremental", "dim_dbt__models"],
      "unique_id": "model.dbt_artifacts.dim_dbt__models",
      "raw_code": "{{ config( materialized='incremental', unique_key='manifest_model_id' ) }}\n\nwith dbt_models as (\n\n    select * from {{ ref('stg_dbt__models') }}\n\n),\n\ndbt_models_incremental as (\n\n    select *\n    from dbt_models\n\n    {% if is_incremental() %}\n    -- this filter will only be applied on an incremental run\n    where artifact_generated_at > (select max(artifact_generated_at) from {{ this }})\n    {% endif %}\n\n),\n\nfields as (\n\n    select\n        manifest_model_id,\n        command_invocation_id,\n        dbt_cloud_run_id,\n        artifact_generated_at,\n        node_id,\n        model_database,\n        model_schema,\n        name,\n        depends_on_nodes,\n        package_name,\n        model_path,\n        checksum,\n        model_materialization\n    from dbt_models_incremental\n\n)\n\nselect * from fields",
      "language": "sql",
      "package_name": "dbt_artifacts",
      "root_path": "/Users/sung/Desktop/dbt/dbt_env/dbt_packages/dbt_artifacts",
      "path": "incremental/dim_dbt__models.sql",
      "original_file_path": "models/incremental/dim_dbt__models.sql",
      "name": "dim_dbt__models",
      "alias": "dim_dbt__models",
      "checksum": {
        "name": "sha256",
        "checksum": "6665964075d2b9cfa81e73402c4e0d687bc6df1c6b55a2708f3185e21202f381"
      },
      "tags": [],
      "refs": [["stg_dbt__models"]],
      "sources": [],
      "metrics": [],
      "description": "All dbt model metadata from every manifest.json.",
      "columns": {
        "manifest_model_id": {
          "name": "manifest_model_id",
          "description": "Primary key generated from the command_invocation_id and checksum.",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "command_invocation_id": {
          "name": "command_invocation_id",
          "description": "The id of the command which resulted in the source artifact's generation.",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "artifact_generated_at": {
          "name": "artifact_generated_at",
          "description": "Timestamp of when the source artifact was generated.",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "node_id": {
          "name": "node_id",
          "description": "Unique id for the node, in the form of model.[package_name].[model_name]",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "name": {
          "name": "name",
          "description": "The model name.",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "model_schema": {
          "name": "model_schema",
          "description": "",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "depends_on_nodes": {
          "name": "depends_on_nodes",
          "description": "List of node ids the model depends on.",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "package_name": {
          "name": "package_name",
          "description": "",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "model_path": {
          "name": "model_path",
          "description": "Filepath of the model.",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "checksum": {
          "name": "checksum",
          "description": "Unique identifier for the model. If a model is unchanged between separate executions this will remain the same.",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "model_materialization": {
          "name": "model_materialization",
          "description": "",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        }
      },
      "meta": {},
      "docs": { "show": false, "node_color": null },
      "patch_path": "dbt_artifacts://models/schemas.yml",
      "compiled_path": null,
      "build_path": null,
      "deferred": false,
      "unrendered_config": {
        "materialized": "incremental",
        "unique_key": "manifest_model_id",
        "docs": { "show": false },
        "schema": "dbt_artifacts_sung"
      },
      "created_at": 1665426351.867585
    },
    "model.dbt_artifacts.fct_dbt__run_results": {
      "resource_type": "model",
      "depends_on": {
        "macros": [
          "macro.dbt_utils.get_column_values",
          "macro.dbt.is_incremental"
        ],
        "nodes": [
          "model.dbt_artifacts.stg_dbt__run_results_env_keys",
          "model.dbt_artifacts.stg_dbt__run_results"
        ]
      },
      "config": {
        "enabled": true,
        "alias": null,
        "schema": "dbt_artifacts_sung",
        "database": null,
        "tags": [],
        "meta": {},
        "materialized": "incremental",
        "incremental_strategy": null,
        "persist_docs": {},
        "quoting": {},
        "column_types": {},
        "full_refresh": null,
        "unique_key": "command_invocation_id",
        "on_schema_change": "ignore",
        "grants": {},
        "packages": [],
        "docs": { "show": false, "node_color": null },
        "post-hook": [],
        "pre-hook": []
      },
      "database": "ANALYTICS",
      "schema": "dbt_sung_dbt_artifacts_sung",
      "fqn": ["dbt_artifacts", "incremental", "fct_dbt__run_results"],
      "unique_id": "model.dbt_artifacts.fct_dbt__run_results",
      "raw_code": "{{ config( materialized='incremental', unique_key='command_invocation_id' ) }}\n\n{% set env_keys = dbt_utils.get_column_values(table=ref('stg_dbt__run_results_env_keys'), column='key', default=[]) %}\n\nwith run_results as (\n\n    select *\n    from {{ ref('stg_dbt__run_results') }}\n\n),\n\nincremental_run_results as (\n\n    select *\n    from run_results\n\n    {% if is_incremental() %}\n    -- this filter will only be applied on an incremental run\n    where artifact_generated_at > (select max(artifact_generated_at) from {{ this }})\n    {% endif %}\n\n),\n\nfields as (\n\n    select\n        artifact_generated_at,\n        command_invocation_id,\n        dbt_cloud_run_id,\n        dbt_version,\n        elapsed_time,\n        execution_command,\n        selected_models,\n        target,\n        was_full_refresh\n\n        {% if env_keys %}\n        -- Environment keys are sorted for determinism.\n        {% for key in env_keys|sort %}\n        ,env:{{ key }} as env_{{ key }}\n        {% endfor %}\n        {% endif %}\n    from incremental_run_results\n\n)\n\nselect * from fields",
      "language": "sql",
      "package_name": "dbt_artifacts",
      "root_path": "/Users/sung/Desktop/dbt/dbt_env/dbt_packages/dbt_artifacts",
      "path": "incremental/fct_dbt__run_results.sql",
      "original_file_path": "models/incremental/fct_dbt__run_results.sql",
      "name": "fct_dbt__run_results",
      "alias": "fct_dbt__run_results",
      "checksum": {
        "name": "sha256",
        "checksum": "4cc5e33cca22aa846c1dd7dcc4e9a852aade17b2e777ecdfd72292786025b3d7"
      },
      "tags": [],
      "refs": [["stg_dbt__run_results_env_keys"], ["stg_dbt__run_results"]],
      "sources": [],
      "metrics": [],
      "description": "Metadata for dbt run commands.",
      "columns": {
        "command_invocation_id": {
          "name": "command_invocation_id",
          "description": "The id of the command which resulted in the source artifact's generation.",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "artifact_generated_at": {
          "name": "artifact_generated_at",
          "description": "Timestamp of when the source artifact was generated.",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "dbt_version": {
          "name": "dbt_version",
          "description": "The version of dbt used to generate the source artifact.",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "elapsed_time": {
          "name": "elapsed_time",
          "description": "The total run time of the command.",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "execution_command": {
          "name": "execution_command",
          "description": "The actual command used.",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "selected_models": {
          "name": "selected_models",
          "description": "A list of model selectors used in the command.",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "target": {
          "name": "target",
          "description": "The configured target for the command.",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "was_full_refresh": {
          "name": "was_full_refresh",
          "description": "Was the run executed with a --full-refresh flag?",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "env_*": {
          "name": "env_*",
          "description": "Columns for the environment variables set when the command was executed.",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        }
      },
      "meta": {},
      "docs": { "show": false, "node_color": null },
      "patch_path": "dbt_artifacts://models/schemas.yml",
      "compiled_path": null,
      "build_path": null,
      "deferred": false,
      "unrendered_config": {
        "materialized": "incremental",
        "unique_key": "command_invocation_id",
        "docs": { "show": false },
        "schema": "dbt_artifacts_sung"
      },
      "created_at": 1665426351.85577
    },
    "test.tpch.unique_stg_tpch_customers_customer_key.7f1a18b1a4": {
      "test_metadata": {
        "name": "unique",
        "kwargs": {
          "column_name": "customer_key",
          "model": "{{ get_where_subquery(ref('stg_tpch_customers')) }}"
        },
        "namespace": null
      },
      "resource_type": "test",
      "depends_on": {
        "macros": ["macro.dbt.test_unique"],
        "nodes": ["model.tpch.stg_tpch_customers"]
      },
      "config": {
        "enabled": true,
        "alias": null,
        "schema": "dbt_test__audit",
        "database": null,
        "tags": [],
        "meta": {},
        "materialized": "test",
        "severity": "ERROR",
        "store_failures": null,
        "where": null,
        "limit": null,
        "fail_calc": "count(*)",
        "warn_if": "!= 0",
        "error_if": "!= 0"
      },
      "database": "ANALYTICS",
      "schema": "dbt_sung_dbt_test__audit",
      "fqn": [
        "tpch",
        "staging",
        "tpch",
        "unique_stg_tpch_customers_customer_key"
      ],
      "unique_id": "test.tpch.unique_stg_tpch_customers_customer_key.7f1a18b1a4",
      "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}",
      "language": "sql",
      "package_name": "tpch",
      "root_path": "/Users/sung/Desktop/dbt/dbt_env",
      "path": "unique_stg_tpch_customers_customer_key.sql",
      "original_file_path": "models/staging/tpch/stg_tpch.yml",
      "name": "unique_stg_tpch_customers_customer_key",
      "alias": "unique_stg_tpch_customers_customer_key",
      "checksum": { "name": "none", "checksum": "" },
      "tags": [],
      "refs": [["stg_tpch_customers"]],
      "sources": [],
      "metrics": [],
      "description": "",
      "columns": {},
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "compiled_path": null,
      "build_path": null,
      "deferred": false,
      "unrendered_config": {},
      "created_at": 1665426351.546487,
      "column_name": "customer_key",
      "file_key_name": "models.stg_tpch_customers"
    },
    "test.tpch.not_null_stg_tpch_customers_customer_key.a10e15535a": {
      "test_metadata": {
        "name": "not_null",
        "kwargs": {
          "column_name": "customer_key",
          "model": "{{ get_where_subquery(ref('stg_tpch_customers')) }}"
        },
        "namespace": null
      },
      "resource_type": "test",
      "depends_on": {
        "macros": ["macro.dbt.test_not_null"],
        "nodes": ["model.tpch.stg_tpch_customers"]
      },
      "config": {
        "enabled": true,
        "alias": null,
        "schema": "dbt_test__audit",
        "database": null,
        "tags": [],
        "meta": {},
        "materialized": "test",
        "severity": "ERROR",
        "store_failures": null,
        "where": null,
        "limit": null,
        "fail_calc": "count(*)",
        "warn_if": "!= 0",
        "error_if": "!= 0"
      },
      "database": "ANALYTICS",
      "schema": "dbt_sung_dbt_test__audit",
      "fqn": [
        "tpch",
        "staging",
        "tpch",
        "not_null_stg_tpch_customers_customer_key"
      ],
      "unique_id": "test.tpch.not_null_stg_tpch_customers_customer_key.a10e15535a",
      "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}",
      "language": "sql",
      "package_name": "tpch",
      "root_path": "/Users/sung/Desktop/dbt/dbt_env",
      "path": "not_null_stg_tpch_customers_customer_key.sql",
      "original_file_path": "models/staging/tpch/stg_tpch.yml",
      "name": "not_null_stg_tpch_customers_customer_key",
      "alias": "not_null_stg_tpch_customers_customer_key",
      "checksum": { "name": "none", "checksum": "" },
      "tags": [],
      "refs": [["stg_tpch_customers"]],
      "sources": [],
      "metrics": [],
      "description": "",
      "columns": {},
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "compiled_path": null,
      "build_path": null,
      "deferred": false,
      "unrendered_config": {},
      "created_at": 1665426351.548744,
      "column_name": "customer_key",
      "file_key_name": "models.stg_tpch_customers"
    },
    "test.tpch.unique_stg_tpch_line_items_order_item_key.c819d91e0a": {
      "test_metadata": {
        "name": "unique",
        "kwargs": {
          "column_name": "order_item_key",
          "model": "{{ get_where_subquery(ref('stg_tpch_line_items')) }}"
        },
        "namespace": null
      },
      "resource_type": "test",
      "depends_on": {
        "macros": ["macro.dbt.test_unique"],
        "nodes": ["model.tpch.stg_tpch_line_items"]
      },
      "config": {
        "enabled": true,
        "alias": null,
        "schema": "dbt_test__audit",
        "database": null,
        "tags": [],
        "meta": {},
        "materialized": "test",
        "severity": "ERROR",
        "store_failures": null,
        "where": null,
        "limit": null,
        "fail_calc": "count(*)",
        "warn_if": "!= 0",
        "error_if": "!= 0"
      },
      "database": "ANALYTICS",
      "schema": "dbt_sung_dbt_test__audit",
      "fqn": [
        "tpch",
        "staging",
        "tpch",
        "unique_stg_tpch_line_items_order_item_key"
      ],
      "unique_id": "test.tpch.unique_stg_tpch_line_items_order_item_key.c819d91e0a",
      "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}",
      "language": "sql",
      "package_name": "tpch",
      "root_path": "/Users/sung/Desktop/dbt/dbt_env",
      "path": "unique_stg_tpch_line_items_order_item_key.sql",
      "original_file_path": "models/staging/tpch/stg_tpch.yml",
      "name": "unique_stg_tpch_line_items_order_item_key",
      "alias": "unique_stg_tpch_line_items_order_item_key",
      "checksum": { "name": "none", "checksum": "" },
      "tags": [],
      "refs": [["stg_tpch_line_items"]],
      "sources": [],
      "metrics": [],
      "description": "",
      "columns": {},
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "compiled_path": null,
      "build_path": null,
      "deferred": false,
      "unrendered_config": {},
      "created_at": 1665426351.5509791,
      "column_name": "order_item_key",
      "file_key_name": "models.stg_tpch_line_items"
    },
    "test.tpch.not_null_stg_tpch_line_items_order_item_key.cd47c7a679": {
      "test_metadata": {
        "name": "not_null",
        "kwargs": {
          "column_name": "order_item_key",
          "model": "{{ get_where_subquery(ref('stg_tpch_line_items')) }}"
        },
        "namespace": null
      },
      "resource_type": "test",
      "depends_on": {
        "macros": ["macro.dbt.test_not_null"],
        "nodes": ["model.tpch.stg_tpch_line_items"]
      },
      "config": {
        "enabled": true,
        "alias": null,
        "schema": "dbt_test__audit",
        "database": null,
        "tags": [],
        "meta": {},
        "materialized": "test",
        "severity": "ERROR",
        "store_failures": null,
        "where": null,
        "limit": null,
        "fail_calc": "count(*)",
        "warn_if": "!= 0",
        "error_if": "!= 0"
      },
      "database": "ANALYTICS",
      "schema": "dbt_sung_dbt_test__audit",
      "fqn": [
        "tpch",
        "staging",
        "tpch",
        "not_null_stg_tpch_line_items_order_item_key"
      ],
      "unique_id": "test.tpch.not_null_stg_tpch_line_items_order_item_key.cd47c7a679",
      "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}",
      "language": "sql",
      "package_name": "tpch",
      "root_path": "/Users/sung/Desktop/dbt/dbt_env",
      "path": "not_null_stg_tpch_line_items_order_item_key.sql",
      "original_file_path": "models/staging/tpch/stg_tpch.yml",
      "name": "not_null_stg_tpch_line_items_order_item_key",
      "alias": "not_null_stg_tpch_line_items_order_item_key",
      "checksum": { "name": "none", "checksum": "" },
      "tags": [],
      "refs": [["stg_tpch_line_items"]],
      "sources": [],
      "metrics": [],
      "description": "",
      "columns": {},
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "compiled_path": null,
      "build_path": null,
      "deferred": false,
      "unrendered_config": {},
      "created_at": 1665426351.552779,
      "column_name": "order_item_key",
      "file_key_name": "models.stg_tpch_line_items"
    },
    "test.tpch.unique_stg_tpch_nations_nation_key.9e3675553d": {
      "test_metadata": {
        "name": "unique",
        "kwargs": {
          "column_name": "nation_key",
          "model": "{{ get_where_subquery(ref('stg_tpch_nations')) }}"
        },
        "namespace": null
      },
      "resource_type": "test",
      "depends_on": {
        "macros": ["macro.dbt.test_unique"],
        "nodes": ["model.tpch.stg_tpch_nations"]
      },
      "config": {
        "enabled": true,
        "alias": null,
        "schema": "dbt_test__audit",
        "database": null,
        "tags": [],
        "meta": {},
        "materialized": "test",
        "severity": "ERROR",
        "store_failures": null,
        "where": null,
        "limit": null,
        "fail_calc": "count(*)",
        "warn_if": "!= 0",
        "error_if": "!= 0"
      },
      "database": "ANALYTICS",
      "schema": "dbt_sung_dbt_test__audit",
      "fqn": ["tpch", "staging", "tpch", "unique_stg_tpch_nations_nation_key"],
      "unique_id": "test.tpch.unique_stg_tpch_nations_nation_key.9e3675553d",
      "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}",
      "language": "sql",
      "package_name": "tpch",
      "root_path": "/Users/sung/Desktop/dbt/dbt_env",
      "path": "unique_stg_tpch_nations_nation_key.sql",
      "original_file_path": "models/staging/tpch/stg_tpch.yml",
      "name": "unique_stg_tpch_nations_nation_key",
      "alias": "unique_stg_tpch_nations_nation_key",
      "checksum": { "name": "none", "checksum": "" },
      "tags": [],
      "refs": [["stg_tpch_nations"]],
      "sources": [],
      "metrics": [],
      "description": "",
      "columns": {},
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "compiled_path": null,
      "build_path": null,
      "deferred": false,
      "unrendered_config": {},
      "created_at": 1665426351.5544949,
      "column_name": "nation_key",
      "file_key_name": "models.stg_tpch_nations"
    },
    "test.tpch.not_null_stg_tpch_nations_nation_key.d0c2fe32ed": {
      "test_metadata": {
        "name": "not_null",
        "kwargs": {
          "column_name": "nation_key",
          "model": "{{ get_where_subquery(ref('stg_tpch_nations')) }}"
        },
        "namespace": null
      },
      "resource_type": "test",
      "depends_on": {
        "macros": ["macro.dbt.test_not_null"],
        "nodes": ["model.tpch.stg_tpch_nations"]
      },
      "config": {
        "enabled": true,
        "alias": null,
        "schema": "dbt_test__audit",
        "database": null,
        "tags": [],
        "meta": {},
        "materialized": "test",
        "severity": "ERROR",
        "store_failures": null,
        "where": null,
        "limit": null,
        "fail_calc": "count(*)",
        "warn_if": "!= 0",
        "error_if": "!= 0"
      },
      "database": "ANALYTICS",
      "schema": "dbt_sung_dbt_test__audit",
      "fqn": [
        "tpch",
        "staging",
        "tpch",
        "not_null_stg_tpch_nations_nation_key"
      ],
      "unique_id": "test.tpch.not_null_stg_tpch_nations_nation_key.d0c2fe32ed",
      "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}",
      "language": "sql",
      "package_name": "tpch",
      "root_path": "/Users/sung/Desktop/dbt/dbt_env",
      "path": "not_null_stg_tpch_nations_nation_key.sql",
      "original_file_path": "models/staging/tpch/stg_tpch.yml",
      "name": "not_null_stg_tpch_nations_nation_key",
      "alias": "not_null_stg_tpch_nations_nation_key",
      "checksum": { "name": "none", "checksum": "" },
      "tags": [],
      "refs": [["stg_tpch_nations"]],
      "sources": [],
      "metrics": [],
      "description": "",
      "columns": {},
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "compiled_path": null,
      "build_path": null,
      "deferred": false,
      "unrendered_config": {},
      "created_at": 1665426351.556384,
      "column_name": "nation_key",
      "file_key_name": "models.stg_tpch_nations"
    },
    "test.tpch.unique_stg_tpch_orders_order_key.bd29f13cc9": {
      "test_metadata": {
        "name": "unique",
        "kwargs": {
          "column_name": "order_key",
          "model": "{{ get_where_subquery(ref('stg_tpch_orders')) }}"
        },
        "namespace": null
      },
      "resource_type": "test",
      "depends_on": {
        "macros": ["macro.dbt.test_unique"],
        "nodes": ["model.tpch.stg_tpch_orders"]
      },
      "config": {
        "enabled": true,
        "alias": null,
        "schema": "dbt_test__audit",
        "database": null,
        "tags": [],
        "meta": {},
        "materialized": "test",
        "severity": "ERROR",
        "store_failures": null,
        "where": null,
        "limit": null,
        "fail_calc": "count(*)",
        "warn_if": "!= 0",
        "error_if": "!= 0"
      },
      "database": "ANALYTICS",
      "schema": "dbt_sung_dbt_test__audit",
      "fqn": ["tpch", "staging", "tpch", "unique_stg_tpch_orders_order_key"],
      "unique_id": "test.tpch.unique_stg_tpch_orders_order_key.bd29f13cc9",
      "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}",
      "language": "sql",
      "package_name": "tpch",
      "root_path": "/Users/sung/Desktop/dbt/dbt_env",
      "path": "unique_stg_tpch_orders_order_key.sql",
      "original_file_path": "models/staging/tpch/stg_tpch.yml",
      "name": "unique_stg_tpch_orders_order_key",
      "alias": "unique_stg_tpch_orders_order_key",
      "checksum": { "name": "none", "checksum": "" },
      "tags": [],
      "refs": [["stg_tpch_orders"]],
      "sources": [],
      "metrics": [],
      "description": "",
      "columns": {},
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "compiled_path": null,
      "build_path": null,
      "deferred": false,
      "unrendered_config": {},
      "created_at": 1665426351.557971,
      "column_name": "order_key",
      "file_key_name": "models.stg_tpch_orders"
    },
    "test.tpch.not_null_stg_tpch_orders_order_key.bb22e75ae8": {
      "test_metadata": {
        "name": "not_null",
        "kwargs": {
          "column_name": "order_key",
          "model": "{{ get_where_subquery(ref('stg_tpch_orders')) }}"
        },
        "namespace": null
      },
      "resource_type": "test",
      "depends_on": {
        "macros": ["macro.dbt.test_not_null"],
        "nodes": ["model.tpch.stg_tpch_orders"]
      },
      "config": {
        "enabled": true,
        "alias": null,
        "schema": "dbt_test__audit",
        "database": null,
        "tags": [],
        "meta": {},
        "materialized": "test",
        "severity": "ERROR",
        "store_failures": null,
        "where": null,
        "limit": null,
        "fail_calc": "count(*)",
        "warn_if": "!= 0",
        "error_if": "!= 0"
      },
      "database": "ANALYTICS",
      "schema": "dbt_sung_dbt_test__audit",
      "fqn": ["tpch", "staging", "tpch", "not_null_stg_tpch_orders_order_key"],
      "unique_id": "test.tpch.not_null_stg_tpch_orders_order_key.bb22e75ae8",
      "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}",
      "language": "sql",
      "package_name": "tpch",
      "root_path": "/Users/sung/Desktop/dbt/dbt_env",
      "path": "not_null_stg_tpch_orders_order_key.sql",
      "original_file_path": "models/staging/tpch/stg_tpch.yml",
      "name": "not_null_stg_tpch_orders_order_key",
      "alias": "not_null_stg_tpch_orders_order_key",
      "checksum": { "name": "none", "checksum": "" },
      "tags": [],
      "refs": [["stg_tpch_orders"]],
      "sources": [],
      "metrics": [],
      "description": "",
      "columns": {},
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "compiled_path": null,
      "build_path": null,
      "deferred": false,
      "unrendered_config": {},
      "created_at": 1665426351.560496,
      "column_name": "order_key",
      "file_key_name": "models.stg_tpch_orders"
    },
    "test.tpch.unique_stg_tpch_part_suppliers_part_supplier_key.96ab01c1ae": {
      "test_metadata": {
        "name": "unique",
        "kwargs": {
          "column_name": "part_supplier_key",
          "model": "{{ get_where_subquery(ref('stg_tpch_part_suppliers')) }}"
        },
        "namespace": null
      },
      "resource_type": "test",
      "depends_on": {
        "macros": ["macro.dbt.test_unique"],
        "nodes": ["model.tpch.stg_tpch_part_suppliers"]
      },
      "config": {
        "enabled": true,
        "alias": null,
        "schema": "dbt_test__audit",
        "database": null,
        "tags": [],
        "meta": {},
        "materialized": "test",
        "severity": "ERROR",
        "store_failures": null,
        "where": null,
        "limit": null,
        "fail_calc": "count(*)",
        "warn_if": "!= 0",
        "error_if": "!= 0"
      },
      "database": "ANALYTICS",
      "schema": "dbt_sung_dbt_test__audit",
      "fqn": [
        "tpch",
        "staging",
        "tpch",
        "unique_stg_tpch_part_suppliers_part_supplier_key"
      ],
      "unique_id": "test.tpch.unique_stg_tpch_part_suppliers_part_supplier_key.96ab01c1ae",
      "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}",
      "language": "sql",
      "package_name": "tpch",
      "root_path": "/Users/sung/Desktop/dbt/dbt_env",
      "path": "unique_stg_tpch_part_suppliers_part_supplier_key.sql",
      "original_file_path": "models/staging/tpch/stg_tpch.yml",
      "name": "unique_stg_tpch_part_suppliers_part_supplier_key",
      "alias": "unique_stg_tpch_part_suppliers_part_supplier_key",
      "checksum": { "name": "none", "checksum": "" },
      "tags": [],
      "refs": [["stg_tpch_part_suppliers"]],
      "sources": [],
      "metrics": [],
      "description": "",
      "columns": {},
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "compiled_path": null,
      "build_path": null,
      "deferred": false,
      "unrendered_config": {},
      "created_at": 1665426351.5631459,
      "column_name": "part_supplier_key",
      "file_key_name": "models.stg_tpch_part_suppliers"
    },
    "test.tpch.not_null_stg_tpch_part_suppliers_part_supplier_key.3cc6ccee2e": {
      "test_metadata": {
        "name": "not_null",
        "kwargs": {
          "column_name": "part_supplier_key",
          "model": "{{ get_where_subquery(ref('stg_tpch_part_suppliers')) }}"
        },
        "namespace": null
      },
      "resource_type": "test",
      "depends_on": {
        "macros": ["macro.dbt.test_not_null"],
        "nodes": ["model.tpch.stg_tpch_part_suppliers"]
      },
      "config": {
        "enabled": true,
        "alias": null,
        "schema": "dbt_test__audit",
        "database": null,
        "tags": [],
        "meta": {},
        "materialized": "test",
        "severity": "ERROR",
        "store_failures": null,
        "where": null,
        "limit": null,
        "fail_calc": "count(*)",
        "warn_if": "!= 0",
        "error_if": "!= 0"
      },
      "database": "ANALYTICS",
      "schema": "dbt_sung_dbt_test__audit",
      "fqn": [
        "tpch",
        "staging",
        "tpch",
        "not_null_stg_tpch_part_suppliers_part_supplier_key"
      ],
      "unique_id": "test.tpch.not_null_stg_tpch_part_suppliers_part_supplier_key.3cc6ccee2e",
      "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}",
      "language": "sql",
      "package_name": "tpch",
      "root_path": "/Users/sung/Desktop/dbt/dbt_env",
      "path": "not_null_stg_tpch_part_suppliers_part_supplier_key.sql",
      "original_file_path": "models/staging/tpch/stg_tpch.yml",
      "name": "not_null_stg_tpch_part_suppliers_part_supplier_key",
      "alias": "not_null_stg_tpch_part_suppliers_part_supplier_key",
      "checksum": { "name": "none", "checksum": "" },
      "tags": [],
      "refs": [["stg_tpch_part_suppliers"]],
      "sources": [],
      "metrics": [],
      "description": "",
      "columns": {},
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "compiled_path": null,
      "build_path": null,
      "deferred": false,
      "unrendered_config": {},
      "created_at": 1665426351.565208,
      "column_name": "part_supplier_key",
      "file_key_name": "models.stg_tpch_part_suppliers"
    },
    "test.tpch.unique_stg_tpch_parts_part_key.afbc7ad489": {
      "test_metadata": {
        "name": "unique",
        "kwargs": {
          "column_name": "part_key",
          "model": "{{ get_where_subquery(ref('stg_tpch_parts')) }}"
        },
        "namespace": null
      },
      "resource_type": "test",
      "depends_on": {
        "macros": ["macro.dbt.test_unique"],
        "nodes": ["model.tpch.stg_tpch_parts"]
      },
      "config": {
        "enabled": true,
        "alias": null,
        "schema": "dbt_test__audit",
        "database": null,
        "tags": [],
        "meta": {},
        "materialized": "test",
        "severity": "ERROR",
        "store_failures": null,
        "where": null,
        "limit": null,
        "fail_calc": "count(*)",
        "warn_if": "!= 0",
        "error_if": "!= 0"
      },
      "database": "ANALYTICS",
      "schema": "dbt_sung_dbt_test__audit",
      "fqn": ["tpch", "staging", "tpch", "unique_stg_tpch_parts_part_key"],
      "unique_id": "test.tpch.unique_stg_tpch_parts_part_key.afbc7ad489",
      "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}",
      "language": "sql",
      "package_name": "tpch",
      "root_path": "/Users/sung/Desktop/dbt/dbt_env",
      "path": "unique_stg_tpch_parts_part_key.sql",
      "original_file_path": "models/staging/tpch/stg_tpch.yml",
      "name": "unique_stg_tpch_parts_part_key",
      "alias": "unique_stg_tpch_parts_part_key",
      "checksum": { "name": "none", "checksum": "" },
      "tags": [],
      "refs": [["stg_tpch_parts"]],
      "sources": [],
      "metrics": [],
      "description": "",
      "columns": {},
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "compiled_path": null,
      "build_path": null,
      "deferred": false,
      "unrendered_config": {},
      "created_at": 1665426351.5678039,
      "column_name": "part_key",
      "file_key_name": "models.stg_tpch_parts"
    },
    "test.tpch.not_null_stg_tpch_parts_part_key.cc8e610420": {
      "test_metadata": {
        "name": "not_null",
        "kwargs": {
          "column_name": "part_key",
          "model": "{{ get_where_subquery(ref('stg_tpch_parts')) }}"
        },
        "namespace": null
      },
      "resource_type": "test",
      "depends_on": {
        "macros": ["macro.dbt.test_not_null"],
        "nodes": ["model.tpch.stg_tpch_parts"]
      },
      "config": {
        "enabled": true,
        "alias": null,
        "schema": "dbt_test__audit",
        "database": null,
        "tags": [],
        "meta": {},
        "materialized": "test",
        "severity": "ERROR",
        "store_failures": null,
        "where": null,
        "limit": null,
        "fail_calc": "count(*)",
        "warn_if": "!= 0",
        "error_if": "!= 0"
      },
      "database": "ANALYTICS",
      "schema": "dbt_sung_dbt_test__audit",
      "fqn": ["tpch", "staging", "tpch", "not_null_stg_tpch_parts_part_key"],
      "unique_id": "test.tpch.not_null_stg_tpch_parts_part_key.cc8e610420",
      "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}",
      "language": "sql",
      "package_name": "tpch",
      "root_path": "/Users/sung/Desktop/dbt/dbt_env",
      "path": "not_null_stg_tpch_parts_part_key.sql",
      "original_file_path": "models/staging/tpch/stg_tpch.yml",
      "name": "not_null_stg_tpch_parts_part_key",
      "alias": "not_null_stg_tpch_parts_part_key",
      "checksum": { "name": "none", "checksum": "" },
      "tags": [],
      "refs": [["stg_tpch_parts"]],
      "sources": [],
      "metrics": [],
      "description": "",
      "columns": {},
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "compiled_path": null,
      "build_path": null,
      "deferred": false,
      "unrendered_config": {},
      "created_at": 1665426351.570316,
      "column_name": "part_key",
      "file_key_name": "models.stg_tpch_parts"
    },
    "test.tpch.unique_stg_tpch_regions_region_key.b2bd891bb5": {
      "test_metadata": {
        "name": "unique",
        "kwargs": {
          "column_name": "region_key",
          "model": "{{ get_where_subquery(ref('stg_tpch_regions')) }}"
        },
        "namespace": null
      },
      "resource_type": "test",
      "depends_on": {
        "macros": ["macro.dbt.test_unique"],
        "nodes": ["model.tpch.stg_tpch_regions"]
      },
      "config": {
        "enabled": true,
        "alias": null,
        "schema": "dbt_test__audit",
        "database": null,
        "tags": [],
        "meta": {},
        "materialized": "test",
        "severity": "ERROR",
        "store_failures": null,
        "where": null,
        "limit": null,
        "fail_calc": "count(*)",
        "warn_if": "!= 0",
        "error_if": "!= 0"
      },
      "database": "ANALYTICS",
      "schema": "dbt_sung_dbt_test__audit",
      "fqn": ["tpch", "staging", "tpch", "unique_stg_tpch_regions_region_key"],
      "unique_id": "test.tpch.unique_stg_tpch_regions_region_key.b2bd891bb5",
      "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}",
      "language": "sql",
      "package_name": "tpch",
      "root_path": "/Users/sung/Desktop/dbt/dbt_env",
      "path": "unique_stg_tpch_regions_region_key.sql",
      "original_file_path": "models/staging/tpch/stg_tpch.yml",
      "name": "unique_stg_tpch_regions_region_key",
      "alias": "unique_stg_tpch_regions_region_key",
      "checksum": { "name": "none", "checksum": "" },
      "tags": [],
      "refs": [["stg_tpch_regions"]],
      "sources": [],
      "metrics": [],
      "description": "",
      "columns": {},
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "compiled_path": null,
      "build_path": null,
      "deferred": false,
      "unrendered_config": {},
      "created_at": 1665426351.5723898,
      "column_name": "region_key",
      "file_key_name": "models.stg_tpch_regions"
    },
    "test.tpch.not_null_stg_tpch_regions_region_key.869fa0b326": {
      "test_metadata": {
        "name": "not_null",
        "kwargs": {
          "column_name": "region_key",
          "model": "{{ get_where_subquery(ref('stg_tpch_regions')) }}"
        },
        "namespace": null
      },
      "resource_type": "test",
      "depends_on": {
        "macros": ["macro.dbt.test_not_null"],
        "nodes": ["model.tpch.stg_tpch_regions"]
      },
      "config": {
        "enabled": true,
        "alias": null,
        "schema": "dbt_test__audit",
        "database": null,
        "tags": [],
        "meta": {},
        "materialized": "test",
        "severity": "ERROR",
        "store_failures": null,
        "where": null,
        "limit": null,
        "fail_calc": "count(*)",
        "warn_if": "!= 0",
        "error_if": "!= 0"
      },
      "database": "ANALYTICS",
      "schema": "dbt_sung_dbt_test__audit",
      "fqn": [
        "tpch",
        "staging",
        "tpch",
        "not_null_stg_tpch_regions_region_key"
      ],
      "unique_id": "test.tpch.not_null_stg_tpch_regions_region_key.869fa0b326",
      "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}",
      "language": "sql",
      "package_name": "tpch",
      "root_path": "/Users/sung/Desktop/dbt/dbt_env",
      "path": "not_null_stg_tpch_regions_region_key.sql",
      "original_file_path": "models/staging/tpch/stg_tpch.yml",
      "name": "not_null_stg_tpch_regions_region_key",
      "alias": "not_null_stg_tpch_regions_region_key",
      "checksum": { "name": "none", "checksum": "" },
      "tags": [],
      "refs": [["stg_tpch_regions"]],
      "sources": [],
      "metrics": [],
      "description": "",
      "columns": {},
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "compiled_path": null,
      "build_path": null,
      "deferred": false,
      "unrendered_config": {},
      "created_at": 1665426351.574493,
      "column_name": "region_key",
      "file_key_name": "models.stg_tpch_regions"
    },
    "test.tpch.unique_stg_tpch_suppliers_supplier_key.6215308464": {
      "test_metadata": {
        "name": "unique",
        "kwargs": {
          "column_name": "supplier_key",
          "model": "{{ get_where_subquery(ref('stg_tpch_suppliers')) }}"
        },
        "namespace": null
      },
      "resource_type": "test",
      "depends_on": {
        "macros": ["macro.dbt.test_unique"],
        "nodes": ["model.tpch.stg_tpch_suppliers"]
      },
      "config": {
        "enabled": true,
        "alias": null,
        "schema": "dbt_test__audit",
        "database": null,
        "tags": [],
        "meta": {},
        "materialized": "test",
        "severity": "ERROR",
        "store_failures": null,
        "where": null,
        "limit": null,
        "fail_calc": "count(*)",
        "warn_if": "!= 0",
        "error_if": "!= 0"
      },
      "database": "ANALYTICS",
      "schema": "dbt_sung_dbt_test__audit",
      "fqn": [
        "tpch",
        "staging",
        "tpch",
        "unique_stg_tpch_suppliers_supplier_key"
      ],
      "unique_id": "test.tpch.unique_stg_tpch_suppliers_supplier_key.6215308464",
      "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}",
      "language": "sql",
      "package_name": "tpch",
      "root_path": "/Users/sung/Desktop/dbt/dbt_env",
      "path": "unique_stg_tpch_suppliers_supplier_key.sql",
      "original_file_path": "models/staging/tpch/stg_tpch.yml",
      "name": "unique_stg_tpch_suppliers_supplier_key",
      "alias": "unique_stg_tpch_suppliers_supplier_key",
      "checksum": { "name": "none", "checksum": "" },
      "tags": [],
      "refs": [["stg_tpch_suppliers"]],
      "sources": [],
      "metrics": [],
      "description": "",
      "columns": {},
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "compiled_path": null,
      "build_path": null,
      "deferred": false,
      "unrendered_config": {},
      "created_at": 1665426351.5783548,
      "column_name": "supplier_key",
      "file_key_name": "models.stg_tpch_suppliers"
    },
    "test.tpch.not_null_stg_tpch_suppliers_supplier_key.97c31a786d": {
      "test_metadata": {
        "name": "not_null",
        "kwargs": {
          "column_name": "supplier_key",
          "model": "{{ get_where_subquery(ref('stg_tpch_suppliers')) }}"
        },
        "namespace": null
      },
      "resource_type": "test",
      "depends_on": {
        "macros": ["macro.dbt.test_not_null"],
        "nodes": ["model.tpch.stg_tpch_suppliers"]
      },
      "config": {
        "enabled": true,
        "alias": null,
        "schema": "dbt_test__audit",
        "database": null,
        "tags": [],
        "meta": {},
        "materialized": "test",
        "severity": "ERROR",
        "store_failures": null,
        "where": null,
        "limit": null,
        "fail_calc": "count(*)",
        "warn_if": "!= 0",
        "error_if": "!= 0"
      },
      "database": "ANALYTICS",
      "schema": "dbt_sung_dbt_test__audit",
      "fqn": [
        "tpch",
        "staging",
        "tpch",
        "not_null_stg_tpch_suppliers_supplier_key"
      ],
      "unique_id": "test.tpch.not_null_stg_tpch_suppliers_supplier_key.97c31a786d",
      "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}",
      "language": "sql",
      "package_name": "tpch",
      "root_path": "/Users/sung/Desktop/dbt/dbt_env",
      "path": "not_null_stg_tpch_suppliers_supplier_key.sql",
      "original_file_path": "models/staging/tpch/stg_tpch.yml",
      "name": "not_null_stg_tpch_suppliers_supplier_key",
      "alias": "not_null_stg_tpch_suppliers_supplier_key",
      "checksum": { "name": "none", "checksum": "" },
      "tags": [],
      "refs": [["stg_tpch_suppliers"]],
      "sources": [],
      "metrics": [],
      "description": "",
      "columns": {},
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "compiled_path": null,
      "build_path": null,
      "deferred": false,
      "unrendered_config": {},
      "created_at": 1665426351.5806851,
      "column_name": "supplier_key",
      "file_key_name": "models.stg_tpch_suppliers"
    },
    "test.tpch.unique_dim_customers_customer_key.ad8156656e": {
      "test_metadata": {
        "name": "unique",
        "kwargs": {
          "column_name": "customer_key",
          "model": "{{ get_where_subquery(ref('dim_customers')) }}"
        },
        "namespace": null
      },
      "resource_type": "test",
      "depends_on": {
        "macros": ["macro.dbt.test_unique"],
        "nodes": ["model.tpch.dim_customers"]
      },
      "config": {
        "enabled": true,
        "alias": null,
        "schema": "dbt_test__audit",
        "database": null,
        "tags": [],
        "meta": {},
        "materialized": "test",
        "severity": "ERROR",
        "store_failures": null,
        "where": null,
        "limit": null,
        "fail_calc": "count(*)",
        "warn_if": "!= 0",
        "error_if": "!= 0"
      },
      "database": "ANALYTICS",
      "schema": "dbt_sung_dbt_test__audit",
      "fqn": ["tpch", "marts", "core", "unique_dim_customers_customer_key"],
      "unique_id": "test.tpch.unique_dim_customers_customer_key.ad8156656e",
      "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}",
      "language": "sql",
      "package_name": "tpch",
      "root_path": "/Users/sung/Desktop/dbt/dbt_env",
      "path": "unique_dim_customers_customer_key.sql",
      "original_file_path": "models/marts/core/core.yml",
      "name": "unique_dim_customers_customer_key",
      "alias": "unique_dim_customers_customer_key",
      "checksum": { "name": "none", "checksum": "" },
      "tags": [],
      "refs": [["dim_customers"]],
      "sources": [],
      "metrics": [],
      "description": "",
      "columns": {},
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "compiled_path": null,
      "build_path": null,
      "deferred": false,
      "unrendered_config": {},
      "created_at": 1665426351.6165361,
      "column_name": "customer_key",
      "file_key_name": "models.dim_customers"
    },
    "test.tpch.not_null_dim_customers_customer_key.4bebfb3411": {
      "test_metadata": {
        "name": "not_null",
        "kwargs": {
          "column_name": "customer_key",
          "model": "{{ get_where_subquery(ref('dim_customers')) }}"
        },
        "namespace": null
      },
      "resource_type": "test",
      "depends_on": {
        "macros": ["macro.dbt.test_not_null"],
        "nodes": ["model.tpch.dim_customers"]
      },
      "config": {
        "enabled": true,
        "alias": null,
        "schema": "dbt_test__audit",
        "database": null,
        "tags": [],
        "meta": {},
        "materialized": "test",
        "severity": "ERROR",
        "store_failures": null,
        "where": null,
        "limit": null,
        "fail_calc": "count(*)",
        "warn_if": "!= 0",
        "error_if": "!= 0"
      },
      "database": "ANALYTICS",
      "schema": "dbt_sung_dbt_test__audit",
      "fqn": ["tpch", "marts", "core", "not_null_dim_customers_customer_key"],
      "unique_id": "test.tpch.not_null_dim_customers_customer_key.4bebfb3411",
      "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}",
      "language": "sql",
      "package_name": "tpch",
      "root_path": "/Users/sung/Desktop/dbt/dbt_env",
      "path": "not_null_dim_customers_customer_key.sql",
      "original_file_path": "models/marts/core/core.yml",
      "name": "not_null_dim_customers_customer_key",
      "alias": "not_null_dim_customers_customer_key",
      "checksum": { "name": "none", "checksum": "" },
      "tags": [],
      "refs": [["dim_customers"]],
      "sources": [],
      "metrics": [],
      "description": "",
      "columns": {},
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "compiled_path": null,
      "build_path": null,
      "deferred": false,
      "unrendered_config": {},
      "created_at": 1665426351.619124,
      "column_name": "customer_key",
      "file_key_name": "models.dim_customers"
    },
    "test.tpch.accepted_values_dim_customers_region__AFRICA__MIDDLE_EAST__ASIA__EUROPE__AMERICA.dad4601b69": {
      "test_metadata": {
        "name": "accepted_values",
        "kwargs": {
          "values": ["AFRICA", "MIDDLE EAST", "ASIA", "EUROPE", "AMERICA"],
          "column_name": "region",
          "model": "{{ get_where_subquery(ref('dim_customers')) }}"
        },
        "namespace": null
      },
      "resource_type": "test",
      "depends_on": {
        "macros": [
          "macro.dbt.test_accepted_values",
          "macro.dbt.get_where_subquery"
        ],
        "nodes": ["model.tpch.dim_customers"]
      },
      "config": {
        "enabled": true,
        "alias": "accepted_values_dim_customers_19c499e4c12e802c2c2bd2047d4767fc",
        "schema": "dbt_test__audit",
        "database": null,
        "tags": [],
        "meta": {},
        "materialized": "test",
        "severity": "warn",
        "store_failures": null,
        "where": null,
        "limit": null,
        "fail_calc": "count(*)",
        "warn_if": "!= 0",
        "error_if": "!= 0"
      },
      "database": "ANALYTICS",
      "schema": "dbt_sung_dbt_test__audit",
      "fqn": [
        "tpch",
        "marts",
        "core",
        "accepted_values_dim_customers_region__AFRICA__MIDDLE_EAST__ASIA__EUROPE__AMERICA"
      ],
      "unique_id": "test.tpch.accepted_values_dim_customers_region__AFRICA__MIDDLE_EAST__ASIA__EUROPE__AMERICA.dad4601b69",
      "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}{{ config(severity=\"warn\",alias=\"accepted_values_dim_customers_19c499e4c12e802c2c2bd2047d4767fc\") }}",
      "language": "sql",
      "package_name": "tpch",
      "root_path": "/Users/sung/Desktop/dbt/dbt_env",
      "path": "accepted_values_dim_customers_19c499e4c12e802c2c2bd2047d4767fc.sql",
      "original_file_path": "models/marts/core/core.yml",
      "name": "accepted_values_dim_customers_region__AFRICA__MIDDLE_EAST__ASIA__EUROPE__AMERICA",
      "alias": "accepted_values_dim_customers_19c499e4c12e802c2c2bd2047d4767fc",
      "checksum": { "name": "none", "checksum": "" },
      "tags": [],
      "refs": [["dim_customers"]],
      "sources": [],
      "metrics": [],
      "description": "",
      "columns": {},
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "compiled_path": null,
      "build_path": null,
      "deferred": false,
      "unrendered_config": {
        "severity": "warn",
        "alias": "accepted_values_dim_customers_19c499e4c12e802c2c2bd2047d4767fc"
      },
      "created_at": 1665426351.621784,
      "column_name": "region",
      "file_key_name": "models.dim_customers"
    },
    "test.tpch.unique_dim_customers_market_segment.eb7a5b1954": {
      "test_metadata": {
        "name": "unique",
        "kwargs": {
          "column_name": "market_segment",
          "model": "{{ get_where_subquery(ref('dim_customers')) }}"
        },
        "namespace": null
      },
      "resource_type": "test",
      "depends_on": {
        "macros": ["macro.dbt.test_unique"],
        "nodes": ["model.tpch.dim_customers"]
      },
      "config": {
        "enabled": true,
        "alias": null,
        "schema": "dbt_test__audit",
        "database": null,
        "tags": [],
        "meta": {},
        "materialized": "test",
        "severity": "ERROR",
        "store_failures": null,
        "where": null,
        "limit": null,
        "fail_calc": "count(*)",
        "warn_if": "!= 0",
        "error_if": "!= 0"
      },
      "database": "ANALYTICS",
      "schema": "dbt_sung_dbt_test__audit",
      "fqn": ["tpch", "marts", "core", "unique_dim_customers_market_segment"],
      "unique_id": "test.tpch.unique_dim_customers_market_segment.eb7a5b1954",
      "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}",
      "language": "sql",
      "package_name": "tpch",
      "root_path": "/Users/sung/Desktop/dbt/dbt_env",
      "path": "unique_dim_customers_market_segment.sql",
      "original_file_path": "models/marts/core/core.yml",
      "name": "unique_dim_customers_market_segment",
      "alias": "unique_dim_customers_market_segment",
      "checksum": { "name": "none", "checksum": "" },
      "tags": [],
      "refs": [["dim_customers"]],
      "sources": [],
      "metrics": [],
      "description": "",
      "columns": {},
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "compiled_path": null,
      "build_path": null,
      "deferred": false,
      "unrendered_config": {},
      "created_at": 1665426351.6385322,
      "column_name": "market_segment",
      "file_key_name": "models.dim_customers"
    },
    "test.tpch.not_null_dim_customers_market_segment.5800ff84dd": {
      "test_metadata": {
        "name": "not_null",
        "kwargs": {
          "column_name": "market_segment",
          "model": "{{ get_where_subquery(ref('dim_customers')) }}"
        },
        "namespace": null
      },
      "resource_type": "test",
      "depends_on": {
        "macros": ["macro.dbt.test_not_null"],
        "nodes": ["model.tpch.dim_customers"]
      },
      "config": {
        "enabled": true,
        "alias": null,
        "schema": "dbt_test__audit",
        "database": null,
        "tags": [],
        "meta": {},
        "materialized": "test",
        "severity": "ERROR",
        "store_failures": null,
        "where": null,
        "limit": null,
        "fail_calc": "count(*)",
        "warn_if": "!= 0",
        "error_if": "!= 0"
      },
      "database": "ANALYTICS",
      "schema": "dbt_sung_dbt_test__audit",
      "fqn": ["tpch", "marts", "core", "not_null_dim_customers_market_segment"],
      "unique_id": "test.tpch.not_null_dim_customers_market_segment.5800ff84dd",
      "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}",
      "language": "sql",
      "package_name": "tpch",
      "root_path": "/Users/sung/Desktop/dbt/dbt_env",
      "path": "not_null_dim_customers_market_segment.sql",
      "original_file_path": "models/marts/core/core.yml",
      "name": "not_null_dim_customers_market_segment",
      "alias": "not_null_dim_customers_market_segment",
      "checksum": { "name": "none", "checksum": "" },
      "tags": [],
      "refs": [["dim_customers"]],
      "sources": [],
      "metrics": [],
      "description": "",
      "columns": {},
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "compiled_path": null,
      "build_path": null,
      "deferred": false,
      "unrendered_config": {},
      "created_at": 1665426351.6403258,
      "column_name": "market_segment",
      "file_key_name": "models.dim_customers"
    },
    "test.tpch.unique_dim_parts_part_key.712df18d58": {
      "test_metadata": {
        "name": "unique",
        "kwargs": {
          "column_name": "part_key",
          "model": "{{ get_where_subquery(ref('dim_parts')) }}"
        },
        "namespace": null
      },
      "resource_type": "test",
      "depends_on": {
        "macros": ["macro.dbt.test_unique"],
        "nodes": ["model.tpch.dim_parts"]
      },
      "config": {
        "enabled": true,
        "alias": null,
        "schema": "dbt_test__audit",
        "database": null,
        "tags": [],
        "meta": {},
        "materialized": "test",
        "severity": "ERROR",
        "store_failures": null,
        "where": null,
        "limit": null,
        "fail_calc": "count(*)",
        "warn_if": "!= 0",
        "error_if": "!= 0"
      },
      "database": "ANALYTICS",
      "schema": "dbt_sung_dbt_test__audit",
      "fqn": ["tpch", "marts", "core", "unique_dim_parts_part_key"],
      "unique_id": "test.tpch.unique_dim_parts_part_key.712df18d58",
      "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}",
      "language": "sql",
      "package_name": "tpch",
      "root_path": "/Users/sung/Desktop/dbt/dbt_env",
      "path": "unique_dim_parts_part_key.sql",
      "original_file_path": "models/marts/core/core.yml",
      "name": "unique_dim_parts_part_key",
      "alias": "unique_dim_parts_part_key",
      "checksum": { "name": "none", "checksum": "" },
      "tags": [],
      "refs": [["dim_parts"]],
      "sources": [],
      "metrics": [],
      "description": "",
      "columns": {},
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "compiled_path": null,
      "build_path": null,
      "deferred": false,
      "unrendered_config": {},
      "created_at": 1665426351.642851,
      "column_name": "part_key",
      "file_key_name": "models.dim_parts"
    },
    "test.tpch.not_null_dim_parts_part_key.4358f880d9": {
      "test_metadata": {
        "name": "not_null",
        "kwargs": {
          "column_name": "part_key",
          "model": "{{ get_where_subquery(ref('dim_parts')) }}"
        },
        "namespace": null
      },
      "resource_type": "test",
      "depends_on": {
        "macros": ["macro.dbt.test_not_null"],
        "nodes": ["model.tpch.dim_parts"]
      },
      "config": {
        "enabled": true,
        "alias": null,
        "schema": "dbt_test__audit",
        "database": null,
        "tags": [],
        "meta": {},
        "materialized": "test",
        "severity": "ERROR",
        "store_failures": null,
        "where": null,
        "limit": null,
        "fail_calc": "count(*)",
        "warn_if": "!= 0",
        "error_if": "!= 0"
      },
      "database": "ANALYTICS",
      "schema": "dbt_sung_dbt_test__audit",
      "fqn": ["tpch", "marts", "core", "not_null_dim_parts_part_key"],
      "unique_id": "test.tpch.not_null_dim_parts_part_key.4358f880d9",
      "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}",
      "language": "sql",
      "package_name": "tpch",
      "root_path": "/Users/sung/Desktop/dbt/dbt_env",
      "path": "not_null_dim_parts_part_key.sql",
      "original_file_path": "models/marts/core/core.yml",
      "name": "not_null_dim_parts_part_key",
      "alias": "not_null_dim_parts_part_key",
      "checksum": { "name": "none", "checksum": "" },
      "tags": [],
      "refs": [["dim_parts"]],
      "sources": [],
      "metrics": [],
      "description": "",
      "columns": {},
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "compiled_path": null,
      "build_path": null,
      "deferred": false,
      "unrendered_config": {},
      "created_at": 1665426351.646013,
      "column_name": "part_key",
      "file_key_name": "models.dim_parts"
    },
    "test.tpch.unique_dim_suppliers_supplier_key.58fc3e4770": {
      "test_metadata": {
        "name": "unique",
        "kwargs": {
          "column_name": "supplier_key",
          "model": "{{ get_where_subquery(ref('dim_suppliers')) }}"
        },
        "namespace": null
      },
      "resource_type": "test",
      "depends_on": {
        "macros": ["macro.dbt.test_unique"],
        "nodes": ["model.tpch.dim_suppliers"]
      },
      "config": {
        "enabled": true,
        "alias": null,
        "schema": "dbt_test__audit",
        "database": null,
        "tags": [],
        "meta": {},
        "materialized": "test",
        "severity": "ERROR",
        "store_failures": null,
        "where": null,
        "limit": null,
        "fail_calc": "count(*)",
        "warn_if": "!= 0",
        "error_if": "!= 0"
      },
      "database": "ANALYTICS",
      "schema": "dbt_sung_dbt_test__audit",
      "fqn": ["tpch", "marts", "core", "unique_dim_suppliers_supplier_key"],
      "unique_id": "test.tpch.unique_dim_suppliers_supplier_key.58fc3e4770",
      "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}",
      "language": "sql",
      "package_name": "tpch",
      "root_path": "/Users/sung/Desktop/dbt/dbt_env",
      "path": "unique_dim_suppliers_supplier_key.sql",
      "original_file_path": "models/marts/core/core.yml",
      "name": "unique_dim_suppliers_supplier_key",
      "alias": "unique_dim_suppliers_supplier_key",
      "checksum": { "name": "none", "checksum": "" },
      "tags": [],
      "refs": [["dim_suppliers"]],
      "sources": [],
      "metrics": [],
      "description": "",
      "columns": {},
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "compiled_path": null,
      "build_path": null,
      "deferred": false,
      "unrendered_config": {},
      "created_at": 1665426351.647926,
      "column_name": "supplier_key",
      "file_key_name": "models.dim_suppliers"
    },
    "test.tpch.not_null_dim_suppliers_supplier_key.4315350956": {
      "test_metadata": {
        "name": "not_null",
        "kwargs": {
          "column_name": "supplier_key",
          "model": "{{ get_where_subquery(ref('dim_suppliers')) }}"
        },
        "namespace": null
      },
      "resource_type": "test",
      "depends_on": {
        "macros": ["macro.dbt.test_not_null"],
        "nodes": ["model.tpch.dim_suppliers"]
      },
      "config": {
        "enabled": true,
        "alias": null,
        "schema": "dbt_test__audit",
        "database": null,
        "tags": [],
        "meta": {},
        "materialized": "test",
        "severity": "ERROR",
        "store_failures": null,
        "where": null,
        "limit": null,
        "fail_calc": "count(*)",
        "warn_if": "!= 0",
        "error_if": "!= 0"
      },
      "database": "ANALYTICS",
      "schema": "dbt_sung_dbt_test__audit",
      "fqn": ["tpch", "marts", "core", "not_null_dim_suppliers_supplier_key"],
      "unique_id": "test.tpch.not_null_dim_suppliers_supplier_key.4315350956",
      "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}",
      "language": "sql",
      "package_name": "tpch",
      "root_path": "/Users/sung/Desktop/dbt/dbt_env",
      "path": "not_null_dim_suppliers_supplier_key.sql",
      "original_file_path": "models/marts/core/core.yml",
      "name": "not_null_dim_suppliers_supplier_key",
      "alias": "not_null_dim_suppliers_supplier_key",
      "checksum": { "name": "none", "checksum": "" },
      "tags": [],
      "refs": [["dim_suppliers"]],
      "sources": [],
      "metrics": [],
      "description": "",
      "columns": {},
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "compiled_path": null,
      "build_path": null,
      "deferred": false,
      "unrendered_config": {},
      "created_at": 1665426351.6497972,
      "column_name": "supplier_key",
      "file_key_name": "models.dim_suppliers"
    },
    "test.tpch.unique_fct_order_items_order_item_key.4d6426a255": {
      "test_metadata": {
        "name": "unique",
        "kwargs": {
          "column_name": "order_item_key",
          "model": "{{ get_where_subquery(ref('fct_order_items')) }}"
        },
        "namespace": null
      },
      "resource_type": "test",
      "depends_on": {
        "macros": ["macro.dbt.test_unique"],
        "nodes": ["model.tpch.fct_order_items"]
      },
      "config": {
        "enabled": true,
        "alias": null,
        "schema": "dbt_test__audit",
        "database": null,
        "tags": [],
        "meta": {},
        "materialized": "test",
        "severity": "ERROR",
        "store_failures": null,
        "where": null,
        "limit": null,
        "fail_calc": "count(*)",
        "warn_if": "!= 0",
        "error_if": "!= 0"
      },
      "database": "ANALYTICS",
      "schema": "dbt_sung_dbt_test__audit",
      "fqn": ["tpch", "marts", "core", "unique_fct_order_items_order_item_key"],
      "unique_id": "test.tpch.unique_fct_order_items_order_item_key.4d6426a255",
      "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}",
      "language": "sql",
      "package_name": "tpch",
      "root_path": "/Users/sung/Desktop/dbt/dbt_env",
      "path": "unique_fct_order_items_order_item_key.sql",
      "original_file_path": "models/marts/core/core.yml",
      "name": "unique_fct_order_items_order_item_key",
      "alias": "unique_fct_order_items_order_item_key",
      "checksum": { "name": "none", "checksum": "" },
      "tags": [],
      "refs": [["fct_order_items"]],
      "sources": [],
      "metrics": [],
      "description": "",
      "columns": {},
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "compiled_path": null,
      "build_path": null,
      "deferred": false,
      "unrendered_config": {},
      "created_at": 1665426351.652077,
      "column_name": "order_item_key",
      "file_key_name": "models.fct_order_items"
    },
    "test.tpch.not_null_fct_order_items_order_item_key.47516a6371": {
      "test_metadata": {
        "name": "not_null",
        "kwargs": {
          "column_name": "order_item_key",
          "model": "{{ get_where_subquery(ref('fct_order_items')) }}"
        },
        "namespace": null
      },
      "resource_type": "test",
      "depends_on": {
        "macros": ["macro.dbt.test_not_null"],
        "nodes": ["model.tpch.fct_order_items"]
      },
      "config": {
        "enabled": true,
        "alias": null,
        "schema": "dbt_test__audit",
        "database": null,
        "tags": [],
        "meta": {},
        "materialized": "test",
        "severity": "ERROR",
        "store_failures": null,
        "where": null,
        "limit": null,
        "fail_calc": "count(*)",
        "warn_if": "!= 0",
        "error_if": "!= 0"
      },
      "database": "ANALYTICS",
      "schema": "dbt_sung_dbt_test__audit",
      "fqn": [
        "tpch",
        "marts",
        "core",
        "not_null_fct_order_items_order_item_key"
      ],
      "unique_id": "test.tpch.not_null_fct_order_items_order_item_key.47516a6371",
      "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}",
      "language": "sql",
      "package_name": "tpch",
      "root_path": "/Users/sung/Desktop/dbt/dbt_env",
      "path": "not_null_fct_order_items_order_item_key.sql",
      "original_file_path": "models/marts/core/core.yml",
      "name": "not_null_fct_order_items_order_item_key",
      "alias": "not_null_fct_order_items_order_item_key",
      "checksum": { "name": "none", "checksum": "" },
      "tags": [],
      "refs": [["fct_order_items"]],
      "sources": [],
      "metrics": [],
      "description": "",
      "columns": {},
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "compiled_path": null,
      "build_path": null,
      "deferred": false,
      "unrendered_config": {},
      "created_at": 1665426351.6542258,
      "column_name": "order_item_key",
      "file_key_name": "models.fct_order_items"
    },
    "test.tpch.unique_fct_orders_order_key.f5e7a90273": {
      "test_metadata": {
        "name": "unique",
        "kwargs": {
          "column_name": "order_key",
          "model": "{{ get_where_subquery(ref('fct_orders')) }}"
        },
        "namespace": null
      },
      "resource_type": "test",
      "depends_on": {
        "macros": ["macro.dbt.test_unique"],
        "nodes": ["model.tpch.fct_orders"]
      },
      "config": {
        "enabled": true,
        "alias": null,
        "schema": "dbt_test__audit",
        "database": null,
        "tags": [],
        "meta": {},
        "materialized": "test",
        "severity": "ERROR",
        "store_failures": null,
        "where": null,
        "limit": null,
        "fail_calc": "count(*)",
        "warn_if": "!= 0",
        "error_if": "!= 0"
      },
      "database": "ANALYTICS",
      "schema": "dbt_sung_dbt_test__audit",
      "fqn": ["tpch", "marts", "core", "unique_fct_orders_order_key"],
      "unique_id": "test.tpch.unique_fct_orders_order_key.f5e7a90273",
      "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}",
      "language": "sql",
      "package_name": "tpch",
      "root_path": "/Users/sung/Desktop/dbt/dbt_env",
      "path": "unique_fct_orders_order_key.sql",
      "original_file_path": "models/marts/core/core.yml",
      "name": "unique_fct_orders_order_key",
      "alias": "unique_fct_orders_order_key",
      "checksum": { "name": "none", "checksum": "" },
      "tags": [],
      "refs": [["fct_orders"]],
      "sources": [],
      "metrics": [],
      "description": "",
      "columns": {},
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "compiled_path": null,
      "build_path": null,
      "deferred": false,
      "unrendered_config": {},
      "created_at": 1665426351.6567528,
      "column_name": "order_key",
      "file_key_name": "models.fct_orders"
    },
    "test.tpch.not_null_fct_orders_order_key.6a6f83ab15": {
      "test_metadata": {
        "name": "not_null",
        "kwargs": {
          "column_name": "order_key",
          "model": "{{ get_where_subquery(ref('fct_orders')) }}"
        },
        "namespace": null
      },
      "resource_type": "test",
      "depends_on": {
        "macros": ["macro.dbt.test_not_null"],
        "nodes": ["model.tpch.fct_orders"]
      },
      "config": {
        "enabled": true,
        "alias": null,
        "schema": "dbt_test__audit",
        "database": null,
        "tags": [],
        "meta": {},
        "materialized": "test",
        "severity": "ERROR",
        "store_failures": null,
        "where": null,
        "limit": null,
        "fail_calc": "count(*)",
        "warn_if": "!= 0",
        "error_if": "!= 0"
      },
      "database": "ANALYTICS",
      "schema": "dbt_sung_dbt_test__audit",
      "fqn": ["tpch", "marts", "core", "not_null_fct_orders_order_key"],
      "unique_id": "test.tpch.not_null_fct_orders_order_key.6a6f83ab15",
      "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}",
      "language": "sql",
      "package_name": "tpch",
      "root_path": "/Users/sung/Desktop/dbt/dbt_env",
      "path": "not_null_fct_orders_order_key.sql",
      "original_file_path": "models/marts/core/core.yml",
      "name": "not_null_fct_orders_order_key",
      "alias": "not_null_fct_orders_order_key",
      "checksum": { "name": "none", "checksum": "" },
      "tags": [],
      "refs": [["fct_orders"]],
      "sources": [],
      "metrics": [],
      "description": "",
      "columns": {},
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "compiled_path": null,
      "build_path": null,
      "deferred": false,
      "unrendered_config": {},
      "created_at": 1665426351.6591392,
      "column_name": "order_key",
      "file_key_name": "models.fct_orders"
    },
    "test.tpch.relationships_fct_orders_customer_key__customer_key__ref_dim_customers_.018eb0a60b": {
      "test_metadata": {
        "name": "relationships",
        "kwargs": {
          "to": "ref('dim_customers')",
          "field": "customer_key",
          "column_name": "customer_key",
          "model": "{{ get_where_subquery(ref('fct_orders')) }}"
        },
        "namespace": null
      },
      "resource_type": "test",
      "depends_on": {
        "macros": [
          "macro.dbt.test_relationships",
          "macro.dbt.get_where_subquery"
        ],
        "nodes": ["model.tpch.dim_customers", "model.tpch.fct_orders"]
      },
      "config": {
        "enabled": true,
        "alias": "relationships_fct_orders_01863b95ad98bb6a66c90da6f065c2ae",
        "schema": "dbt_test__audit",
        "database": null,
        "tags": [],
        "meta": {},
        "materialized": "test",
        "severity": "error",
        "store_failures": null,
        "where": null,
        "limit": null,
        "fail_calc": "count(*)",
        "warn_if": "!= 0",
        "error_if": "!= 0"
      },
      "database": "ANALYTICS",
      "schema": "dbt_sung_dbt_test__audit",
      "fqn": [
        "tpch",
        "marts",
        "core",
        "relationships_fct_orders_customer_key__customer_key__ref_dim_customers_"
      ],
      "unique_id": "test.tpch.relationships_fct_orders_customer_key__customer_key__ref_dim_customers_.018eb0a60b",
      "raw_code": "{{ test_relationships(**_dbt_generic_test_kwargs) }}{{ config(severity=\"error\",alias=\"relationships_fct_orders_01863b95ad98bb6a66c90da6f065c2ae\") }}",
      "language": "sql",
      "package_name": "tpch",
      "root_path": "/Users/sung/Desktop/dbt/dbt_env",
      "path": "relationships_fct_orders_01863b95ad98bb6a66c90da6f065c2ae.sql",
      "original_file_path": "models/marts/core/core.yml",
      "name": "relationships_fct_orders_customer_key__customer_key__ref_dim_customers_",
      "alias": "relationships_fct_orders_01863b95ad98bb6a66c90da6f065c2ae",
      "checksum": { "name": "none", "checksum": "" },
      "tags": [],
      "refs": [["dim_customers"], ["fct_orders"]],
      "sources": [],
      "metrics": [],
      "description": "",
      "columns": {},
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "compiled_path": null,
      "build_path": null,
      "deferred": false,
      "unrendered_config": {
        "severity": "error",
        "alias": "relationships_fct_orders_01863b95ad98bb6a66c90da6f065c2ae"
      },
      "created_at": 1665426351.662737,
      "column_name": "customer_key",
      "file_key_name": "models.fct_orders"
    },
    "test.tpch.unique_order_items_order_item_key.43a40b2837": {
      "test_metadata": {
        "name": "unique",
        "kwargs": {
          "column_name": "order_item_key",
          "model": "{{ get_where_subquery(ref('order_items')) }}"
        },
        "namespace": null
      },
      "resource_type": "test",
      "depends_on": {
        "macros": ["macro.dbt.test_unique"],
        "nodes": ["model.tpch.order_items"]
      },
      "config": {
        "enabled": true,
        "alias": null,
        "schema": "dbt_test__audit",
        "database": null,
        "tags": [],
        "meta": {},
        "materialized": "test",
        "severity": "ERROR",
        "store_failures": null,
        "where": null,
        "limit": null,
        "fail_calc": "count(*)",
        "warn_if": "!= 0",
        "error_if": "!= 0"
      },
      "database": "ANALYTICS",
      "schema": "dbt_sung_dbt_test__audit",
      "fqn": [
        "tpch",
        "marts",
        "intermediate",
        "unique_order_items_order_item_key"
      ],
      "unique_id": "test.tpch.unique_order_items_order_item_key.43a40b2837",
      "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}",
      "language": "sql",
      "package_name": "tpch",
      "root_path": "/Users/sung/Desktop/dbt/dbt_env",
      "path": "unique_order_items_order_item_key.sql",
      "original_file_path": "models/marts/intermediate/intermediate.yml",
      "name": "unique_order_items_order_item_key",
      "alias": "unique_order_items_order_item_key",
      "checksum": { "name": "none", "checksum": "" },
      "tags": [],
      "refs": [["order_items"]],
      "sources": [],
      "metrics": [],
      "description": "",
      "columns": {},
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "compiled_path": null,
      "build_path": null,
      "deferred": false,
      "unrendered_config": {},
      "created_at": 1665426351.703029,
      "column_name": "order_item_key",
      "file_key_name": "models.order_items"
    },
    "test.tpch.not_null_order_items_order_item_key.44b9fa7311": {
      "test_metadata": {
        "name": "not_null",
        "kwargs": {
          "column_name": "order_item_key",
          "model": "{{ get_where_subquery(ref('order_items')) }}"
        },
        "namespace": null
      },
      "resource_type": "test",
      "depends_on": {
        "macros": ["macro.dbt.test_not_null"],
        "nodes": ["model.tpch.order_items"]
      },
      "config": {
        "enabled": true,
        "alias": null,
        "schema": "dbt_test__audit",
        "database": null,
        "tags": [],
        "meta": {},
        "materialized": "test",
        "severity": "ERROR",
        "store_failures": null,
        "where": null,
        "limit": null,
        "fail_calc": "count(*)",
        "warn_if": "!= 0",
        "error_if": "!= 0"
      },
      "database": "ANALYTICS",
      "schema": "dbt_sung_dbt_test__audit",
      "fqn": [
        "tpch",
        "marts",
        "intermediate",
        "not_null_order_items_order_item_key"
      ],
      "unique_id": "test.tpch.not_null_order_items_order_item_key.44b9fa7311",
      "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}",
      "language": "sql",
      "package_name": "tpch",
      "root_path": "/Users/sung/Desktop/dbt/dbt_env",
      "path": "not_null_order_items_order_item_key.sql",
      "original_file_path": "models/marts/intermediate/intermediate.yml",
      "name": "not_null_order_items_order_item_key",
      "alias": "not_null_order_items_order_item_key",
      "checksum": { "name": "none", "checksum": "" },
      "tags": [],
      "refs": [["order_items"]],
      "sources": [],
      "metrics": [],
      "description": "",
      "columns": {},
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "compiled_path": null,
      "build_path": null,
      "deferred": false,
      "unrendered_config": {},
      "created_at": 1665426351.705083,
      "column_name": "order_item_key",
      "file_key_name": "models.order_items"
    },
    "test.tpch.unique_part_suppliers_part_supplier_key.909477afa8": {
      "test_metadata": {
        "name": "unique",
        "kwargs": {
          "column_name": "part_supplier_key",
          "model": "{{ get_where_subquery(ref('part_suppliers')) }}"
        },
        "namespace": null
      },
      "resource_type": "test",
      "depends_on": {
        "macros": ["macro.dbt.test_unique"],
        "nodes": ["model.tpch.part_suppliers"]
      },
      "config": {
        "enabled": true,
        "alias": null,
        "schema": "dbt_test__audit",
        "database": null,
        "tags": [],
        "meta": {},
        "materialized": "test",
        "severity": "ERROR",
        "store_failures": null,
        "where": null,
        "limit": null,
        "fail_calc": "count(*)",
        "warn_if": "!= 0",
        "error_if": "!= 0"
      },
      "database": "ANALYTICS",
      "schema": "dbt_sung_dbt_test__audit",
      "fqn": [
        "tpch",
        "marts",
        "intermediate",
        "unique_part_suppliers_part_supplier_key"
      ],
      "unique_id": "test.tpch.unique_part_suppliers_part_supplier_key.909477afa8",
      "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}",
      "language": "sql",
      "package_name": "tpch",
      "root_path": "/Users/sung/Desktop/dbt/dbt_env",
      "path": "unique_part_suppliers_part_supplier_key.sql",
      "original_file_path": "models/marts/intermediate/intermediate.yml",
      "name": "unique_part_suppliers_part_supplier_key",
      "alias": "unique_part_suppliers_part_supplier_key",
      "checksum": { "name": "none", "checksum": "" },
      "tags": [],
      "refs": [["part_suppliers"]],
      "sources": [],
      "metrics": [],
      "description": "",
      "columns": {},
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "compiled_path": null,
      "build_path": null,
      "deferred": false,
      "unrendered_config": {},
      "created_at": 1665426351.7067509,
      "column_name": "part_supplier_key",
      "file_key_name": "models.part_suppliers"
    },
    "test.tpch.not_null_part_suppliers_part_supplier_key.b8b2022ed3": {
      "test_metadata": {
        "name": "not_null",
        "kwargs": {
          "column_name": "part_supplier_key",
          "model": "{{ get_where_subquery(ref('part_suppliers')) }}"
        },
        "namespace": null
      },
      "resource_type": "test",
      "depends_on": {
        "macros": ["macro.dbt.test_not_null"],
        "nodes": ["model.tpch.part_suppliers"]
      },
      "config": {
        "enabled": true,
        "alias": null,
        "schema": "dbt_test__audit",
        "database": null,
        "tags": [],
        "meta": {},
        "materialized": "test",
        "severity": "ERROR",
        "store_failures": null,
        "where": null,
        "limit": null,
        "fail_calc": "count(*)",
        "warn_if": "!= 0",
        "error_if": "!= 0"
      },
      "database": "ANALYTICS",
      "schema": "dbt_sung_dbt_test__audit",
      "fqn": [
        "tpch",
        "marts",
        "intermediate",
        "not_null_part_suppliers_part_supplier_key"
      ],
      "unique_id": "test.tpch.not_null_part_suppliers_part_supplier_key.b8b2022ed3",
      "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}",
      "language": "sql",
      "package_name": "tpch",
      "root_path": "/Users/sung/Desktop/dbt/dbt_env",
      "path": "not_null_part_suppliers_part_supplier_key.sql",
      "original_file_path": "models/marts/intermediate/intermediate.yml",
      "name": "not_null_part_suppliers_part_supplier_key",
      "alias": "not_null_part_suppliers_part_supplier_key",
      "checksum": { "name": "none", "checksum": "" },
      "tags": [],
      "refs": [["part_suppliers"]],
      "sources": [],
      "metrics": [],
      "description": "",
      "columns": {},
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "compiled_path": null,
      "build_path": null,
      "deferred": false,
      "unrendered_config": {},
      "created_at": 1665426351.710028,
      "column_name": "part_supplier_key",
      "file_key_name": "models.part_suppliers"
    },
    "test.tpch.unique_materialization_incremental_customer_key.325783f327": {
      "test_metadata": {
        "name": "unique",
        "kwargs": {
          "column_name": "customer_key",
          "model": "{{ get_where_subquery(ref('materialization_incremental')) }}"
        },
        "namespace": null
      },
      "resource_type": "test",
      "depends_on": {
        "macros": ["macro.dbt.test_unique"],
        "nodes": ["model.tpch.materialization_incremental"]
      },
      "config": {
        "enabled": true,
        "alias": null,
        "schema": "dbt_test__audit",
        "database": null,
        "tags": [],
        "meta": {},
        "materialized": "test",
        "severity": "ERROR",
        "store_failures": null,
        "where": null,
        "limit": null,
        "fail_calc": "count(*)",
        "warn_if": "!= 0",
        "error_if": "!= 0"
      },
      "database": "ANALYTICS",
      "schema": "dbt_sung_dbt_test__audit",
      "fqn": [
        "tpch",
        "demo_examples",
        "unique_materialization_incremental_customer_key"
      ],
      "unique_id": "test.tpch.unique_materialization_incremental_customer_key.325783f327",
      "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}",
      "language": "sql",
      "package_name": "tpch",
      "root_path": "/Users/sung/Desktop/dbt/dbt_env",
      "path": "unique_materialization_incremental_customer_key.sql",
      "original_file_path": "models/demo_examples/demo_examples.yml",
      "name": "unique_materialization_incremental_customer_key",
      "alias": "unique_materialization_incremental_customer_key",
      "checksum": { "name": "none", "checksum": "" },
      "tags": [],
      "refs": [["materialization_incremental"]],
      "sources": [],
      "metrics": [],
      "description": "",
      "columns": {},
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "compiled_path": null,
      "build_path": null,
      "deferred": false,
      "unrendered_config": {},
      "created_at": 1665426351.740513,
      "column_name": "customer_key",
      "file_key_name": "models.materialization_incremental"
    },
    "test.tpch.not_null_materialization_incremental_customer_key.e2b95d8009": {
      "test_metadata": {
        "name": "not_null",
        "kwargs": {
          "column_name": "customer_key",
          "model": "{{ get_where_subquery(ref('materialization_incremental')) }}"
        },
        "namespace": null
      },
      "resource_type": "test",
      "depends_on": {
        "macros": ["macro.dbt.test_not_null"],
        "nodes": ["model.tpch.materialization_incremental"]
      },
      "config": {
        "enabled": true,
        "alias": null,
        "schema": "dbt_test__audit",
        "database": null,
        "tags": [],
        "meta": {},
        "materialized": "test",
        "severity": "ERROR",
        "store_failures": null,
        "where": null,
        "limit": null,
        "fail_calc": "count(*)",
        "warn_if": "!= 0",
        "error_if": "!= 0"
      },
      "database": "ANALYTICS",
      "schema": "dbt_sung_dbt_test__audit",
      "fqn": [
        "tpch",
        "demo_examples",
        "not_null_materialization_incremental_customer_key"
      ],
      "unique_id": "test.tpch.not_null_materialization_incremental_customer_key.e2b95d8009",
      "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}",
      "language": "sql",
      "package_name": "tpch",
      "root_path": "/Users/sung/Desktop/dbt/dbt_env",
      "path": "not_null_materialization_incremental_customer_key.sql",
      "original_file_path": "models/demo_examples/demo_examples.yml",
      "name": "not_null_materialization_incremental_customer_key",
      "alias": "not_null_materialization_incremental_customer_key",
      "checksum": { "name": "none", "checksum": "" },
      "tags": [],
      "refs": [["materialization_incremental"]],
      "sources": [],
      "metrics": [],
      "description": "",
      "columns": {},
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "compiled_path": null,
      "build_path": null,
      "deferred": false,
      "unrendered_config": {},
      "created_at": 1665426351.743305,
      "column_name": "customer_key",
      "file_key_name": "models.materialization_incremental"
    },
    "test.tpch.unique_use_variables_order_item_key.fb5576fe0e": {
      "test_metadata": {
        "name": "unique",
        "kwargs": {
          "column_name": "order_item_key",
          "model": "{{ get_where_subquery(ref('use_variables')) }}"
        },
        "namespace": null
      },
      "resource_type": "test",
      "depends_on": {
        "macros": ["macro.dbt.test_unique"],
        "nodes": ["model.tpch.use_variables"]
      },
      "config": {
        "enabled": true,
        "alias": null,
        "schema": "dbt_test__audit",
        "database": null,
        "tags": [],
        "meta": {},
        "materialized": "test",
        "severity": "ERROR",
        "store_failures": null,
        "where": null,
        "limit": null,
        "fail_calc": "count(*)",
        "warn_if": "!= 0",
        "error_if": "!= 0"
      },
      "database": "ANALYTICS",
      "schema": "dbt_sung_dbt_test__audit",
      "fqn": ["tpch", "demo_examples", "unique_use_variables_order_item_key"],
      "unique_id": "test.tpch.unique_use_variables_order_item_key.fb5576fe0e",
      "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}",
      "language": "sql",
      "package_name": "tpch",
      "root_path": "/Users/sung/Desktop/dbt/dbt_env",
      "path": "unique_use_variables_order_item_key.sql",
      "original_file_path": "models/demo_examples/demo_examples.yml",
      "name": "unique_use_variables_order_item_key",
      "alias": "unique_use_variables_order_item_key",
      "checksum": { "name": "none", "checksum": "" },
      "tags": [],
      "refs": [["use_variables"]],
      "sources": [],
      "metrics": [],
      "description": "",
      "columns": {},
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "compiled_path": null,
      "build_path": null,
      "deferred": false,
      "unrendered_config": {},
      "created_at": 1665426351.74601,
      "column_name": "order_item_key",
      "file_key_name": "models.use_variables"
    },
    "test.tpch.not_null_use_variables_order_item_key.c2bd602686": {
      "test_metadata": {
        "name": "not_null",
        "kwargs": {
          "column_name": "order_item_key",
          "model": "{{ get_where_subquery(ref('use_variables')) }}"
        },
        "namespace": null
      },
      "resource_type": "test",
      "depends_on": {
        "macros": ["macro.dbt.test_not_null"],
        "nodes": ["model.tpch.use_variables"]
      },
      "config": {
        "enabled": true,
        "alias": null,
        "schema": "dbt_test__audit",
        "database": null,
        "tags": [],
        "meta": {},
        "materialized": "test",
        "severity": "ERROR",
        "store_failures": null,
        "where": null,
        "limit": null,
        "fail_calc": "count(*)",
        "warn_if": "!= 0",
        "error_if": "!= 0"
      },
      "database": "ANALYTICS",
      "schema": "dbt_sung_dbt_test__audit",
      "fqn": ["tpch", "demo_examples", "not_null_use_variables_order_item_key"],
      "unique_id": "test.tpch.not_null_use_variables_order_item_key.c2bd602686",
      "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}",
      "language": "sql",
      "package_name": "tpch",
      "root_path": "/Users/sung/Desktop/dbt/dbt_env",
      "path": "not_null_use_variables_order_item_key.sql",
      "original_file_path": "models/demo_examples/demo_examples.yml",
      "name": "not_null_use_variables_order_item_key",
      "alias": "not_null_use_variables_order_item_key",
      "checksum": { "name": "none", "checksum": "" },
      "tags": [],
      "refs": [["use_variables"]],
      "sources": [],
      "metrics": [],
      "description": "",
      "columns": {},
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "compiled_path": null,
      "build_path": null,
      "deferred": false,
      "unrendered_config": {},
      "created_at": 1665426351.748242,
      "column_name": "order_item_key",
      "file_key_name": "models.use_variables"
    },
    "test.dbt_artifacts.unique_fct_dbt__critical_path_node_id.a430b9cf10": {
      "test_metadata": {
        "name": "unique",
        "kwargs": {
          "column_name": "node_id",
          "model": "{{ get_where_subquery(ref('fct_dbt__critical_path')) }}"
        },
        "namespace": null
      },
      "resource_type": "test",
      "depends_on": {
        "macros": ["macro.dbt.test_unique"],
        "nodes": ["model.dbt_artifacts.fct_dbt__critical_path"]
      },
      "config": {
        "enabled": true,
        "alias": null,
        "schema": "dbt_test__audit",
        "database": null,
        "tags": [],
        "meta": {},
        "materialized": "test",
        "severity": "ERROR",
        "store_failures": null,
        "where": null,
        "limit": null,
        "fail_calc": "count(*)",
        "warn_if": "!= 0",
        "error_if": "!= 0"
      },
      "database": "ANALYTICS",
      "schema": "dbt_sung_dbt_test__audit",
      "fqn": ["dbt_artifacts", "unique_fct_dbt__critical_path_node_id"],
      "unique_id": "test.dbt_artifacts.unique_fct_dbt__critical_path_node_id.a430b9cf10",
      "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}",
      "language": "sql",
      "package_name": "dbt_artifacts",
      "root_path": "/Users/sung/Desktop/dbt/dbt_env/dbt_packages/dbt_artifacts",
      "path": "unique_fct_dbt__critical_path_node_id.sql",
      "original_file_path": "models/schemas.yml",
      "name": "unique_fct_dbt__critical_path_node_id",
      "alias": "unique_fct_dbt__critical_path_node_id",
      "checksum": { "name": "none", "checksum": "" },
      "tags": [],
      "refs": [["fct_dbt__critical_path"]],
      "sources": [],
      "metrics": [],
      "description": "",
      "columns": {},
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "compiled_path": null,
      "build_path": null,
      "deferred": false,
      "unrendered_config": {},
      "created_at": 1665426351.873301,
      "column_name": "node_id",
      "file_key_name": "models.fct_dbt__critical_path"
    },
    "test.dbt_artifacts.not_null_fct_dbt__critical_path_node_id.8a76d88496": {
      "test_metadata": {
        "name": "not_null",
        "kwargs": {
          "column_name": "node_id",
          "model": "{{ get_where_subquery(ref('fct_dbt__critical_path')) }}"
        },
        "namespace": null
      },
      "resource_type": "test",
      "depends_on": {
        "macros": ["macro.dbt.test_not_null"],
        "nodes": ["model.dbt_artifacts.fct_dbt__critical_path"]
      },
      "config": {
        "enabled": true,
        "alias": null,
        "schema": "dbt_test__audit",
        "database": null,
        "tags": [],
        "meta": {},
        "materialized": "test",
        "severity": "ERROR",
        "store_failures": null,
        "where": null,
        "limit": null,
        "fail_calc": "count(*)",
        "warn_if": "!= 0",
        "error_if": "!= 0"
      },
      "database": "ANALYTICS",
      "schema": "dbt_sung_dbt_test__audit",
      "fqn": ["dbt_artifacts", "not_null_fct_dbt__critical_path_node_id"],
      "unique_id": "test.dbt_artifacts.not_null_fct_dbt__critical_path_node_id.8a76d88496",
      "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}",
      "language": "sql",
      "package_name": "dbt_artifacts",
      "root_path": "/Users/sung/Desktop/dbt/dbt_env/dbt_packages/dbt_artifacts",
      "path": "not_null_fct_dbt__critical_path_node_id.sql",
      "original_file_path": "models/schemas.yml",
      "name": "not_null_fct_dbt__critical_path_node_id",
      "alias": "not_null_fct_dbt__critical_path_node_id",
      "checksum": { "name": "none", "checksum": "" },
      "tags": [],
      "refs": [["fct_dbt__critical_path"]],
      "sources": [],
      "metrics": [],
      "description": "",
      "columns": {},
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "compiled_path": null,
      "build_path": null,
      "deferred": false,
      "unrendered_config": {},
      "created_at": 1665426351.876148,
      "column_name": "node_id",
      "file_key_name": "models.fct_dbt__critical_path"
    },
    "test.dbt_artifacts.unique_fct_dbt__latest_full_model_executions_node_id.b6f2773b6c": {
      "test_metadata": {
        "name": "unique",
        "kwargs": {
          "column_name": "node_id",
          "model": "{{ get_where_subquery(ref('fct_dbt__latest_full_model_executions')) }}"
        },
        "namespace": null
      },
      "resource_type": "test",
      "depends_on": {
        "macros": ["macro.dbt.test_unique"],
        "nodes": ["model.dbt_artifacts.fct_dbt__latest_full_model_executions"]
      },
      "config": {
        "enabled": true,
        "alias": null,
        "schema": "dbt_test__audit",
        "database": null,
        "tags": [],
        "meta": {},
        "materialized": "test",
        "severity": "ERROR",
        "store_failures": null,
        "where": null,
        "limit": null,
        "fail_calc": "count(*)",
        "warn_if": "!= 0",
        "error_if": "!= 0"
      },
      "database": "ANALYTICS",
      "schema": "dbt_sung_dbt_test__audit",
      "fqn": [
        "dbt_artifacts",
        "unique_fct_dbt__latest_full_model_executions_node_id"
      ],
      "unique_id": "test.dbt_artifacts.unique_fct_dbt__latest_full_model_executions_node_id.b6f2773b6c",
      "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}",
      "language": "sql",
      "package_name": "dbt_artifacts",
      "root_path": "/Users/sung/Desktop/dbt/dbt_env/dbt_packages/dbt_artifacts",
      "path": "unique_fct_dbt__latest_full_model_executions_node_id.sql",
      "original_file_path": "models/schemas.yml",
      "name": "unique_fct_dbt__latest_full_model_executions_node_id",
      "alias": "unique_fct_dbt__latest_full_model_executions_node_id",
      "checksum": { "name": "none", "checksum": "" },
      "tags": [],
      "refs": [["fct_dbt__latest_full_model_executions"]],
      "sources": [],
      "metrics": [],
      "description": "",
      "columns": {},
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "compiled_path": null,
      "build_path": null,
      "deferred": false,
      "unrendered_config": {},
      "created_at": 1665426351.879215,
      "column_name": "node_id",
      "file_key_name": "models.fct_dbt__latest_full_model_executions"
    },
    "test.dbt_artifacts.not_null_fct_dbt__latest_full_model_executions_node_id.75b07a2f66": {
      "test_metadata": {
        "name": "not_null",
        "kwargs": {
          "column_name": "node_id",
          "model": "{{ get_where_subquery(ref('fct_dbt__latest_full_model_executions')) }}"
        },
        "namespace": null
      },
      "resource_type": "test",
      "depends_on": {
        "macros": ["macro.dbt.test_not_null"],
        "nodes": ["model.dbt_artifacts.fct_dbt__latest_full_model_executions"]
      },
      "config": {
        "enabled": true,
        "alias": null,
        "schema": "dbt_test__audit",
        "database": null,
        "tags": [],
        "meta": {},
        "materialized": "test",
        "severity": "ERROR",
        "store_failures": null,
        "where": null,
        "limit": null,
        "fail_calc": "count(*)",
        "warn_if": "!= 0",
        "error_if": "!= 0"
      },
      "database": "ANALYTICS",
      "schema": "dbt_sung_dbt_test__audit",
      "fqn": [
        "dbt_artifacts",
        "not_null_fct_dbt__latest_full_model_executions_node_id"
      ],
      "unique_id": "test.dbt_artifacts.not_null_fct_dbt__latest_full_model_executions_node_id.75b07a2f66",
      "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}",
      "language": "sql",
      "package_name": "dbt_artifacts",
      "root_path": "/Users/sung/Desktop/dbt/dbt_env/dbt_packages/dbt_artifacts",
      "path": "not_null_fct_dbt__latest_full_model_executions_node_id.sql",
      "original_file_path": "models/schemas.yml",
      "name": "not_null_fct_dbt__latest_full_model_executions_node_id",
      "alias": "not_null_fct_dbt__latest_full_model_executions_node_id",
      "checksum": { "name": "none", "checksum": "" },
      "tags": [],
      "refs": [["fct_dbt__latest_full_model_executions"]],
      "sources": [],
      "metrics": [],
      "description": "",
      "columns": {},
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "compiled_path": null,
      "build_path": null,
      "deferred": false,
      "unrendered_config": {},
      "created_at": 1665426351.88156,
      "column_name": "node_id",
      "file_key_name": "models.fct_dbt__latest_full_model_executions"
    },
    "test.dbt_artifacts.unique_fct_dbt__model_executions_model_execution_id.ab9f314f59": {
      "test_metadata": {
        "name": "unique",
        "kwargs": {
          "column_name": "model_execution_id",
          "model": "{{ get_where_subquery(ref('fct_dbt__model_executions')) }}"
        },
        "namespace": null
      },
      "resource_type": "test",
      "depends_on": {
        "macros": ["macro.dbt.test_unique"],
        "nodes": ["model.dbt_artifacts.fct_dbt__model_executions"]
      },
      "config": {
        "enabled": true,
        "alias": null,
        "schema": "dbt_test__audit",
        "database": null,
        "tags": [],
        "meta": {},
        "materialized": "test",
        "severity": "ERROR",
        "store_failures": null,
        "where": null,
        "limit": null,
        "fail_calc": "count(*)",
        "warn_if": "!= 0",
        "error_if": "!= 0"
      },
      "database": "ANALYTICS",
      "schema": "dbt_sung_dbt_test__audit",
      "fqn": [
        "dbt_artifacts",
        "unique_fct_dbt__model_executions_model_execution_id"
      ],
      "unique_id": "test.dbt_artifacts.unique_fct_dbt__model_executions_model_execution_id.ab9f314f59",
      "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}",
      "language": "sql",
      "package_name": "dbt_artifacts",
      "root_path": "/Users/sung/Desktop/dbt/dbt_env/dbt_packages/dbt_artifacts",
      "path": "unique_fct_dbt__model_executions_model_execution_id.sql",
      "original_file_path": "models/schemas.yml",
      "name": "unique_fct_dbt__model_executions_model_execution_id",
      "alias": "unique_fct_dbt__model_executions_model_execution_id",
      "checksum": { "name": "none", "checksum": "" },
      "tags": [],
      "refs": [["fct_dbt__model_executions"]],
      "sources": [],
      "metrics": [],
      "description": "",
      "columns": {},
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "compiled_path": null,
      "build_path": null,
      "deferred": false,
      "unrendered_config": {},
      "created_at": 1665426351.8833542,
      "column_name": "model_execution_id",
      "file_key_name": "models.fct_dbt__model_executions"
    },
    "test.dbt_artifacts.not_null_fct_dbt__model_executions_model_execution_id.ecb7ddbb69": {
      "test_metadata": {
        "name": "not_null",
        "kwargs": {
          "column_name": "model_execution_id",
          "model": "{{ get_where_subquery(ref('fct_dbt__model_executions')) }}"
        },
        "namespace": null
      },
      "resource_type": "test",
      "depends_on": {
        "macros": ["macro.dbt.test_not_null"],
        "nodes": ["model.dbt_artifacts.fct_dbt__model_executions"]
      },
      "config": {
        "enabled": true,
        "alias": null,
        "schema": "dbt_test__audit",
        "database": null,
        "tags": [],
        "meta": {},
        "materialized": "test",
        "severity": "ERROR",
        "store_failures": null,
        "where": null,
        "limit": null,
        "fail_calc": "count(*)",
        "warn_if": "!= 0",
        "error_if": "!= 0"
      },
      "database": "ANALYTICS",
      "schema": "dbt_sung_dbt_test__audit",
      "fqn": [
        "dbt_artifacts",
        "not_null_fct_dbt__model_executions_model_execution_id"
      ],
      "unique_id": "test.dbt_artifacts.not_null_fct_dbt__model_executions_model_execution_id.ecb7ddbb69",
      "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}",
      "language": "sql",
      "package_name": "dbt_artifacts",
      "root_path": "/Users/sung/Desktop/dbt/dbt_env/dbt_packages/dbt_artifacts",
      "path": "not_null_fct_dbt__model_executions_model_execution_id.sql",
      "original_file_path": "models/schemas.yml",
      "name": "not_null_fct_dbt__model_executions_model_execution_id",
      "alias": "not_null_fct_dbt__model_executions_model_execution_id",
      "checksum": { "name": "none", "checksum": "" },
      "tags": [],
      "refs": [["fct_dbt__model_executions"]],
      "sources": [],
      "metrics": [],
      "description": "",
      "columns": {},
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "compiled_path": null,
      "build_path": null,
      "deferred": false,
      "unrendered_config": {},
      "created_at": 1665426351.886013,
      "column_name": "model_execution_id",
      "file_key_name": "models.fct_dbt__model_executions"
    },
    "test.dbt_artifacts.unique_fct_dbt__run_results_command_invocation_id.08941b96a3": {
      "test_metadata": {
        "name": "unique",
        "kwargs": {
          "column_name": "command_invocation_id",
          "model": "{{ get_where_subquery(ref('fct_dbt__run_results')) }}"
        },
        "namespace": null
      },
      "resource_type": "test",
      "depends_on": {
        "macros": ["macro.dbt.test_unique"],
        "nodes": ["model.dbt_artifacts.fct_dbt__run_results"]
      },
      "config": {
        "enabled": true,
        "alias": null,
        "schema": "dbt_test__audit",
        "database": null,
        "tags": [],
        "meta": {},
        "materialized": "test",
        "severity": "ERROR",
        "store_failures": null,
        "where": null,
        "limit": null,
        "fail_calc": "count(*)",
        "warn_if": "!= 0",
        "error_if": "!= 0"
      },
      "database": "ANALYTICS",
      "schema": "dbt_sung_dbt_test__audit",
      "fqn": [
        "dbt_artifacts",
        "unique_fct_dbt__run_results_command_invocation_id"
      ],
      "unique_id": "test.dbt_artifacts.unique_fct_dbt__run_results_command_invocation_id.08941b96a3",
      "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}",
      "language": "sql",
      "package_name": "dbt_artifacts",
      "root_path": "/Users/sung/Desktop/dbt/dbt_env/dbt_packages/dbt_artifacts",
      "path": "unique_fct_dbt__run_results_command_invocation_id.sql",
      "original_file_path": "models/schemas.yml",
      "name": "unique_fct_dbt__run_results_command_invocation_id",
      "alias": "unique_fct_dbt__run_results_command_invocation_id",
      "checksum": { "name": "none", "checksum": "" },
      "tags": [],
      "refs": [["fct_dbt__run_results"]],
      "sources": [],
      "metrics": [],
      "description": "",
      "columns": {},
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "compiled_path": null,
      "build_path": null,
      "deferred": false,
      "unrendered_config": {},
      "created_at": 1665426351.887873,
      "column_name": "command_invocation_id",
      "file_key_name": "models.fct_dbt__run_results"
    },
    "test.dbt_artifacts.not_null_fct_dbt__run_results_command_invocation_id.11abc48935": {
      "test_metadata": {
        "name": "not_null",
        "kwargs": {
          "column_name": "command_invocation_id",
          "model": "{{ get_where_subquery(ref('fct_dbt__run_results')) }}"
        },
        "namespace": null
      },
      "resource_type": "test",
      "depends_on": {
        "macros": ["macro.dbt.test_not_null"],
        "nodes": ["model.dbt_artifacts.fct_dbt__run_results"]
      },
      "config": {
        "enabled": true,
        "alias": null,
        "schema": "dbt_test__audit",
        "database": null,
        "tags": [],
        "meta": {},
        "materialized": "test",
        "severity": "ERROR",
        "store_failures": null,
        "where": null,
        "limit": null,
        "fail_calc": "count(*)",
        "warn_if": "!= 0",
        "error_if": "!= 0"
      },
      "database": "ANALYTICS",
      "schema": "dbt_sung_dbt_test__audit",
      "fqn": [
        "dbt_artifacts",
        "not_null_fct_dbt__run_results_command_invocation_id"
      ],
      "unique_id": "test.dbt_artifacts.not_null_fct_dbt__run_results_command_invocation_id.11abc48935",
      "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}",
      "language": "sql",
      "package_name": "dbt_artifacts",
      "root_path": "/Users/sung/Desktop/dbt/dbt_env/dbt_packages/dbt_artifacts",
      "path": "not_null_fct_dbt__run_results_command_invocation_id.sql",
      "original_file_path": "models/schemas.yml",
      "name": "not_null_fct_dbt__run_results_command_invocation_id",
      "alias": "not_null_fct_dbt__run_results_command_invocation_id",
      "checksum": { "name": "none", "checksum": "" },
      "tags": [],
      "refs": [["fct_dbt__run_results"]],
      "sources": [],
      "metrics": [],
      "description": "",
      "columns": {},
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "compiled_path": null,
      "build_path": null,
      "deferred": false,
      "unrendered_config": {},
      "created_at": 1665426351.890142,
      "column_name": "command_invocation_id",
      "file_key_name": "models.fct_dbt__run_results"
    },
    "test.dbt_artifacts.not_null_dim_dbt__exposures_manifest_model_id.1cfdaa0c94": {
      "test_metadata": {
        "name": "not_null",
        "kwargs": {
          "column_name": "manifest_model_id",
          "model": "{{ get_where_subquery(ref('dim_dbt__exposures')) }}"
        },
        "namespace": null
      },
      "resource_type": "test",
      "depends_on": {
        "macros": ["macro.dbt.test_not_null"],
        "nodes": ["model.dbt_artifacts.dim_dbt__exposures"]
      },
      "config": {
        "enabled": true,
        "alias": null,
        "schema": "dbt_test__audit",
        "database": null,
        "tags": [],
        "meta": {},
        "materialized": "test",
        "severity": "ERROR",
        "store_failures": null,
        "where": null,
        "limit": null,
        "fail_calc": "count(*)",
        "warn_if": "!= 0",
        "error_if": "!= 0"
      },
      "database": "ANALYTICS",
      "schema": "dbt_sung_dbt_test__audit",
      "fqn": ["dbt_artifacts", "not_null_dim_dbt__exposures_manifest_model_id"],
      "unique_id": "test.dbt_artifacts.not_null_dim_dbt__exposures_manifest_model_id.1cfdaa0c94",
      "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}",
      "language": "sql",
      "package_name": "dbt_artifacts",
      "root_path": "/Users/sung/Desktop/dbt/dbt_env/dbt_packages/dbt_artifacts",
      "path": "not_null_dim_dbt__exposures_manifest_model_id.sql",
      "original_file_path": "models/schemas.yml",
      "name": "not_null_dim_dbt__exposures_manifest_model_id",
      "alias": "not_null_dim_dbt__exposures_manifest_model_id",
      "checksum": { "name": "none", "checksum": "" },
      "tags": [],
      "refs": [["dim_dbt__exposures"]],
      "sources": [],
      "metrics": [],
      "description": "",
      "columns": {},
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "compiled_path": null,
      "build_path": null,
      "deferred": false,
      "unrendered_config": {},
      "created_at": 1665426351.8922088,
      "column_name": "manifest_model_id",
      "file_key_name": "models.dim_dbt__exposures"
    },
    "test.dbt_artifacts.unique_dim_dbt__exposures_manifest_model_id_output_feeds.b0bf30fb44": {
      "test_metadata": {
        "name": "unique",
        "kwargs": {
          "column_name": "manifest_model_id || '-' || output_feeds",
          "model": "{{ get_where_subquery(ref('dim_dbt__exposures')) }}"
        },
        "namespace": null
      },
      "resource_type": "test",
      "depends_on": {
        "macros": ["macro.dbt.test_unique"],
        "nodes": ["model.dbt_artifacts.dim_dbt__exposures"]
      },
      "config": {
        "enabled": true,
        "alias": null,
        "schema": "dbt_test__audit",
        "database": null,
        "tags": [],
        "meta": {},
        "materialized": "test",
        "severity": "ERROR",
        "store_failures": null,
        "where": null,
        "limit": null,
        "fail_calc": "count(*)",
        "warn_if": "!= 0",
        "error_if": "!= 0"
      },
      "database": "ANALYTICS",
      "schema": "dbt_sung_dbt_test__audit",
      "fqn": [
        "dbt_artifacts",
        "unique_dim_dbt__exposures_manifest_model_id_output_feeds"
      ],
      "unique_id": "test.dbt_artifacts.unique_dim_dbt__exposures_manifest_model_id_output_feeds.b0bf30fb44",
      "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}",
      "language": "sql",
      "package_name": "dbt_artifacts",
      "root_path": "/Users/sung/Desktop/dbt/dbt_env/dbt_packages/dbt_artifacts",
      "path": "unique_dim_dbt__exposures_manifest_model_id_output_feeds.sql",
      "original_file_path": "models/schemas.yml",
      "name": "unique_dim_dbt__exposures_manifest_model_id_output_feeds",
      "alias": "unique_dim_dbt__exposures_manifest_model_id_output_feeds",
      "checksum": { "name": "none", "checksum": "" },
      "tags": [],
      "refs": [["dim_dbt__exposures"]],
      "sources": [],
      "metrics": [],
      "description": "",
      "columns": {},
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "compiled_path": null,
      "build_path": null,
      "deferred": false,
      "unrendered_config": {},
      "created_at": 1665426351.894754,
      "column_name": null,
      "file_key_name": "models.dim_dbt__exposures"
    },
    "test.dbt_artifacts.unique_dim_dbt__models_manifest_model_id.c105319f3e": {
      "test_metadata": {
        "name": "unique",
        "kwargs": {
          "column_name": "manifest_model_id",
          "model": "{{ get_where_subquery(ref('dim_dbt__models')) }}"
        },
        "namespace": null
      },
      "resource_type": "test",
      "depends_on": {
        "macros": ["macro.dbt.test_unique"],
        "nodes": ["model.dbt_artifacts.dim_dbt__models"]
      },
      "config": {
        "enabled": true,
        "alias": null,
        "schema": "dbt_test__audit",
        "database": null,
        "tags": [],
        "meta": {},
        "materialized": "test",
        "severity": "ERROR",
        "store_failures": null,
        "where": null,
        "limit": null,
        "fail_calc": "count(*)",
        "warn_if": "!= 0",
        "error_if": "!= 0"
      },
      "database": "ANALYTICS",
      "schema": "dbt_sung_dbt_test__audit",
      "fqn": ["dbt_artifacts", "unique_dim_dbt__models_manifest_model_id"],
      "unique_id": "test.dbt_artifacts.unique_dim_dbt__models_manifest_model_id.c105319f3e",
      "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}",
      "language": "sql",
      "package_name": "dbt_artifacts",
      "root_path": "/Users/sung/Desktop/dbt/dbt_env/dbt_packages/dbt_artifacts",
      "path": "unique_dim_dbt__models_manifest_model_id.sql",
      "original_file_path": "models/schemas.yml",
      "name": "unique_dim_dbt__models_manifest_model_id",
      "alias": "unique_dim_dbt__models_manifest_model_id",
      "checksum": { "name": "none", "checksum": "" },
      "tags": [],
      "refs": [["dim_dbt__models"]],
      "sources": [],
      "metrics": [],
      "description": "",
      "columns": {},
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "compiled_path": null,
      "build_path": null,
      "deferred": false,
      "unrendered_config": {},
      "created_at": 1665426351.897161,
      "column_name": "manifest_model_id",
      "file_key_name": "models.dim_dbt__models"
    },
    "test.dbt_artifacts.not_null_dim_dbt__models_manifest_model_id.df81d26c60": {
      "test_metadata": {
        "name": "not_null",
        "kwargs": {
          "column_name": "manifest_model_id",
          "model": "{{ get_where_subquery(ref('dim_dbt__models')) }}"
        },
        "namespace": null
      },
      "resource_type": "test",
      "depends_on": {
        "macros": ["macro.dbt.test_not_null"],
        "nodes": ["model.dbt_artifacts.dim_dbt__models"]
      },
      "config": {
        "enabled": true,
        "alias": null,
        "schema": "dbt_test__audit",
        "database": null,
        "tags": [],
        "meta": {},
        "materialized": "test",
        "severity": "ERROR",
        "store_failures": null,
        "where": null,
        "limit": null,
        "fail_calc": "count(*)",
        "warn_if": "!= 0",
        "error_if": "!= 0"
      },
      "database": "ANALYTICS",
      "schema": "dbt_sung_dbt_test__audit",
      "fqn": ["dbt_artifacts", "not_null_dim_dbt__models_manifest_model_id"],
      "unique_id": "test.dbt_artifacts.not_null_dim_dbt__models_manifest_model_id.df81d26c60",
      "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}",
      "language": "sql",
      "package_name": "dbt_artifacts",
      "root_path": "/Users/sung/Desktop/dbt/dbt_env/dbt_packages/dbt_artifacts",
      "path": "not_null_dim_dbt__models_manifest_model_id.sql",
      "original_file_path": "models/schemas.yml",
      "name": "not_null_dim_dbt__models_manifest_model_id",
      "alias": "not_null_dim_dbt__models_manifest_model_id",
      "checksum": { "name": "none", "checksum": "" },
      "tags": [],
      "refs": [["dim_dbt__models"]],
      "sources": [],
      "metrics": [],
      "description": "",
      "columns": {},
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "compiled_path": null,
      "build_path": null,
      "deferred": false,
      "unrendered_config": {},
      "created_at": 1665426351.898922,
      "column_name": "manifest_model_id",
      "file_key_name": "models.dim_dbt__models"
    },
    "test.dbt_artifacts.unique_dim_dbt__sources_manifest_source_id.a9a1a372ce": {
      "test_metadata": {
        "name": "unique",
        "kwargs": {
          "column_name": "manifest_source_id",
          "model": "{{ get_where_subquery(ref('dim_dbt__sources')) }}"
        },
        "namespace": null
      },
      "resource_type": "test",
      "depends_on": {
        "macros": ["macro.dbt.test_unique"],
        "nodes": ["model.dbt_artifacts.dim_dbt__sources"]
      },
      "config": {
        "enabled": true,
        "alias": null,
        "schema": "dbt_test__audit",
        "database": null,
        "tags": [],
        "meta": {},
        "materialized": "test",
        "severity": "ERROR",
        "store_failures": null,
        "where": null,
        "limit": null,
        "fail_calc": "count(*)",
        "warn_if": "!= 0",
        "error_if": "!= 0"
      },
      "database": "ANALYTICS",
      "schema": "dbt_sung_dbt_test__audit",
      "fqn": ["dbt_artifacts", "unique_dim_dbt__sources_manifest_source_id"],
      "unique_id": "test.dbt_artifacts.unique_dim_dbt__sources_manifest_source_id.a9a1a372ce",
      "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}",
      "language": "sql",
      "package_name": "dbt_artifacts",
      "root_path": "/Users/sung/Desktop/dbt/dbt_env/dbt_packages/dbt_artifacts",
      "path": "unique_dim_dbt__sources_manifest_source_id.sql",
      "original_file_path": "models/schemas.yml",
      "name": "unique_dim_dbt__sources_manifest_source_id",
      "alias": "unique_dim_dbt__sources_manifest_source_id",
      "checksum": { "name": "none", "checksum": "" },
      "tags": [],
      "refs": [["dim_dbt__sources"]],
      "sources": [],
      "metrics": [],
      "description": "",
      "columns": {},
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "compiled_path": null,
      "build_path": null,
      "deferred": false,
      "unrendered_config": {},
      "created_at": 1665426351.900971,
      "column_name": "manifest_source_id",
      "file_key_name": "models.dim_dbt__sources"
    },
    "test.dbt_artifacts.not_null_dim_dbt__sources_manifest_source_id.34e9829000": {
      "test_metadata": {
        "name": "not_null",
        "kwargs": {
          "column_name": "manifest_source_id",
          "model": "{{ get_where_subquery(ref('dim_dbt__sources')) }}"
        },
        "namespace": null
      },
      "resource_type": "test",
      "depends_on": {
        "macros": ["macro.dbt.test_not_null"],
        "nodes": ["model.dbt_artifacts.dim_dbt__sources"]
      },
      "config": {
        "enabled": true,
        "alias": null,
        "schema": "dbt_test__audit",
        "database": null,
        "tags": [],
        "meta": {},
        "materialized": "test",
        "severity": "ERROR",
        "store_failures": null,
        "where": null,
        "limit": null,
        "fail_calc": "count(*)",
        "warn_if": "!= 0",
        "error_if": "!= 0"
      },
      "database": "ANALYTICS",
      "schema": "dbt_sung_dbt_test__audit",
      "fqn": ["dbt_artifacts", "not_null_dim_dbt__sources_manifest_source_id"],
      "unique_id": "test.dbt_artifacts.not_null_dim_dbt__sources_manifest_source_id.34e9829000",
      "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}",
      "language": "sql",
      "package_name": "dbt_artifacts",
      "root_path": "/Users/sung/Desktop/dbt/dbt_env/dbt_packages/dbt_artifacts",
      "path": "not_null_dim_dbt__sources_manifest_source_id.sql",
      "original_file_path": "models/schemas.yml",
      "name": "not_null_dim_dbt__sources_manifest_source_id",
      "alias": "not_null_dim_dbt__sources_manifest_source_id",
      "checksum": { "name": "none", "checksum": "" },
      "tags": [],
      "refs": [["dim_dbt__sources"]],
      "sources": [],
      "metrics": [],
      "description": "",
      "columns": {},
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "compiled_path": null,
      "build_path": null,
      "deferred": false,
      "unrendered_config": {},
      "created_at": 1665426351.9035509,
      "column_name": "manifest_source_id",
      "file_key_name": "models.dim_dbt__sources"
    },
    "test.tpch.source_unique_tpch_test_orders_o_orderkey.4d1934eb1c": {
      "test_metadata": {
        "name": "unique",
        "kwargs": {
          "column_name": "o_orderkey",
          "model": "{{ get_where_subquery(source('tpch_test', 'orders')) }}"
        },
        "namespace": null
      },
      "resource_type": "test",
      "depends_on": {
        "macros": ["macro.dbt.test_unique"],
        "nodes": ["source.tpch.tpch_test.orders"]
      },
      "config": {
        "enabled": true,
        "alias": null,
        "schema": "dbt_test__audit",
        "database": null,
        "tags": [],
        "meta": {},
        "materialized": "test",
        "severity": "ERROR",
        "store_failures": null,
        "where": null,
        "limit": null,
        "fail_calc": "count(*)",
        "warn_if": "!= 0",
        "error_if": "!= 0"
      },
      "database": "ANALYTICS",
      "schema": "dbt_sung_dbt_test__audit",
      "fqn": [
        "tpch",
        "staging",
        "tpch",
        "source_unique_tpch_test_orders_o_orderkey"
      ],
      "unique_id": "test.tpch.source_unique_tpch_test_orders_o_orderkey.4d1934eb1c",
      "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}",
      "language": "sql",
      "package_name": "tpch",
      "root_path": "/Users/sung/Desktop/dbt/dbt_env",
      "path": "source_unique_tpch_test_orders_o_orderkey.sql",
      "original_file_path": "models/staging/tpch/tpch_sources.yml",
      "name": "source_unique_tpch_test_orders_o_orderkey",
      "alias": "source_unique_tpch_test_orders_o_orderkey",
      "checksum": { "name": "none", "checksum": "" },
      "tags": [],
      "refs": [],
      "sources": [["tpch_test", "orders"]],
      "metrics": [],
      "description": "",
      "columns": {},
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "compiled_path": null,
      "build_path": null,
      "deferred": false,
      "unrendered_config": {},
      "created_at": 1665426351.918507,
      "column_name": "o_orderkey",
      "file_key_name": "sources.tpch_test"
    },
    "test.tpch.source_not_null_tpch_test_orders_o_orderkey.d6ff547290": {
      "test_metadata": {
        "name": "not_null",
        "kwargs": {
          "column_name": "o_orderkey",
          "model": "{{ get_where_subquery(source('tpch_test', 'orders')) }}"
        },
        "namespace": null
      },
      "resource_type": "test",
      "depends_on": {
        "macros": ["macro.dbt.test_not_null"],
        "nodes": ["source.tpch.tpch_test.orders"]
      },
      "config": {
        "enabled": true,
        "alias": null,
        "schema": "dbt_test__audit",
        "database": null,
        "tags": [],
        "meta": {},
        "materialized": "test",
        "severity": "ERROR",
        "store_failures": null,
        "where": null,
        "limit": null,
        "fail_calc": "count(*)",
        "warn_if": "!= 0",
        "error_if": "!= 0"
      },
      "database": "ANALYTICS",
      "schema": "dbt_sung_dbt_test__audit",
      "fqn": [
        "tpch",
        "staging",
        "tpch",
        "source_not_null_tpch_test_orders_o_orderkey"
      ],
      "unique_id": "test.tpch.source_not_null_tpch_test_orders_o_orderkey.d6ff547290",
      "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}",
      "language": "sql",
      "package_name": "tpch",
      "root_path": "/Users/sung/Desktop/dbt/dbt_env",
      "path": "source_not_null_tpch_test_orders_o_orderkey.sql",
      "original_file_path": "models/staging/tpch/tpch_sources.yml",
      "name": "source_not_null_tpch_test_orders_o_orderkey",
      "alias": "source_not_null_tpch_test_orders_o_orderkey",
      "checksum": { "name": "none", "checksum": "" },
      "tags": [],
      "refs": [],
      "sources": [["tpch_test", "orders"]],
      "metrics": [],
      "description": "",
      "columns": {},
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "compiled_path": null,
      "build_path": null,
      "deferred": false,
      "unrendered_config": {},
      "created_at": 1665426351.920408,
      "column_name": "o_orderkey",
      "file_key_name": "sources.tpch_test"
    },
    "test.tpch.source_relationships_tpch_test_orders_o_custkey__c_custkey__source_tpch_customer_.5a12f1aafc": {
      "test_metadata": {
        "name": "relationships",
        "kwargs": {
          "to": "source('tpch', 'customer')",
          "field": "c_custkey",
          "column_name": "o_custkey",
          "model": "{{ get_where_subquery(source('tpch_test', 'orders')) }}"
        },
        "namespace": null
      },
      "resource_type": "test",
      "depends_on": {
        "macros": [
          "macro.dbt.test_relationships",
          "macro.dbt.get_where_subquery"
        ],
        "nodes": ["source.tpch.tpch_test.orders"]
      },
      "config": {
        "enabled": false,
        "alias": "source_relationships_tpch_test_f8afdbd34249ed58c93b7b46982a802a",
        "schema": "dbt_test__audit",
        "database": null,
        "tags": [],
        "meta": {},
        "materialized": "test",
        "severity": "ERROR",
        "store_failures": null,
        "where": null,
        "limit": null,
        "fail_calc": "count(*)",
        "warn_if": "!= 0",
        "error_if": "!= 0"
      },
      "database": "ANALYTICS",
      "schema": "dbt_sung_dbt_test__audit",
      "fqn": [
        "tpch",
        "staging",
        "tpch",
        "source_relationships_tpch_test_orders_o_custkey__c_custkey__source_tpch_customer_"
      ],
      "unique_id": "test.tpch.source_relationships_tpch_test_orders_o_custkey__c_custkey__source_tpch_customer_.5a12f1aafc",
      "raw_code": "{{ test_relationships(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_relationships_tpch_test_f8afdbd34249ed58c93b7b46982a802a\") }}",
      "language": "sql",
      "package_name": "tpch",
      "root_path": "/Users/sung/Desktop/dbt/dbt_env",
      "path": "source_relationships_tpch_test_f8afdbd34249ed58c93b7b46982a802a.sql",
      "original_file_path": "models/staging/tpch/tpch_sources.yml",
      "name": "source_relationships_tpch_test_orders_o_custkey__c_custkey__source_tpch_customer_",
      "alias": "source_relationships_tpch_test_f8afdbd34249ed58c93b7b46982a802a",
      "checksum": { "name": "none", "checksum": "" },
      "tags": [],
      "refs": [],
      "sources": [
        ["tpch", "customer"],
        ["tpch_test", "orders"]
      ],
      "metrics": [],
      "description": "",
      "columns": {},
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "compiled_path": null,
      "build_path": null,
      "deferred": false,
      "unrendered_config": {
        "alias": "source_relationships_tpch_test_f8afdbd34249ed58c93b7b46982a802a"
      },
      "created_at": 1665426351.922824,
      "column_name": "o_custkey",
      "file_key_name": "sources.tpch_test"
    },
    "test.tpch.source_unique_tpch_test_customer_c_custkey.31760e8287": {
      "test_metadata": {
        "name": "unique",
        "kwargs": {
          "column_name": "c_custkey",
          "model": "{{ get_where_subquery(source('tpch_test', 'customer')) }}"
        },
        "namespace": null
      },
      "resource_type": "test",
      "depends_on": {
        "macros": ["macro.dbt.test_unique"],
        "nodes": ["source.tpch.tpch_test.customer"]
      },
      "config": {
        "enabled": true,
        "alias": null,
        "schema": "dbt_test__audit",
        "database": null,
        "tags": [],
        "meta": {},
        "materialized": "test",
        "severity": "WARN",
        "store_failures": null,
        "where": null,
        "limit": null,
        "fail_calc": "count(*)",
        "warn_if": "!= 0",
        "error_if": "!= 0"
      },
      "database": "ANALYTICS",
      "schema": "dbt_sung_dbt_test__audit",
      "fqn": [
        "tpch",
        "staging",
        "tpch",
        "source_unique_tpch_test_customer_c_custkey"
      ],
      "unique_id": "test.tpch.source_unique_tpch_test_customer_c_custkey.31760e8287",
      "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}{{ config(severity=\"warn\") }}",
      "language": "sql",
      "package_name": "tpch",
      "root_path": "/Users/sung/Desktop/dbt/dbt_env",
      "path": "source_unique_tpch_test_customer_c_custkey.sql",
      "original_file_path": "models/staging/tpch/tpch_sources.yml",
      "name": "source_unique_tpch_test_customer_c_custkey",
      "alias": "source_unique_tpch_test_customer_c_custkey",
      "checksum": { "name": "none", "checksum": "" },
      "tags": [],
      "refs": [],
      "sources": [["tpch_test", "customer"]],
      "metrics": [],
      "description": "",
      "columns": {},
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "compiled_path": null,
      "build_path": null,
      "deferred": false,
      "unrendered_config": { "severity": "WARN" },
      "created_at": 1665426351.93103,
      "column_name": "c_custkey",
      "file_key_name": "sources.tpch_test"
    },
    "test.tpch.source_not_null_tpch_test_customer_c_custkey.9e6cb29a5b": {
      "test_metadata": {
        "name": "not_null",
        "kwargs": {
          "column_name": "c_custkey",
          "model": "{{ get_where_subquery(source('tpch_test', 'customer')) }}"
        },
        "namespace": null
      },
      "resource_type": "test",
      "depends_on": {
        "macros": ["macro.dbt.test_not_null"],
        "nodes": ["source.tpch.tpch_test.customer"]
      },
      "config": {
        "enabled": true,
        "alias": null,
        "schema": "dbt_test__audit",
        "database": null,
        "tags": [],
        "meta": {},
        "materialized": "test",
        "severity": "WARN",
        "store_failures": null,
        "where": null,
        "limit": null,
        "fail_calc": "count(*)",
        "warn_if": "!= 0",
        "error_if": "!= 0"
      },
      "database": "ANALYTICS",
      "schema": "dbt_sung_dbt_test__audit",
      "fqn": [
        "tpch",
        "staging",
        "tpch",
        "source_not_null_tpch_test_customer_c_custkey"
      ],
      "unique_id": "test.tpch.source_not_null_tpch_test_customer_c_custkey.9e6cb29a5b",
      "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(severity=\"warn\") }}",
      "language": "sql",
      "package_name": "tpch",
      "root_path": "/Users/sung/Desktop/dbt/dbt_env",
      "path": "source_not_null_tpch_test_customer_c_custkey.sql",
      "original_file_path": "models/staging/tpch/tpch_sources.yml",
      "name": "source_not_null_tpch_test_customer_c_custkey",
      "alias": "source_not_null_tpch_test_customer_c_custkey",
      "checksum": { "name": "none", "checksum": "" },
      "tags": [],
      "refs": [],
      "sources": [["tpch_test", "customer"]],
      "metrics": [],
      "description": "",
      "columns": {},
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "compiled_path": null,
      "build_path": null,
      "deferred": false,
      "unrendered_config": { "severity": "WARN" },
      "created_at": 1665426351.933828,
      "column_name": "c_custkey",
      "file_key_name": "sources.tpch_test"
    },
    "test.tpch.source_relationships_tpch_test_lineitem_l_orderkey__o_orderkey__source_tpch_orders_.fbadfea2d3": {
      "test_metadata": {
        "name": "relationships",
        "kwargs": {
          "to": "source('tpch', 'orders')",
          "field": "o_orderkey",
          "column_name": "l_orderkey",
          "model": "{{ get_where_subquery(source('tpch_test', 'lineitem')) }}"
        },
        "namespace": null
      },
      "resource_type": "test",
      "depends_on": {
        "macros": [
          "macro.dbt.test_relationships",
          "macro.dbt.get_where_subquery"
        ],
        "nodes": ["source.tpch.tpch_test.lineitem"]
      },
      "config": {
        "enabled": false,
        "alias": "source_relationships_tpch_test_176765bed3457503a490fc8396b1a590",
        "schema": "dbt_test__audit",
        "database": null,
        "tags": [],
        "meta": {},
        "materialized": "test",
        "severity": "ERROR",
        "store_failures": null,
        "where": null,
        "limit": null,
        "fail_calc": "count(*)",
        "warn_if": "!= 0",
        "error_if": "!= 0"
      },
      "database": "ANALYTICS",
      "schema": "dbt_sung_dbt_test__audit",
      "fqn": [
        "tpch",
        "staging",
        "tpch",
        "source_relationships_tpch_test_lineitem_l_orderkey__o_orderkey__source_tpch_orders_"
      ],
      "unique_id": "test.tpch.source_relationships_tpch_test_lineitem_l_orderkey__o_orderkey__source_tpch_orders_.fbadfea2d3",
      "raw_code": "{{ test_relationships(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_relationships_tpch_test_176765bed3457503a490fc8396b1a590\") }}",
      "language": "sql",
      "package_name": "tpch",
      "root_path": "/Users/sung/Desktop/dbt/dbt_env",
      "path": "source_relationships_tpch_test_176765bed3457503a490fc8396b1a590.sql",
      "original_file_path": "models/staging/tpch/tpch_sources.yml",
      "name": "source_relationships_tpch_test_lineitem_l_orderkey__o_orderkey__source_tpch_orders_",
      "alias": "source_relationships_tpch_test_176765bed3457503a490fc8396b1a590",
      "checksum": { "name": "none", "checksum": "" },
      "tags": [],
      "refs": [],
      "sources": [
        ["tpch", "orders"],
        ["tpch_test", "lineitem"]
      ],
      "metrics": [],
      "description": "",
      "columns": {},
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "compiled_path": null,
      "build_path": null,
      "deferred": false,
      "unrendered_config": {
        "alias": "source_relationships_tpch_test_176765bed3457503a490fc8396b1a590"
      },
      "created_at": 1665426351.936213,
      "column_name": "l_orderkey",
      "file_key_name": "sources.tpch_test"
    },
    "test.tpch.source_relationships_tpch_test_lineitem_l_partkey__p_partkey__source_tpch_part_.256ef70c92": {
      "test_metadata": {
        "name": "relationships",
        "kwargs": {
          "to": "source('tpch', 'part')",
          "field": "p_partkey",
          "column_name": "l_partkey",
          "model": "{{ get_where_subquery(source('tpch_test', 'lineitem')) }}"
        },
        "namespace": null
      },
      "resource_type": "test",
      "depends_on": {
        "macros": [
          "macro.dbt.test_relationships",
          "macro.dbt.get_where_subquery"
        ],
        "nodes": ["source.tpch.tpch_test.lineitem"]
      },
      "config": {
        "enabled": false,
        "alias": "source_relationships_tpch_test_084577b9b94c6fb0d16afe359a3d61a0",
        "schema": "dbt_test__audit",
        "database": null,
        "tags": [],
        "meta": {},
        "materialized": "test",
        "severity": "ERROR",
        "store_failures": null,
        "where": null,
        "limit": null,
        "fail_calc": "count(*)",
        "warn_if": "!= 0",
        "error_if": "!= 0"
      },
      "database": "ANALYTICS",
      "schema": "dbt_sung_dbt_test__audit",
      "fqn": [
        "tpch",
        "staging",
        "tpch",
        "source_relationships_tpch_test_lineitem_l_partkey__p_partkey__source_tpch_part_"
      ],
      "unique_id": "test.tpch.source_relationships_tpch_test_lineitem_l_partkey__p_partkey__source_tpch_part_.256ef70c92",
      "raw_code": "{{ test_relationships(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_relationships_tpch_test_084577b9b94c6fb0d16afe359a3d61a0\") }}",
      "language": "sql",
      "package_name": "tpch",
      "root_path": "/Users/sung/Desktop/dbt/dbt_env",
      "path": "source_relationships_tpch_test_084577b9b94c6fb0d16afe359a3d61a0.sql",
      "original_file_path": "models/staging/tpch/tpch_sources.yml",
      "name": "source_relationships_tpch_test_lineitem_l_partkey__p_partkey__source_tpch_part_",
      "alias": "source_relationships_tpch_test_084577b9b94c6fb0d16afe359a3d61a0",
      "checksum": { "name": "none", "checksum": "" },
      "tags": [],
      "refs": [],
      "sources": [
        ["tpch", "part"],
        ["tpch_test", "lineitem"]
      ],
      "metrics": [],
      "description": "",
      "columns": {},
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "compiled_path": null,
      "build_path": null,
      "deferred": false,
      "unrendered_config": {
        "alias": "source_relationships_tpch_test_084577b9b94c6fb0d16afe359a3d61a0"
      },
      "created_at": 1665426351.943719,
      "column_name": "l_partkey",
      "file_key_name": "sources.tpch_test"
    },
    "test.tpch.source_relationships_tpch_test_lineitem_l_suppkey__s_suppkey__source_tpch_supplier_.05dc4fdd6e": {
      "test_metadata": {
        "name": "relationships",
        "kwargs": {
          "to": "source('tpch', 'supplier')",
          "field": "s_suppkey",
          "column_name": "l_suppkey",
          "model": "{{ get_where_subquery(source('tpch_test', 'lineitem')) }}"
        },
        "namespace": null
      },
      "resource_type": "test",
      "depends_on": {
        "macros": [
          "macro.dbt.test_relationships",
          "macro.dbt.get_where_subquery"
        ],
        "nodes": ["source.tpch.tpch_test.lineitem"]
      },
      "config": {
        "enabled": false,
        "alias": "source_relationships_tpch_test_967064802abeb0fcfcb515fcb637b3c8",
        "schema": "dbt_test__audit",
        "database": null,
        "tags": [],
        "meta": {},
        "materialized": "test",
        "severity": "ERROR",
        "store_failures": null,
        "where": null,
        "limit": null,
        "fail_calc": "count(*)",
        "warn_if": "!= 0",
        "error_if": "!= 0"
      },
      "database": "ANALYTICS",
      "schema": "dbt_sung_dbt_test__audit",
      "fqn": [
        "tpch",
        "staging",
        "tpch",
        "source_relationships_tpch_test_lineitem_l_suppkey__s_suppkey__source_tpch_supplier_"
      ],
      "unique_id": "test.tpch.source_relationships_tpch_test_lineitem_l_suppkey__s_suppkey__source_tpch_supplier_.05dc4fdd6e",
      "raw_code": "{{ test_relationships(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_relationships_tpch_test_967064802abeb0fcfcb515fcb637b3c8\") }}",
      "language": "sql",
      "package_name": "tpch",
      "root_path": "/Users/sung/Desktop/dbt/dbt_env",
      "path": "source_relationships_tpch_test_967064802abeb0fcfcb515fcb637b3c8.sql",
      "original_file_path": "models/staging/tpch/tpch_sources.yml",
      "name": "source_relationships_tpch_test_lineitem_l_suppkey__s_suppkey__source_tpch_supplier_",
      "alias": "source_relationships_tpch_test_967064802abeb0fcfcb515fcb637b3c8",
      "checksum": { "name": "none", "checksum": "" },
      "tags": [],
      "refs": [],
      "sources": [
        ["tpch", "supplier"],
        ["tpch_test", "lineitem"]
      ],
      "metrics": [],
      "description": "",
      "columns": {},
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "compiled_path": null,
      "build_path": null,
      "deferred": false,
      "unrendered_config": {
        "alias": "source_relationships_tpch_test_967064802abeb0fcfcb515fcb637b3c8"
      },
      "created_at": 1665426351.9502752,
      "column_name": "l_suppkey",
      "file_key_name": "sources.tpch_test"
    },
    "test.tpch.source_unique_tpch_test_nation_n_nationkey.22426159f9": {
      "test_metadata": {
        "name": "unique",
        "kwargs": {
          "column_name": "n_nationkey",
          "model": "{{ get_where_subquery(source('tpch_test', 'nation')) }}"
        },
        "namespace": null
      },
      "resource_type": "test",
      "depends_on": {
        "macros": ["macro.dbt.test_unique"],
        "nodes": ["source.tpch.tpch_test.nation"]
      },
      "config": {
        "enabled": true,
        "alias": null,
        "schema": "dbt_test__audit",
        "database": null,
        "tags": [],
        "meta": {},
        "materialized": "test",
        "severity": "WARN",
        "store_failures": null,
        "where": null,
        "limit": null,
        "fail_calc": "count(*)",
        "warn_if": "!= 0",
        "error_if": "!= 0"
      },
      "database": "ANALYTICS",
      "schema": "dbt_sung_dbt_test__audit",
      "fqn": [
        "tpch",
        "staging",
        "tpch",
        "source_unique_tpch_test_nation_n_nationkey"
      ],
      "unique_id": "test.tpch.source_unique_tpch_test_nation_n_nationkey.22426159f9",
      "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}{{ config(severity=\"warn\") }}",
      "language": "sql",
      "package_name": "tpch",
      "root_path": "/Users/sung/Desktop/dbt/dbt_env",
      "path": "source_unique_tpch_test_nation_n_nationkey.sql",
      "original_file_path": "models/staging/tpch/tpch_sources.yml",
      "name": "source_unique_tpch_test_nation_n_nationkey",
      "alias": "source_unique_tpch_test_nation_n_nationkey",
      "checksum": { "name": "none", "checksum": "" },
      "tags": [],
      "refs": [],
      "sources": [["tpch_test", "nation"]],
      "metrics": [],
      "description": "",
      "columns": {},
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "compiled_path": null,
      "build_path": null,
      "deferred": false,
      "unrendered_config": { "severity": "WARN" },
      "created_at": 1665426351.956821,
      "column_name": "n_nationkey",
      "file_key_name": "sources.tpch_test"
    },
    "test.tpch.source_not_null_tpch_test_nation_n_nationkey.2431180b9e": {
      "test_metadata": {
        "name": "not_null",
        "kwargs": {
          "column_name": "n_nationkey",
          "model": "{{ get_where_subquery(source('tpch_test', 'nation')) }}"
        },
        "namespace": null
      },
      "resource_type": "test",
      "depends_on": {
        "macros": ["macro.dbt.test_not_null"],
        "nodes": ["source.tpch.tpch_test.nation"]
      },
      "config": {
        "enabled": true,
        "alias": null,
        "schema": "dbt_test__audit",
        "database": null,
        "tags": [],
        "meta": {},
        "materialized": "test",
        "severity": "WARN",
        "store_failures": null,
        "where": null,
        "limit": null,
        "fail_calc": "count(*)",
        "warn_if": "!= 0",
        "error_if": "!= 0"
      },
      "database": "ANALYTICS",
      "schema": "dbt_sung_dbt_test__audit",
      "fqn": [
        "tpch",
        "staging",
        "tpch",
        "source_not_null_tpch_test_nation_n_nationkey"
      ],
      "unique_id": "test.tpch.source_not_null_tpch_test_nation_n_nationkey.2431180b9e",
      "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(severity=\"warn\") }}",
      "language": "sql",
      "package_name": "tpch",
      "root_path": "/Users/sung/Desktop/dbt/dbt_env",
      "path": "source_not_null_tpch_test_nation_n_nationkey.sql",
      "original_file_path": "models/staging/tpch/tpch_sources.yml",
      "name": "source_not_null_tpch_test_nation_n_nationkey",
      "alias": "source_not_null_tpch_test_nation_n_nationkey",
      "checksum": { "name": "none", "checksum": "" },
      "tags": [],
      "refs": [],
      "sources": [["tpch_test", "nation"]],
      "metrics": [],
      "description": "",
      "columns": {},
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "compiled_path": null,
      "build_path": null,
      "deferred": false,
      "unrendered_config": { "severity": "WARN" },
      "created_at": 1665426351.959967,
      "column_name": "n_nationkey",
      "file_key_name": "sources.tpch_test"
    },
    "test.tpch.source_relationships_tpch_test_nation_n_regionkey__r_regionkey__source_tpch_region_.3ea25d1fcf": {
      "test_metadata": {
        "name": "relationships",
        "kwargs": {
          "to": "source('tpch', 'region')",
          "field": "r_regionkey",
          "column_name": "n_regionkey",
          "model": "{{ get_where_subquery(source('tpch_test', 'nation')) }}"
        },
        "namespace": null
      },
      "resource_type": "test",
      "depends_on": {
        "macros": [
          "macro.dbt.test_relationships",
          "macro.dbt.get_where_subquery"
        ],
        "nodes": ["source.tpch.tpch_test.nation"]
      },
      "config": {
        "enabled": false,
        "alias": "source_relationships_tpch_test_da7374460006cbffb79dd36c5745f61d",
        "schema": "dbt_test__audit",
        "database": null,
        "tags": [],
        "meta": {},
        "materialized": "test",
        "severity": "ERROR",
        "store_failures": null,
        "where": null,
        "limit": null,
        "fail_calc": "count(*)",
        "warn_if": "!= 0",
        "error_if": "!= 0"
      },
      "database": "ANALYTICS",
      "schema": "dbt_sung_dbt_test__audit",
      "fqn": [
        "tpch",
        "staging",
        "tpch",
        "source_relationships_tpch_test_nation_n_regionkey__r_regionkey__source_tpch_region_"
      ],
      "unique_id": "test.tpch.source_relationships_tpch_test_nation_n_regionkey__r_regionkey__source_tpch_region_.3ea25d1fcf",
      "raw_code": "{{ test_relationships(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_relationships_tpch_test_da7374460006cbffb79dd36c5745f61d\") }}",
      "language": "sql",
      "package_name": "tpch",
      "root_path": "/Users/sung/Desktop/dbt/dbt_env",
      "path": "source_relationships_tpch_test_da7374460006cbffb79dd36c5745f61d.sql",
      "original_file_path": "models/staging/tpch/tpch_sources.yml",
      "name": "source_relationships_tpch_test_nation_n_regionkey__r_regionkey__source_tpch_region_",
      "alias": "source_relationships_tpch_test_da7374460006cbffb79dd36c5745f61d",
      "checksum": { "name": "none", "checksum": "" },
      "tags": [],
      "refs": [],
      "sources": [
        ["tpch", "region"],
        ["tpch_test", "nation"]
      ],
      "metrics": [],
      "description": "",
      "columns": {},
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "compiled_path": null,
      "build_path": null,
      "deferred": false,
      "unrendered_config": {
        "alias": "source_relationships_tpch_test_da7374460006cbffb79dd36c5745f61d"
      },
      "created_at": 1665426351.962334,
      "column_name": "n_regionkey",
      "file_key_name": "sources.tpch_test"
    },
    "test.tpch.source_unique_tpch_test_part_p_partkey.45789f2d24": {
      "test_metadata": {
        "name": "unique",
        "kwargs": {
          "column_name": "p_partkey",
          "model": "{{ get_where_subquery(source('tpch_test', 'part')) }}"
        },
        "namespace": null
      },
      "resource_type": "test",
      "depends_on": {
        "macros": ["macro.dbt.test_unique"],
        "nodes": ["source.tpch.tpch_test.part"]
      },
      "config": {
        "enabled": true,
        "alias": null,
        "schema": "dbt_test__audit",
        "database": null,
        "tags": [],
        "meta": {},
        "materialized": "test",
        "severity": "WARN",
        "store_failures": null,
        "where": null,
        "limit": null,
        "fail_calc": "count(*)",
        "warn_if": "!= 0",
        "error_if": "!= 0"
      },
      "database": "ANALYTICS",
      "schema": "dbt_sung_dbt_test__audit",
      "fqn": [
        "tpch",
        "staging",
        "tpch",
        "source_unique_tpch_test_part_p_partkey"
      ],
      "unique_id": "test.tpch.source_unique_tpch_test_part_p_partkey.45789f2d24",
      "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}{{ config(severity=\"warn\") }}",
      "language": "sql",
      "package_name": "tpch",
      "root_path": "/Users/sung/Desktop/dbt/dbt_env",
      "path": "source_unique_tpch_test_part_p_partkey.sql",
      "original_file_path": "models/staging/tpch/tpch_sources.yml",
      "name": "source_unique_tpch_test_part_p_partkey",
      "alias": "source_unique_tpch_test_part_p_partkey",
      "checksum": { "name": "none", "checksum": "" },
      "tags": [],
      "refs": [],
      "sources": [["tpch_test", "part"]],
      "metrics": [],
      "description": "",
      "columns": {},
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "compiled_path": null,
      "build_path": null,
      "deferred": false,
      "unrendered_config": { "severity": "WARN" },
      "created_at": 1665426351.970227,
      "column_name": "p_partkey",
      "file_key_name": "sources.tpch_test"
    },
    "test.tpch.source_not_null_tpch_test_part_p_partkey.c9a9cf8755": {
      "test_metadata": {
        "name": "not_null",
        "kwargs": {
          "column_name": "p_partkey",
          "model": "{{ get_where_subquery(source('tpch_test', 'part')) }}"
        },
        "namespace": null
      },
      "resource_type": "test",
      "depends_on": {
        "macros": ["macro.dbt.test_not_null"],
        "nodes": ["source.tpch.tpch_test.part"]
      },
      "config": {
        "enabled": true,
        "alias": null,
        "schema": "dbt_test__audit",
        "database": null,
        "tags": [],
        "meta": {},
        "materialized": "test",
        "severity": "WARN",
        "store_failures": null,
        "where": null,
        "limit": null,
        "fail_calc": "count(*)",
        "warn_if": "!= 0",
        "error_if": "!= 0"
      },
      "database": "ANALYTICS",
      "schema": "dbt_sung_dbt_test__audit",
      "fqn": [
        "tpch",
        "staging",
        "tpch",
        "source_not_null_tpch_test_part_p_partkey"
      ],
      "unique_id": "test.tpch.source_not_null_tpch_test_part_p_partkey.c9a9cf8755",
      "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(severity=\"warn\") }}",
      "language": "sql",
      "package_name": "tpch",
      "root_path": "/Users/sung/Desktop/dbt/dbt_env",
      "path": "source_not_null_tpch_test_part_p_partkey.sql",
      "original_file_path": "models/staging/tpch/tpch_sources.yml",
      "name": "source_not_null_tpch_test_part_p_partkey",
      "alias": "source_not_null_tpch_test_part_p_partkey",
      "checksum": { "name": "none", "checksum": "" },
      "tags": [],
      "refs": [],
      "sources": [["tpch_test", "part"]],
      "metrics": [],
      "description": "",
      "columns": {},
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "compiled_path": null,
      "build_path": null,
      "deferred": false,
      "unrendered_config": { "severity": "WARN" },
      "created_at": 1665426351.9723241,
      "column_name": "p_partkey",
      "file_key_name": "sources.tpch_test"
    },
    "test.tpch.source_relationships_tpch_test_partsupp_ps_partkey__p_partkey__source_tpch_part_.c1a053c227": {
      "test_metadata": {
        "name": "relationships",
        "kwargs": {
          "to": "source('tpch', 'part')",
          "field": "p_partkey",
          "column_name": "ps_partkey",
          "model": "{{ get_where_subquery(source('tpch_test', 'partsupp')) }}"
        },
        "namespace": null
      },
      "resource_type": "test",
      "depends_on": {
        "macros": [
          "macro.dbt.test_relationships",
          "macro.dbt.get_where_subquery"
        ],
        "nodes": ["source.tpch.tpch_test.partsupp"]
      },
      "config": {
        "enabled": false,
        "alias": "source_relationships_tpch_test_e8a85c6b9423d18958b70221b1e2fe34",
        "schema": "dbt_test__audit",
        "database": null,
        "tags": [],
        "meta": {},
        "materialized": "test",
        "severity": "ERROR",
        "store_failures": null,
        "where": null,
        "limit": null,
        "fail_calc": "count(*)",
        "warn_if": "!= 0",
        "error_if": "!= 0"
      },
      "database": "ANALYTICS",
      "schema": "dbt_sung_dbt_test__audit",
      "fqn": [
        "tpch",
        "staging",
        "tpch",
        "source_relationships_tpch_test_partsupp_ps_partkey__p_partkey__source_tpch_part_"
      ],
      "unique_id": "test.tpch.source_relationships_tpch_test_partsupp_ps_partkey__p_partkey__source_tpch_part_.c1a053c227",
      "raw_code": "{{ test_relationships(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_relationships_tpch_test_e8a85c6b9423d18958b70221b1e2fe34\") }}",
      "language": "sql",
      "package_name": "tpch",
      "root_path": "/Users/sung/Desktop/dbt/dbt_env",
      "path": "source_relationships_tpch_test_e8a85c6b9423d18958b70221b1e2fe34.sql",
      "original_file_path": "models/staging/tpch/tpch_sources.yml",
      "name": "source_relationships_tpch_test_partsupp_ps_partkey__p_partkey__source_tpch_part_",
      "alias": "source_relationships_tpch_test_e8a85c6b9423d18958b70221b1e2fe34",
      "checksum": { "name": "none", "checksum": "" },
      "tags": [],
      "refs": [],
      "sources": [
        ["tpch", "part"],
        ["tpch_test", "partsupp"]
      ],
      "metrics": [],
      "description": "",
      "columns": {},
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "compiled_path": null,
      "build_path": null,
      "deferred": false,
      "unrendered_config": {
        "alias": "source_relationships_tpch_test_e8a85c6b9423d18958b70221b1e2fe34"
      },
      "created_at": 1665426351.974775,
      "column_name": "ps_partkey",
      "file_key_name": "sources.tpch_test"
    },
    "test.tpch.source_relationships_tpch_test_partsupp_ps_suppkey__s_suppkey__source_tpch_supplier_.ebe51d8541": {
      "test_metadata": {
        "name": "relationships",
        "kwargs": {
          "to": "source('tpch', 'supplier')",
          "field": "s_suppkey",
          "column_name": "ps_suppkey",
          "model": "{{ get_where_subquery(source('tpch_test', 'partsupp')) }}"
        },
        "namespace": null
      },
      "resource_type": "test",
      "depends_on": {
        "macros": [
          "macro.dbt.test_relationships",
          "macro.dbt.get_where_subquery"
        ],
        "nodes": ["source.tpch.tpch_test.partsupp"]
      },
      "config": {
        "enabled": false,
        "alias": "source_relationships_tpch_test_ccad7994b0e6e79d6613357076ae9b5a",
        "schema": "dbt_test__audit",
        "database": null,
        "tags": [],
        "meta": {},
        "materialized": "test",
        "severity": "ERROR",
        "store_failures": null,
        "where": null,
        "limit": null,
        "fail_calc": "count(*)",
        "warn_if": "!= 0",
        "error_if": "!= 0"
      },
      "database": "ANALYTICS",
      "schema": "dbt_sung_dbt_test__audit",
      "fqn": [
        "tpch",
        "staging",
        "tpch",
        "source_relationships_tpch_test_partsupp_ps_suppkey__s_suppkey__source_tpch_supplier_"
      ],
      "unique_id": "test.tpch.source_relationships_tpch_test_partsupp_ps_suppkey__s_suppkey__source_tpch_supplier_.ebe51d8541",
      "raw_code": "{{ test_relationships(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_relationships_tpch_test_ccad7994b0e6e79d6613357076ae9b5a\") }}",
      "language": "sql",
      "package_name": "tpch",
      "root_path": "/Users/sung/Desktop/dbt/dbt_env",
      "path": "source_relationships_tpch_test_ccad7994b0e6e79d6613357076ae9b5a.sql",
      "original_file_path": "models/staging/tpch/tpch_sources.yml",
      "name": "source_relationships_tpch_test_partsupp_ps_suppkey__s_suppkey__source_tpch_supplier_",
      "alias": "source_relationships_tpch_test_ccad7994b0e6e79d6613357076ae9b5a",
      "checksum": { "name": "none", "checksum": "" },
      "tags": [],
      "refs": [],
      "sources": [
        ["tpch", "supplier"],
        ["tpch_test", "partsupp"]
      ],
      "metrics": [],
      "description": "",
      "columns": {},
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "compiled_path": null,
      "build_path": null,
      "deferred": false,
      "unrendered_config": {
        "alias": "source_relationships_tpch_test_ccad7994b0e6e79d6613357076ae9b5a"
      },
      "created_at": 1665426351.982136,
      "column_name": "ps_suppkey",
      "file_key_name": "sources.tpch_test"
    },
    "test.tpch.source_unique_tpch_test_region_r_regionkey.b7972dd9cb": {
      "test_metadata": {
        "name": "unique",
        "kwargs": {
          "column_name": "r_regionkey",
          "model": "{{ get_where_subquery(source('tpch_test', 'region')) }}"
        },
        "namespace": null
      },
      "resource_type": "test",
      "depends_on": {
        "macros": ["macro.dbt.test_unique"],
        "nodes": ["source.tpch.tpch_test.region"]
      },
      "config": {
        "enabled": true,
        "alias": null,
        "schema": "dbt_test__audit",
        "database": null,
        "tags": [],
        "meta": {},
        "materialized": "test",
        "severity": "WARN",
        "store_failures": null,
        "where": null,
        "limit": null,
        "fail_calc": "count(*)",
        "warn_if": "!= 0",
        "error_if": "!= 0"
      },
      "database": "ANALYTICS",
      "schema": "dbt_sung_dbt_test__audit",
      "fqn": [
        "tpch",
        "staging",
        "tpch",
        "source_unique_tpch_test_region_r_regionkey"
      ],
      "unique_id": "test.tpch.source_unique_tpch_test_region_r_regionkey.b7972dd9cb",
      "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}{{ config(severity=\"warn\") }}",
      "language": "sql",
      "package_name": "tpch",
      "root_path": "/Users/sung/Desktop/dbt/dbt_env",
      "path": "source_unique_tpch_test_region_r_regionkey.sql",
      "original_file_path": "models/staging/tpch/tpch_sources.yml",
      "name": "source_unique_tpch_test_region_r_regionkey",
      "alias": "source_unique_tpch_test_region_r_regionkey",
      "checksum": { "name": "none", "checksum": "" },
      "tags": [],
      "refs": [],
      "sources": [["tpch_test", "region"]],
      "metrics": [],
      "description": "",
      "columns": {},
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "compiled_path": null,
      "build_path": null,
      "deferred": false,
      "unrendered_config": { "severity": "WARN" },
      "created_at": 1665426351.990668,
      "column_name": "r_regionkey",
      "file_key_name": "sources.tpch_test"
    },
    "test.tpch.source_not_null_tpch_test_region_r_regionkey.cce2078c1d": {
      "test_metadata": {
        "name": "not_null",
        "kwargs": {
          "column_name": "r_regionkey",
          "model": "{{ get_where_subquery(source('tpch_test', 'region')) }}"
        },
        "namespace": null
      },
      "resource_type": "test",
      "depends_on": {
        "macros": ["macro.dbt.test_not_null"],
        "nodes": ["source.tpch.tpch_test.region"]
      },
      "config": {
        "enabled": true,
        "alias": null,
        "schema": "dbt_test__audit",
        "database": null,
        "tags": [],
        "meta": {},
        "materialized": "test",
        "severity": "WARN",
        "store_failures": null,
        "where": null,
        "limit": null,
        "fail_calc": "count(*)",
        "warn_if": "!= 0",
        "error_if": "!= 0"
      },
      "database": "ANALYTICS",
      "schema": "dbt_sung_dbt_test__audit",
      "fqn": [
        "tpch",
        "staging",
        "tpch",
        "source_not_null_tpch_test_region_r_regionkey"
      ],
      "unique_id": "test.tpch.source_not_null_tpch_test_region_r_regionkey.cce2078c1d",
      "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(severity=\"warn\") }}",
      "language": "sql",
      "package_name": "tpch",
      "root_path": "/Users/sung/Desktop/dbt/dbt_env",
      "path": "source_not_null_tpch_test_region_r_regionkey.sql",
      "original_file_path": "models/staging/tpch/tpch_sources.yml",
      "name": "source_not_null_tpch_test_region_r_regionkey",
      "alias": "source_not_null_tpch_test_region_r_regionkey",
      "checksum": { "name": "none", "checksum": "" },
      "tags": [],
      "refs": [],
      "sources": [["tpch_test", "region"]],
      "metrics": [],
      "description": "",
      "columns": {},
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "compiled_path": null,
      "build_path": null,
      "deferred": false,
      "unrendered_config": { "severity": "WARN" },
      "created_at": 1665426351.99362,
      "column_name": "r_regionkey",
      "file_key_name": "sources.tpch_test"
    },
    "test.tpch.source_unique_tpch_test_supplier_s_suppkey.5d9e8c610c": {
      "test_metadata": {
        "name": "unique",
        "kwargs": {
          "column_name": "s_suppkey",
          "model": "{{ get_where_subquery(source('tpch_test', 'supplier')) }}"
        },
        "namespace": null
      },
      "resource_type": "test",
      "depends_on": {
        "macros": ["macro.dbt.test_unique"],
        "nodes": ["source.tpch.tpch_test.supplier"]
      },
      "config": {
        "enabled": true,
        "alias": null,
        "schema": "dbt_test__audit",
        "database": null,
        "tags": [],
        "meta": {},
        "materialized": "test",
        "severity": "WARN",
        "store_failures": null,
        "where": null,
        "limit": null,
        "fail_calc": "count(*)",
        "warn_if": "!= 0",
        "error_if": "!= 0"
      },
      "database": "ANALYTICS",
      "schema": "dbt_sung_dbt_test__audit",
      "fqn": [
        "tpch",
        "staging",
        "tpch",
        "source_unique_tpch_test_supplier_s_suppkey"
      ],
      "unique_id": "test.tpch.source_unique_tpch_test_supplier_s_suppkey.5d9e8c610c",
      "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}{{ config(severity=\"warn\") }}",
      "language": "sql",
      "package_name": "tpch",
      "root_path": "/Users/sung/Desktop/dbt/dbt_env",
      "path": "source_unique_tpch_test_supplier_s_suppkey.sql",
      "original_file_path": "models/staging/tpch/tpch_sources.yml",
      "name": "source_unique_tpch_test_supplier_s_suppkey",
      "alias": "source_unique_tpch_test_supplier_s_suppkey",
      "checksum": { "name": "none", "checksum": "" },
      "tags": [],
      "refs": [],
      "sources": [["tpch_test", "supplier"]],
      "metrics": [],
      "description": "",
      "columns": {},
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "compiled_path": null,
      "build_path": null,
      "deferred": false,
      "unrendered_config": { "severity": "WARN" },
      "created_at": 1665426351.998484,
      "column_name": "s_suppkey",
      "file_key_name": "sources.tpch_test"
    },
    "test.tpch.source_not_null_tpch_test_supplier_s_suppkey.91f5ca302b": {
      "test_metadata": {
        "name": "not_null",
        "kwargs": {
          "column_name": "s_suppkey",
          "model": "{{ get_where_subquery(source('tpch_test', 'supplier')) }}"
        },
        "namespace": null
      },
      "resource_type": "test",
      "depends_on": {
        "macros": ["macro.dbt.test_not_null"],
        "nodes": ["source.tpch.tpch_test.supplier"]
      },
      "config": {
        "enabled": true,
        "alias": null,
        "schema": "dbt_test__audit",
        "database": null,
        "tags": [],
        "meta": {},
        "materialized": "test",
        "severity": "WARN",
        "store_failures": null,
        "where": null,
        "limit": null,
        "fail_calc": "count(*)",
        "warn_if": "!= 0",
        "error_if": "!= 0"
      },
      "database": "ANALYTICS",
      "schema": "dbt_sung_dbt_test__audit",
      "fqn": [
        "tpch",
        "staging",
        "tpch",
        "source_not_null_tpch_test_supplier_s_suppkey"
      ],
      "unique_id": "test.tpch.source_not_null_tpch_test_supplier_s_suppkey.91f5ca302b",
      "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(severity=\"warn\") }}",
      "language": "sql",
      "package_name": "tpch",
      "root_path": "/Users/sung/Desktop/dbt/dbt_env",
      "path": "source_not_null_tpch_test_supplier_s_suppkey.sql",
      "original_file_path": "models/staging/tpch/tpch_sources.yml",
      "name": "source_not_null_tpch_test_supplier_s_suppkey",
      "alias": "source_not_null_tpch_test_supplier_s_suppkey",
      "checksum": { "name": "none", "checksum": "" },
      "tags": [],
      "refs": [],
      "sources": [["tpch_test", "supplier"]],
      "metrics": [],
      "description": "",
      "columns": {},
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "compiled_path": null,
      "build_path": null,
      "deferred": false,
      "unrendered_config": { "severity": "WARN" },
      "created_at": 1665426352.002357,
      "column_name": "s_suppkey",
      "file_key_name": "sources.tpch_test"
    },
    "test.tpch.source_relationships_tpch_test_supplier_s_nationkey__n_nationkey__source_tpch_nation_.bcb9e54582": {
      "test_metadata": {
        "name": "relationships",
        "kwargs": {
          "to": "source('tpch', 'nation')",
          "field": "n_nationkey",
          "column_name": "s_nationkey",
          "model": "{{ get_where_subquery(source('tpch_test', 'supplier')) }}"
        },
        "namespace": null
      },
      "resource_type": "test",
      "depends_on": {
        "macros": [
          "macro.dbt.test_relationships",
          "macro.dbt.get_where_subquery"
        ],
        "nodes": ["source.tpch.tpch_test.supplier"]
      },
      "config": {
        "enabled": false,
        "alias": "source_relationships_tpch_test_347dba32439ec333d199f748276ad173",
        "schema": "dbt_test__audit",
        "database": null,
        "tags": [],
        "meta": {},
        "materialized": "test",
        "severity": "ERROR",
        "store_failures": null,
        "where": null,
        "limit": null,
        "fail_calc": "count(*)",
        "warn_if": "!= 0",
        "error_if": "!= 0"
      },
      "database": "ANALYTICS",
      "schema": "dbt_sung_dbt_test__audit",
      "fqn": [
        "tpch",
        "staging",
        "tpch",
        "source_relationships_tpch_test_supplier_s_nationkey__n_nationkey__source_tpch_nation_"
      ],
      "unique_id": "test.tpch.source_relationships_tpch_test_supplier_s_nationkey__n_nationkey__source_tpch_nation_.bcb9e54582",
      "raw_code": "{{ test_relationships(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_relationships_tpch_test_347dba32439ec333d199f748276ad173\") }}",
      "language": "sql",
      "package_name": "tpch",
      "root_path": "/Users/sung/Desktop/dbt/dbt_env",
      "path": "source_relationships_tpch_test_347dba32439ec333d199f748276ad173.sql",
      "original_file_path": "models/staging/tpch/tpch_sources.yml",
      "name": "source_relationships_tpch_test_supplier_s_nationkey__n_nationkey__source_tpch_nation_",
      "alias": "source_relationships_tpch_test_347dba32439ec333d199f748276ad173",
      "checksum": { "name": "none", "checksum": "" },
      "tags": [],
      "refs": [],
      "sources": [
        ["tpch", "nation"],
        ["tpch_test", "supplier"]
      ],
      "metrics": [],
      "description": "",
      "columns": {},
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "compiled_path": null,
      "build_path": null,
      "deferred": false,
      "unrendered_config": {
        "alias": "source_relationships_tpch_test_347dba32439ec333d199f748276ad173"
      },
      "created_at": 1665426352.004534,
      "column_name": "s_nationkey",
      "file_key_name": "sources.tpch_test"
    }
  },
  "sources": {
    "source.tpch.tpch_test.orders": {
      "fqn": ["tpch", "staging", "tpch", "tpch_test", "orders"],
      "database": "raw",
      "schema": "tpch_sf001",
      "unique_id": "source.tpch.tpch_test.orders",
      "package_name": "tpch",
      "root_path": "/Users/sung/Desktop/dbt/dbt_env",
      "path": "models/staging/tpch/tpch_sources.yml",
      "original_file_path": "models/staging/tpch/tpch_sources.yml",
      "name": "orders",
      "source_name": "tpch_test",
      "source_description": "Welcome to the Fishtown Analytics demo dbt project! We use the [TPCH dataset](https://docs.snowflake.com/en/user-guide/sample-data-tpch.html) to create a sample project to emulate what a production project might look like!",
      "loader": "",
      "identifier": "orders",
      "resource_type": "source",
      "quoting": {
        "database": null,
        "schema": null,
        "identifier": null,
        "column": null
      },
      "loaded_at_field": "o_orderdate::timestamp",
      "freshness": {
        "warn_after": { "count": 6, "period": "hour" },
        "error_after": { "count": null, "period": null },
        "filter": null
      },
      "external": null,
      "description": "main order tracking table",
      "columns": {
        "o_orderkey": {
          "name": "o_orderkey",
          "description": "SF*1,500,000 are sparsely populated",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "o_custkey": {
          "name": "o_custkey",
          "description": "Foreign Key to C_CUSTKEY",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "o_orderstatus": {
          "name": "o_orderstatus",
          "description": "status code of the order",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "o_totalprice": {
          "name": "o_totalprice",
          "description": "raw price",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "o_orderdate": {
          "name": "o_orderdate",
          "description": "date the order was made",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "o_orderpriority": {
          "name": "o_orderpriority",
          "description": "code associated with the order",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "o_clerk": {
          "name": "o_clerk",
          "description": "id of the clerk",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "o_shippriority": {
          "name": "o_shippriority",
          "description": "numeric representation of the shipping priority, zero being the default",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "o_comment": {
          "name": "o_comment",
          "description": "additional commentary",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        }
      },
      "meta": {},
      "source_meta": {},
      "tags": [],
      "config": { "enabled": true },
      "patch_path": null,
      "unrendered_config": {},
      "relation_name": "raw.tpch_sf001.orders",
      "created_at": 1665426351.9284348
    },
    "source.tpch.tpch_test.customer": {
      "fqn": ["tpch", "staging", "tpch", "tpch_test", "customer"],
      "database": "raw",
      "schema": "tpch_sf001",
      "unique_id": "source.tpch.tpch_test.customer",
      "package_name": "tpch",
      "root_path": "/Users/sung/Desktop/dbt/dbt_env",
      "path": "models/staging/tpch/tpch_sources.yml",
      "original_file_path": "models/staging/tpch/tpch_sources.yml",
      "name": "customer",
      "source_name": "tpch_test",
      "source_description": "Welcome to the Fishtown Analytics demo dbt project! We use the [TPCH dataset](https://docs.snowflake.com/en/user-guide/sample-data-tpch.html) to create a sample project to emulate what a production project might look like!",
      "loader": "",
      "identifier": "customer",
      "resource_type": "source",
      "quoting": {
        "database": null,
        "schema": null,
        "identifier": null,
        "column": null
      },
      "loaded_at_field": null,
      "freshness": {
        "warn_after": { "count": null, "period": null },
        "error_after": { "count": null, "period": null },
        "filter": null
      },
      "external": null,
      "description": "main customer table",
      "columns": {
        "c_custkey": {
          "name": "c_custkey",
          "description": "unique customer key",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "c_name": {
          "name": "c_name",
          "description": "customer id",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "c_address": {
          "name": "c_address",
          "description": "address of the customer",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "c_nationkey": {
          "name": "c_nationkey",
          "description": "foreign key to stg_tpch_nations",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "c_phone": {
          "name": "c_phone",
          "description": "phone number of the customer",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "c_acctbal": {
          "name": "c_acctbal",
          "description": "raw account balance",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "c_mktsegment": {
          "name": "c_mktsegment",
          "description": "market segment of the customer",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "c_comment": {
          "name": "c_comment",
          "description": "additional commentary",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        }
      },
      "meta": {},
      "source_meta": {},
      "tags": [],
      "config": { "enabled": true },
      "patch_path": null,
      "unrendered_config": {},
      "relation_name": "raw.tpch_sf001.customer",
      "created_at": 1665426351.935064
    },
    "source.tpch.tpch_test.lineitem": {
      "fqn": ["tpch", "staging", "tpch", "tpch_test", "lineitem"],
      "database": "raw",
      "schema": "tpch_sf001",
      "unique_id": "source.tpch.tpch_test.lineitem",
      "package_name": "tpch",
      "root_path": "/Users/sung/Desktop/dbt/dbt_env",
      "path": "models/staging/tpch/tpch_sources.yml",
      "original_file_path": "models/staging/tpch/tpch_sources.yml",
      "name": "lineitem",
      "source_name": "tpch_test",
      "source_description": "Welcome to the Fishtown Analytics demo dbt project! We use the [TPCH dataset](https://docs.snowflake.com/en/user-guide/sample-data-tpch.html) to create a sample project to emulate what a production project might look like!",
      "loader": "",
      "identifier": "lineitem",
      "resource_type": "source",
      "quoting": {
        "database": null,
        "schema": null,
        "identifier": null,
        "column": null
      },
      "loaded_at_field": "l_shipdate::timestamp",
      "freshness": {
        "warn_after": { "count": 6, "period": "hour" },
        "error_after": { "count": null, "period": null },
        "filter": null
      },
      "external": null,
      "description": "main lineitem table",
      "columns": {
        "l_orderkey": {
          "name": "l_orderkey",
          "description": "Foreign Key to O_ORDERKEY",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "l_partkey": {
          "name": "l_partkey",
          "description": "Foreign key to P_PARTKEY, first part of the compound Foreign Key to (PS_PARTKEY,PS_SUPPKEY) with L_SUPPKEY",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "l_suppkey": {
          "name": "l_suppkey",
          "description": "Foreign key to S_SUPPKEY, second part of the compound Foreign Key to (PS_PARTKEY, PS_SUPPKEY) with L_PARTKEY",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "l_linenumber": {
          "name": "l_linenumber",
          "description": "sequence of the order items within the order",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "l_quantity": {
          "name": "l_quantity",
          "description": "total units",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "l_extendedprice": {
          "name": "l_extendedprice",
          "description": "line item price",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "l_discount": {
          "name": "l_discount",
          "description": "percentage of the discount",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "l_tax": {
          "name": "l_tax",
          "description": "tax rate of the order item",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "l_returnflag": {
          "name": "l_returnflag",
          "description": "letter determining the status of the return",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "l_linestatus": {
          "name": "l_linestatus",
          "description": "status code of the order item",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "l_shipdate": {
          "name": "l_shipdate",
          "description": "the date the order item is being shipped",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "l_commitdate": {
          "name": "l_commitdate",
          "description": "the date the order item is being commited",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "l_receiptdate": {
          "name": "l_receiptdate",
          "description": "the receipt date of the order item",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "l_shipinstruct": {
          "name": "l_shipinstruct",
          "description": "additional instructions on the shipment",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "l_shipmode": {
          "name": "l_shipmode",
          "description": "method of shipping",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "l_comment": {
          "name": "l_comment",
          "description": "additional commentary",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        }
      },
      "meta": {},
      "source_meta": {},
      "tags": [],
      "config": { "enabled": true },
      "patch_path": null,
      "unrendered_config": {},
      "relation_name": "raw.tpch_sf001.lineitem",
      "created_at": 1665426351.95531
    },
    "source.tpch.tpch_test.nation": {
      "fqn": ["tpch", "staging", "tpch", "tpch_test", "nation"],
      "database": "raw",
      "schema": "tpch_sf001",
      "unique_id": "source.tpch.tpch_test.nation",
      "package_name": "tpch",
      "root_path": "/Users/sung/Desktop/dbt/dbt_env",
      "path": "models/staging/tpch/tpch_sources.yml",
      "original_file_path": "models/staging/tpch/tpch_sources.yml",
      "name": "nation",
      "source_name": "tpch_test",
      "source_description": "Welcome to the Fishtown Analytics demo dbt project! We use the [TPCH dataset](https://docs.snowflake.com/en/user-guide/sample-data-tpch.html) to create a sample project to emulate what a production project might look like!",
      "loader": "",
      "identifier": "nation",
      "resource_type": "source",
      "quoting": {
        "database": null,
        "schema": null,
        "identifier": null,
        "column": null
      },
      "loaded_at_field": null,
      "freshness": {
        "warn_after": { "count": null, "period": null },
        "error_after": { "count": null, "period": null },
        "filter": null
      },
      "external": null,
      "description": "nation mapping",
      "columns": {
        "n_nationkey": {
          "name": "n_nationkey",
          "description": "25 nations are populated",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "n_name": {
          "name": "n_name",
          "description": "nation name",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "n_regionkey": {
          "name": "n_regionkey",
          "description": "Foreign Key to R_REGIONKEY",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "n_comment": {
          "name": "n_comment",
          "description": "additional commentary",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        }
      },
      "meta": {},
      "source_meta": {},
      "tags": [],
      "config": { "enabled": true },
      "patch_path": null,
      "unrendered_config": {},
      "relation_name": "raw.tpch_sf001.nation",
      "created_at": 1665426351.968755
    },
    "source.tpch.tpch_test.part": {
      "fqn": ["tpch", "staging", "tpch", "tpch_test", "part"],
      "database": "raw",
      "schema": "tpch_sf001",
      "unique_id": "source.tpch.tpch_test.part",
      "package_name": "tpch",
      "root_path": "/Users/sung/Desktop/dbt/dbt_env",
      "path": "models/staging/tpch/tpch_sources.yml",
      "original_file_path": "models/staging/tpch/tpch_sources.yml",
      "name": "part",
      "source_name": "tpch_test",
      "source_description": "Welcome to the Fishtown Analytics demo dbt project! We use the [TPCH dataset](https://docs.snowflake.com/en/user-guide/sample-data-tpch.html) to create a sample project to emulate what a production project might look like!",
      "loader": "",
      "identifier": "part",
      "resource_type": "source",
      "quoting": {
        "database": null,
        "schema": null,
        "identifier": null,
        "column": null
      },
      "loaded_at_field": null,
      "freshness": {
        "warn_after": { "count": null, "period": null },
        "error_after": { "count": null, "period": null },
        "filter": null
      },
      "external": null,
      "description": "main part table",
      "columns": {
        "p_partkey": {
          "name": "p_partkey",
          "description": "SF*200,000 are populated",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "p_name": {
          "name": "p_name",
          "description": "name of the part",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "p_mfgr": {
          "name": "p_mfgr",
          "description": "manufacturer of the part",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "p_brand": {
          "name": "p_brand",
          "description": "brand of the part",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "p_type": {
          "name": "p_type",
          "description": "type of part including material",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "p_size": {
          "name": "p_size",
          "description": "size of the part",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "p_container": {
          "name": "p_container",
          "description": "container of the part",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "p_retailprice": {
          "name": "p_retailprice",
          "description": "raw retail price",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "p_comment": {
          "name": "p_comment",
          "description": "additional commentary",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        }
      },
      "meta": {},
      "source_meta": {},
      "tags": [],
      "config": { "enabled": true },
      "patch_path": null,
      "unrendered_config": {},
      "relation_name": "raw.tpch_sf001.part",
      "created_at": 1665426351.97331
    },
    "source.tpch.tpch_test.partsupp": {
      "fqn": ["tpch", "staging", "tpch", "tpch_test", "partsupp"],
      "database": "raw",
      "schema": "tpch_sf001",
      "unique_id": "source.tpch.tpch_test.partsupp",
      "package_name": "tpch",
      "root_path": "/Users/sung/Desktop/dbt/dbt_env",
      "path": "models/staging/tpch/tpch_sources.yml",
      "original_file_path": "models/staging/tpch/tpch_sources.yml",
      "name": "partsupp",
      "source_name": "tpch_test",
      "source_description": "Welcome to the Fishtown Analytics demo dbt project! We use the [TPCH dataset](https://docs.snowflake.com/en/user-guide/sample-data-tpch.html) to create a sample project to emulate what a production project might look like!",
      "loader": "",
      "identifier": "partsupp",
      "resource_type": "source",
      "quoting": {
        "database": null,
        "schema": null,
        "identifier": null,
        "column": null
      },
      "loaded_at_field": null,
      "freshness": {
        "warn_after": { "count": null, "period": null },
        "error_after": { "count": null, "period": null },
        "filter": null
      },
      "external": null,
      "description": "main part supplier table",
      "columns": {
        "ps_partkey": {
          "name": "ps_partkey",
          "description": "Foreign Key to P_PARTKEY",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "ps_suppkey": {
          "name": "ps_suppkey",
          "description": "Foreign Key to S_SUPPKEY",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "ps_availqty": {
          "name": "ps_availqty",
          "description": "raw available quantity",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "ps_supplycost": {
          "name": "ps_supplycost",
          "description": "raw cost",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "ps_comment": {
          "name": "ps_comment",
          "description": "additional commentary",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        }
      },
      "meta": {},
      "source_meta": {},
      "tags": [],
      "config": { "enabled": true },
      "patch_path": null,
      "unrendered_config": {},
      "relation_name": "raw.tpch_sf001.partsupp",
      "created_at": 1665426351.9888809
    },
    "source.tpch.tpch_test.region": {
      "fqn": ["tpch", "staging", "tpch", "tpch_test", "region"],
      "database": "raw",
      "schema": "tpch_sf001",
      "unique_id": "source.tpch.tpch_test.region",
      "package_name": "tpch",
      "root_path": "/Users/sung/Desktop/dbt/dbt_env",
      "path": "models/staging/tpch/tpch_sources.yml",
      "original_file_path": "models/staging/tpch/tpch_sources.yml",
      "name": "region",
      "source_name": "tpch_test",
      "source_description": "Welcome to the Fishtown Analytics demo dbt project! We use the [TPCH dataset](https://docs.snowflake.com/en/user-guide/sample-data-tpch.html) to create a sample project to emulate what a production project might look like!",
      "loader": "",
      "identifier": "region",
      "resource_type": "source",
      "quoting": {
        "database": null,
        "schema": null,
        "identifier": null,
        "column": null
      },
      "loaded_at_field": null,
      "freshness": {
        "warn_after": { "count": null, "period": null },
        "error_after": { "count": null, "period": null },
        "filter": null
      },
      "external": null,
      "description": "region mapping",
      "columns": {
        "r_regionkey": {
          "name": "r_regionkey",
          "description": "5 regions are populated",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "r_name": {
          "name": "r_name",
          "description": "region name",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "r_comment": {
          "name": "r_comment",
          "description": "additional commentary",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        }
      },
      "meta": {},
      "source_meta": {},
      "tags": [],
      "config": { "enabled": true },
      "patch_path": null,
      "unrendered_config": {},
      "relation_name": "raw.tpch_sf001.region",
      "created_at": 1665426351.996256
    },
    "source.tpch.tpch_test.supplier": {
      "fqn": ["tpch", "staging", "tpch", "tpch_test", "supplier"],
      "database": "raw",
      "schema": "tpch_sf001",
      "unique_id": "source.tpch.tpch_test.supplier",
      "package_name": "tpch",
      "root_path": "/Users/sung/Desktop/dbt/dbt_env",
      "path": "models/staging/tpch/tpch_sources.yml",
      "original_file_path": "models/staging/tpch/tpch_sources.yml",
      "name": "supplier",
      "source_name": "tpch_test",
      "source_description": "Welcome to the Fishtown Analytics demo dbt project! We use the [TPCH dataset](https://docs.snowflake.com/en/user-guide/sample-data-tpch.html) to create a sample project to emulate what a production project might look like!",
      "loader": "",
      "identifier": "supplier",
      "resource_type": "source",
      "quoting": {
        "database": null,
        "schema": null,
        "identifier": null,
        "column": null
      },
      "loaded_at_field": null,
      "freshness": {
        "warn_after": { "count": null, "period": null },
        "error_after": { "count": null, "period": null },
        "filter": null
      },
      "external": null,
      "description": "main supplier table",
      "columns": {
        "s_suppkey": {
          "name": "s_suppkey",
          "description": "SF*10,000 are populated",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "s_name": {
          "name": "s_name",
          "description": "id of the supplier",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "s_address": {
          "name": "s_address",
          "description": "address of the supplier",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "s_nationkey": {
          "name": "s_nationkey",
          "description": "Foreign Key to N_NATIONKEY",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "s_phone": {
          "name": "s_phone",
          "description": "phone number of the supplier",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "s_acctbal": {
          "name": "s_acctbal",
          "description": "raw account balance",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "s_comment": {
          "name": "s_comment",
          "description": "additional commentary",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        }
      },
      "meta": {},
      "source_meta": {},
      "tags": [],
      "config": { "enabled": true },
      "patch_path": null,
      "unrendered_config": {},
      "relation_name": "raw.tpch_sf001.supplier",
      "created_at": 1665426352.0118241
    },
    "source.tpch.deutsche_boerse.trading_data": {
      "fqn": ["tpch", "demo_examples", "deutsche_boerse", "trading_data"],
      "database": "analytics",
      "schema": "boerse",
      "unique_id": "source.tpch.deutsche_boerse.trading_data",
      "package_name": "tpch",
      "root_path": "/Users/sung/Desktop/dbt/dbt_env",
      "path": "models/demo_examples/external_sources.yml",
      "original_file_path": "models/demo_examples/external_sources.yml",
      "name": "trading_data",
      "source_name": "deutsche_boerse",
      "source_description": "This is an example of using external sources",
      "loader": "",
      "identifier": "trading_data",
      "resource_type": "source",
      "quoting": {
        "database": null,
        "schema": null,
        "identifier": null,
        "column": null
      },
      "loaded_at_field": null,
      "freshness": {
        "warn_after": { "count": null, "period": null },
        "error_after": { "count": null, "period": null },
        "filter": null
      },
      "external": {
        "location": "@boerse",
        "file_format": "(type=csv field_delimiter=',' skip_header=1)",
        "row_format": null,
        "tbl_properties": null,
        "partitions": [
          {
            "name": "source_file_name",
            "description": "",
            "data_type": "varchar",
            "meta": {},
            "expression": "metadata$filename"
          }
        ],
        "auto_refresh": false
      },
      "description": "The Deutsche B\u00f6rse Public Data Set consists of trade data aggregated to one minute intervals from the Eurex and Xetra trading systems. It provides the initial price, lowest price, highest price, final price and volume for every minute of the trading day, and for every tradeable security.\n",
      "columns": {
        "ISIN": {
          "name": "ISIN",
          "description": "ISIN of the security",
          "meta": {},
          "data_type": "TEXT",
          "quote": null,
          "tags": []
        },
        "MarketSegment": {
          "name": "MarketSegment",
          "description": "The product market segment, following the convention on http://www.eurexchange.com",
          "meta": {},
          "data_type": "TEXT",
          "quote": null,
          "tags": []
        },
        "UnderlyingSymbol": {
          "name": "UnderlyingSymbol",
          "description": "The underlying security",
          "meta": {},
          "data_type": "TEXT",
          "quote": null,
          "tags": []
        },
        "UnderlyingISIN": {
          "name": "UnderlyingISIN",
          "description": "ISIN of any underlying security\t",
          "meta": {},
          "data_type": "TEXT",
          "quote": null,
          "tags": []
        },
        "Currency": {
          "name": "Currency",
          "description": "Currency in which the product is traded\t(ISO 4127)",
          "meta": {},
          "data_type": "TEXT",
          "quote": null,
          "tags": []
        },
        "SecurityType": {
          "name": "SecurityType",
          "description": "Type of instrument",
          "meta": {},
          "data_type": "TEXT",
          "quote": null,
          "tags": []
        },
        "MaturityDate": {
          "name": "MaturityDate",
          "description": "Maturity date of the security",
          "meta": {},
          "data_type": "TEXT",
          "quote": null,
          "tags": []
        },
        "StrikePrice": {
          "name": "StrikePrice",
          "description": "Strike price",
          "meta": {},
          "data_type": "NUMBER",
          "quote": null,
          "tags": []
        },
        "PutOrCall": {
          "name": "PutOrCall",
          "description": "Type of option (string: PUT or CALL)",
          "meta": {},
          "data_type": "TEXT",
          "quote": null,
          "tags": []
        },
        "MLEG": {
          "name": "MLEG",
          "description": "Identifies multi-leg options",
          "meta": {},
          "data_type": "TEXT",
          "quote": null,
          "tags": []
        },
        "ContractGenerationNumber": {
          "name": "ContractGenerationNumber",
          "description": "The generation number for options contracts",
          "meta": {},
          "data_type": "TEXT",
          "quote": null,
          "tags": []
        },
        "SecurityID": {
          "name": "SecurityID",
          "description": "Unique identifier for each contract",
          "meta": {},
          "data_type": "TEXT",
          "quote": null,
          "tags": []
        },
        "Date": {
          "name": "Date",
          "description": "Date of trading period",
          "meta": {},
          "data_type": "DATE",
          "quote": null,
          "tags": []
        },
        "Time": {
          "name": "Time",
          "description": "Minute of trading to which this entry relates",
          "meta": {},
          "data_type": "TEXT",
          "quote": null,
          "tags": []
        },
        "StartPrice": {
          "name": "StartPrice",
          "description": "Trading price at the start of period",
          "meta": {},
          "data_type": "NUMBER",
          "quote": null,
          "tags": []
        },
        "MaxPrice": {
          "name": "MaxPrice",
          "description": "Maximum price over the period",
          "meta": {},
          "data_type": "NUMBER",
          "quote": null,
          "tags": []
        },
        "MinPrice": {
          "name": "MinPrice",
          "description": "Minimum price over the period",
          "meta": {},
          "data_type": "NUMBER",
          "quote": null,
          "tags": []
        },
        "EndPrice": {
          "name": "EndPrice",
          "description": "Trading price at the end of the period",
          "meta": {},
          "data_type": "NUMBER",
          "quote": null,
          "tags": []
        },
        "NumberOfContracts": {
          "name": "NumberOfContracts",
          "description": "Number of contracts traded during the period",
          "meta": {},
          "data_type": "INT",
          "quote": null,
          "tags": []
        },
        "NumberOfTrades": {
          "name": "NumberOfTrades",
          "description": "Number of distinct trades during the period",
          "meta": {},
          "data_type": "INT",
          "quote": null,
          "tags": []
        }
      },
      "meta": {},
      "source_meta": {},
      "tags": [],
      "config": { "enabled": true },
      "patch_path": null,
      "unrendered_config": {},
      "relation_name": "analytics.boerse.trading_data",
      "created_at": 1665426352.0120661
    },
    "source.dbt_artifacts.dbt_artifacts.artifacts": {
      "fqn": ["dbt_artifacts", "staging", "dbt_artifacts", "artifacts"],
      "database": "ANALYTICS",
      "schema": "dbt_artifacts_sung",
      "unique_id": "source.dbt_artifacts.dbt_artifacts.artifacts",
      "package_name": "dbt_artifacts",
      "root_path": "/Users/sung/Desktop/dbt/dbt_env/dbt_packages/dbt_artifacts",
      "path": "models/staging/sources.yml",
      "original_file_path": "models/staging/sources.yml",
      "name": "artifacts",
      "source_name": "dbt_artifacts",
      "source_description": "",
      "loader": "",
      "identifier": "artifacts",
      "resource_type": "source",
      "quoting": {
        "database": null,
        "schema": null,
        "identifier": null,
        "column": null
      },
      "loaded_at_field": null,
      "freshness": {
        "warn_after": { "count": null, "period": null },
        "error_after": { "count": null, "period": null },
        "filter": null
      },
      "external": null,
      "description": "The source table containing loaded dbt artifacts. All of the artifacts must be loaded into this table. See the README for more info.\n",
      "columns": {
        "data": {
          "name": "data",
          "description": "A variant type object containing all the artifact's data.",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "generated_at": {
          "name": "generated_at",
          "description": "Timestamp for when the artifact was generated.",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "path": {
          "name": "path",
          "description": "The path of the artifact in the external stage.",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "artifact_type": {
          "name": "artifact_type",
          "description": "The type of the artifact, e.g. manifest.json",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        }
      },
      "meta": {},
      "source_meta": {},
      "tags": [],
      "config": { "enabled": true },
      "patch_path": null,
      "unrendered_config": {},
      "relation_name": "ANALYTICS.dbt_artifacts_sung.artifacts",
      "created_at": 1665426352.012227
    }
  },
  "macros": {
    "macro.tpch.cents_to_dollars": {
      "unique_id": "macro.tpch.cents_to_dollars",
      "package_name": "tpch",
      "root_path": "/Users/sung/Desktop/dbt/dbt_env",
      "path": "macros/cents_to_dollars.sql",
      "original_file_path": "macros/cents_to_dollars.sql",
      "name": "cents_to_dollars",
      "macro_sql": "{% macro cents_to_dollars(column_name, precision=2) -%}\n    ({{ column_name }} / 100)::numeric(16, {{ precision }})\n{%- endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": { "macros": [] },
      "description": "A macro to convert cents to dollars",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": "tpch://macros/macro.yml",
      "arguments": [
        {
          "name": "column_name",
          "type": "STRING",
          "description": "The name of the column you want to convert"
        },
        {
          "name": "precision",
          "type": "INTEGER",
          "description": "Number of decimal places. Defaults to 2."
        }
      ],
      "created_at": 1665426351.757648,
      "supported_languages": null
    },
    "macro.tpch.limit_data_in_dev": {
      "unique_id": "macro.tpch.limit_data_in_dev",
      "package_name": "tpch",
      "root_path": "/Users/sung/Desktop/dbt/dbt_env",
      "path": "macros/limit_data_in_dev.sql",
      "original_file_path": "macros/limit_data_in_dev.sql",
      "name": "limit_data_in_dev",
      "macro_sql": "{% macro limit_data_in_dev(filter_column_name, lookback_days=7) %}\n\n{% if target.name == 'dev' %}\n\n\nwhere {{ filter_column_name }} >= dateadd('day', -{{ lookback_days }}, current_timestamp)\n{% endif %}\n\n\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": { "macros": [] },
      "description": "A macro to show conditional logic to limit data when working in dev.",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": "tpch://macros/macro.yml",
      "arguments": [
        {
          "name": "filter_column_name",
          "type": "DATE",
          "description": "The name of the column you want to convert"
        },
        {
          "name": "lookback_days",
          "type": "NUMBER",
          "description": "Number of lookback days. Defaults to 7."
        }
      ],
      "created_at": 1665426351.761297,
      "supported_languages": null
    },
    "macro.tpch.grant_all_on_schemas": {
      "unique_id": "macro.tpch.grant_all_on_schemas",
      "package_name": "tpch",
      "root_path": "/Users/sung/Desktop/dbt/dbt_env",
      "path": "macros/grant_all_on_schemas.sql",
      "original_file_path": "macros/grant_all_on_schemas.sql",
      "name": "grant_all_on_schemas",
      "macro_sql": "{% macro grant_all_on_schemas(schemas, role) %}\n  {% for schema in schemas %}\n    grant usage on schema {{ schema }} to role {{ role }};\n    grant select on all tables in schema {{ schema }} to role {{ role }};\n    grant select on all views in schema {{ schema }} to role {{ role }};\n    grant select on future tables in schema {{ schema }} to role {{ role }};\n    grant select on future views in schema {{ schema }} to role {{ role }};\n  {% endfor %}\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": { "macros": [] },
      "description": "An example of how to grant permissions on schema",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": "tpch://macros/macro.yml",
      "arguments": [
        {
          "name": "schemas",
          "type": "STRING",
          "description": "name of the schema you would like to give the role access to"
        },
        {
          "name": "role",
          "type": "STRING",
          "description": "user/role within your warehouse you would like to give dbt access to"
        }
      ],
      "created_at": 1665426351.766998,
      "supported_languages": null
    },
    "macro.tpch.block_on_tests": {
      "unique_id": "macro.tpch.block_on_tests",
      "package_name": "tpch",
      "root_path": "/Users/sung/Desktop/dbt/dbt_env",
      "path": "macros/block_on_tests.sql",
      "original_file_path": "macros/block_on_tests.sql",
      "name": "block_on_tests",
      "macro_sql": "{% macro block_on_tests(list_of_test_macros) %}\n\n    {% if execute %}\n        {% for test in list_of_test_macros %}\n            {% set results = run_query(test) %}\n            {% if results[0][0] == 0 %}\n                -- TEST {{loop.index}}: PASS\n            {% else %}\n                {% set msg %} TEST {{loop.index}}: FAIL {% endset %}\n                {% do exceptions.raise_compiler_error(msg) %}\n            {% endif %}\n        {% endfor %}\n    {% endif %}\n    \n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": { "macros": ["macro.dbt.run_query"] },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1665426349.435251,
      "supported_languages": null
    },
    "macro.tpch.create_udfs": {
      "unique_id": "macro.tpch.create_udfs",
      "package_name": "tpch",
      "root_path": "/Users/sung/Desktop/dbt/dbt_env",
      "path": "macros/create_udfs.sql",
      "original_file_path": "macros/create_udfs.sql",
      "name": "create_udfs",
      "macro_sql": "{% macro create_udfs() %}\n\n{% do run_query(create_area_of_circle()) %}\n\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": ["macro.dbt.run_query", "macro.tpch.create_area_of_circle"]
      },
      "description": "An example of how to create UDFs via macros",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": "tpch://macros/macro.yml",
      "arguments": [],
      "created_at": 1665426351.764606,
      "supported_languages": null
    },
    "macro.tpch.money": {
      "unique_id": "macro.tpch.money",
      "package_name": "tpch",
      "root_path": "/Users/sung/Desktop/dbt/dbt_env",
      "path": "macros/convert_money.sql",
      "original_file_path": "macros/convert_money.sql",
      "name": "money",
      "macro_sql": "{% macro money(col) -%}\n::decimal(16,4)\n{%- endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": { "macros": [] },
      "description": "A macro to convert a column to consistent precision",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": "tpch://macros/macro.yml",
      "arguments": [
        {
          "name": "col",
          "type": "INTEGER",
          "description": "column getting converted to decimal(16,4)"
        }
      ],
      "created_at": 1665426351.76378,
      "supported_languages": null
    },
    "macro.tpch.create_area_of_circle": {
      "unique_id": "macro.tpch.create_area_of_circle",
      "package_name": "tpch",
      "root_path": "/Users/sung/Desktop/dbt/dbt_env",
      "path": "macros/udf_area_of_circle.sql",
      "original_file_path": "macros/udf_area_of_circle.sql",
      "name": "create_area_of_circle",
      "macro_sql": "{% macro create_area_of_circle() %}\n\nuse database {{target.database}};\n\ndrop function if exists {{target.schema}}.area_of_circle(float);\n\ncreate function {{target.schema}}.area_of_circle(radius float)\n  returns float\n  as\n  $$\n    pi() * radius * radius\n  $$\n  ;\n\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": { "macros": [] },
      "description": "Continuation of UDF example",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": "tpch://macros/macro.yml",
      "arguments": [],
      "created_at": 1665426351.768053,
      "supported_languages": null
    },
    "macro.tpch.unit_test_mode": {
      "unique_id": "macro.tpch.unit_test_mode",
      "package_name": "tpch",
      "root_path": "/Users/sung/Desktop/dbt/dbt_env",
      "path": "macros/unit_test_mode.sql",
      "original_file_path": "macros/unit_test_mode.sql",
      "name": "unit_test_mode",
      "macro_sql": "{% macro unit_test_mode() %}\n  \n  {% if var is not defined %}\n    {{ return(False) }}\n\n  {% elif var('test') == 'true' %}\n     {{ return(True) }}\n\n  {% else %}\n    {{ return(False) }}\n\n  {% endif %}\n\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": { "macros": [] },
      "description": "An example of how to create a unit test",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": "tpch://macros/macro.yml",
      "arguments": [],
      "created_at": 1665426351.767544,
      "supported_languages": null
    },
    "macro.tpch.test_all_values_gte_zero": {
      "unique_id": "macro.tpch.test_all_values_gte_zero",
      "package_name": "tpch",
      "root_path": "/Users/sung/Desktop/dbt/dbt_env",
      "path": "macros/test_all_values_gte_zero.sql",
      "original_file_path": "macros/test_all_values_gte_zero.sql",
      "name": "test_all_values_gte_zero",
      "macro_sql": "{% macro test_all_values_gte_zero(table, column) %}\n\nselect * from {{ ref(table) }} where {{ column }} < 0\n\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": { "macros": [] },
      "description": "Macro to ensure values are greater than zero -- perfect for data tests",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": "tpch://macros/macro.yml",
      "arguments": [
        {
          "name": "table",
          "type": "STRING",
          "description": "name of the table being tested"
        },
        {
          "name": "column",
          "type": "STRING",
          "description": "name of the column being tested"
        }
      ],
      "created_at": 1665426351.7702332,
      "supported_languages": null
    },
    "macro.tpch.standard_account_fields": {
      "unique_id": "macro.tpch.standard_account_fields",
      "package_name": "tpch",
      "root_path": "/Users/sung/Desktop/dbt/dbt_env",
      "path": "macros/standard_account_fields.sql",
      "original_file_path": "macros/standard_account_fields.sql",
      "name": "standard_account_fields",
      "macro_sql": "{% macro standard_account_fields() %}\n\n{%- set return_fields = [\"gross_item_sales_amount\", \n                        \"item_discount_amount\",\n                        \"item_tax_amount\",\n                        \"net_item_sales_amount\"]\n                        -%}\n\n {%- for field in return_fields %}\n     {{ field }}{% if not loop.last %},{% endif %}{% endfor -%}\n\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": { "macros": [] },
      "description": "An example of using a macro to standardize the fiels within the analysis",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": "tpch://macros/macro.yml",
      "arguments": [
        {
          "name": "return_fields",
          "type": "STRING",
          "description": "fields you would like returned for analysis"
        }
      ],
      "created_at": 1665426351.771441,
      "supported_languages": null
    },
    "macro.dbt_snowflake.snowflake__get_catalog": {
      "unique_id": "macro.dbt_snowflake.snowflake__get_catalog",
      "package_name": "dbt_snowflake",
      "root_path": "/Users/sung/Desktop/dbt/env/lib/python3.8/site-packages/dbt/include/snowflake",
      "path": "macros/catalog.sql",
      "original_file_path": "macros/catalog.sql",
      "name": "snowflake__get_catalog",
      "macro_sql": "{% macro snowflake__get_catalog(information_schema, schemas) -%}\n  {% set query %}\n      with tables as (\n\n          select\n              table_catalog as \"table_database\",\n              table_schema as \"table_schema\",\n              table_name as \"table_name\",\n              table_type as \"table_type\",\n              comment as \"table_comment\",\n\n              -- note: this is the _role_ that owns the table\n              table_owner as \"table_owner\",\n\n              'Clustering Key' as \"stats:clustering_key:label\",\n              clustering_key as \"stats:clustering_key:value\",\n              'The key used to cluster this table' as \"stats:clustering_key:description\",\n              (clustering_key is not null) as \"stats:clustering_key:include\",\n\n              'Row Count' as \"stats:row_count:label\",\n              row_count as \"stats:row_count:value\",\n              'An approximate count of rows in this table' as \"stats:row_count:description\",\n              (row_count is not null) as \"stats:row_count:include\",\n\n              'Approximate Size' as \"stats:bytes:label\",\n              bytes as \"stats:bytes:value\",\n              'Approximate size of the table as reported by Snowflake' as \"stats:bytes:description\",\n              (bytes is not null) as \"stats:bytes:include\",\n\n              'Last Modified' as \"stats:last_modified:label\",\n              to_varchar(convert_timezone('UTC', last_altered), 'yyyy-mm-dd HH24:MI'||'UTC') as \"stats:last_modified:value\",\n              'The timestamp for last update/change' as \"stats:last_modified:description\",\n              (last_altered is not null and table_type='BASE TABLE') as \"stats:last_modified:include\"\n\n          from {{ information_schema }}.tables\n\n      ),\n\n      columns as (\n\n          select\n              table_catalog as \"table_database\",\n              table_schema as \"table_schema\",\n              table_name as \"table_name\",\n\n              column_name as \"column_name\",\n              ordinal_position as \"column_index\",\n              data_type as \"column_type\",\n              comment as \"column_comment\"\n\n          from {{ information_schema }}.columns\n      )\n\n      select *\n      from tables\n      join columns using (\"table_database\", \"table_schema\", \"table_name\")\n      where (\n        {%- for schema in schemas -%}\n          upper(\"table_schema\") = upper('{{ schema }}'){%- if not loop.last %} or {% endif -%}\n        {%- endfor -%}\n      )\n      order by \"column_index\"\n    {%- endset -%}\n\n  {{ return(run_query(query)) }}\n\n{%- endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": { "macros": ["macro.dbt.run_query"] },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1665426349.444125,
      "supported_languages": null
    },
    "macro.dbt_snowflake.snowflake__create_table_as": {
      "unique_id": "macro.dbt_snowflake.snowflake__create_table_as",
      "package_name": "dbt_snowflake",
      "root_path": "/Users/sung/Desktop/dbt/env/lib/python3.8/site-packages/dbt/include/snowflake",
      "path": "macros/adapters.sql",
      "original_file_path": "macros/adapters.sql",
      "name": "snowflake__create_table_as",
      "macro_sql": "{% macro snowflake__create_table_as(temporary, relation, sql) -%}\n  {%- set transient = config.get('transient', default=true) -%}\n  {%- set cluster_by_keys = config.get('cluster_by', default=none) -%}\n  {%- set enable_automatic_clustering = config.get('automatic_clustering', default=false) -%}\n  {%- set copy_grants = config.get('copy_grants', default=false) -%}\n\n  {%- if cluster_by_keys is not none and cluster_by_keys is string -%}\n    {%- set cluster_by_keys = [cluster_by_keys] -%}\n  {%- endif -%}\n  {%- if cluster_by_keys is not none -%}\n    {%- set cluster_by_string = cluster_by_keys|join(\", \")-%}\n  {% else %}\n    {%- set cluster_by_string = none -%}\n  {%- endif -%}\n  {%- set sql_header = config.get('sql_header', none) -%}\n\n  {{ sql_header if sql_header is not none }}\n\n      create or replace {% if temporary -%}\n        temporary\n      {%- elif transient -%}\n        transient\n      {%- endif %} table {{ relation }} {% if copy_grants and not temporary -%} copy grants {%- endif %} as\n      (\n        {%- if cluster_by_string is not none -%}\n          select * from(\n            {{ sql }}\n            ) order by ({{ cluster_by_string }})\n        {%- else -%}\n          {{ sql }}\n        {%- endif %}\n      );\n    {% if cluster_by_string is not none and not temporary -%}\n      alter table {{relation}} cluster by ({{cluster_by_string}});\n    {%- endif -%}\n    {% if enable_automatic_clustering and cluster_by_string is not none and not temporary  -%}\n      alter table {{relation}} resume recluster;\n    {%- endif -%}\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": { "macros": [] },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1665426349.470036,
      "supported_languages": null
    },
    "macro.dbt_snowflake.get_column_comment_sql": {
      "unique_id": "macro.dbt_snowflake.get_column_comment_sql",
      "package_name": "dbt_snowflake",
      "root_path": "/Users/sung/Desktop/dbt/env/lib/python3.8/site-packages/dbt/include/snowflake",
      "path": "macros/adapters.sql",
      "original_file_path": "macros/adapters.sql",
      "name": "get_column_comment_sql",
      "macro_sql": "{% macro get_column_comment_sql(column_name, column_dict) %}\n  {{ adapter.quote(column_name) if column_dict[column_name]['quote'] else column_name }} COMMENT $${{ column_dict[column_name]['description'] | replace('$', '[$]') }}$$\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": { "macros": [] },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1665426349.471013,
      "supported_languages": null
    },
    "macro.dbt_snowflake.get_persist_docs_column_list": {
      "unique_id": "macro.dbt_snowflake.get_persist_docs_column_list",
      "package_name": "dbt_snowflake",
      "root_path": "/Users/sung/Desktop/dbt/env/lib/python3.8/site-packages/dbt/include/snowflake",
      "path": "macros/adapters.sql",
      "original_file_path": "macros/adapters.sql",
      "name": "get_persist_docs_column_list",
      "macro_sql": "{% macro get_persist_docs_column_list(model_columns, query_columns) %}\n(\n  {% for column_name in query_columns %}\n    {% if (column_name|upper in model_columns) or (column_name in model_columns) %}\n      {{ get_column_comment_sql(column_name, model_columns) }}\n    {% else %}\n      {{column_name}}\n    {% endif %}\n    {{ \", \" if not loop.last else \"\" }}\n  {% endfor %}\n)\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": ["macro.dbt_snowflake.get_column_comment_sql"]
      },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1665426349.472335,
      "supported_languages": null
    },
    "macro.dbt_snowflake.snowflake__create_view_as": {
      "unique_id": "macro.dbt_snowflake.snowflake__create_view_as",
      "package_name": "dbt_snowflake",
      "root_path": "/Users/sung/Desktop/dbt/env/lib/python3.8/site-packages/dbt/include/snowflake",
      "path": "macros/adapters.sql",
      "original_file_path": "macros/adapters.sql",
      "name": "snowflake__create_view_as",
      "macro_sql": "{% macro snowflake__create_view_as(relation, sql) -%}\n  {%- set secure = config.get('secure', default=false) -%}\n  {%- set copy_grants = config.get('copy_grants', default=false) -%}\n  {%- set sql_header = config.get('sql_header', none) -%}\n\n  {{ sql_header if sql_header is not none }}\n  create or replace {% if secure -%}\n    secure\n  {%- endif %} view {{ relation }}\n  {% if config.persist_column_docs() -%}\n    {% set model_columns = model.columns %}\n    {% set query_columns = get_columns_in_query(sql) %}\n    {{ get_persist_docs_column_list(model_columns, query_columns) }}\n\n  {%- endif %}\n  {% if copy_grants -%} copy grants {%- endif %} as (\n    {{ sql }}\n  );\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": [
          "macro.dbt.get_columns_in_query",
          "macro.dbt_snowflake.get_persist_docs_column_list"
        ]
      },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1665426349.474553,
      "supported_languages": null
    },
    "macro.dbt_snowflake.snowflake__get_columns_in_relation": {
      "unique_id": "macro.dbt_snowflake.snowflake__get_columns_in_relation",
      "package_name": "dbt_snowflake",
      "root_path": "/Users/sung/Desktop/dbt/env/lib/python3.8/site-packages/dbt/include/snowflake",
      "path": "macros/adapters.sql",
      "original_file_path": "macros/adapters.sql",
      "name": "snowflake__get_columns_in_relation",
      "macro_sql": "{% macro snowflake__get_columns_in_relation(relation) -%}\n  {%- set sql -%}\n    describe table {{ relation }}\n  {%- endset -%}\n  {%- set result = run_query(sql) -%}\n\n  {% set maximum = 10000 %}\n  {% if (result | length) >= maximum %}\n    {% set msg %}\n      Too many columns in relation {{ relation }}! dbt can only get\n      information about relations with fewer than {{ maximum }} columns.\n    {% endset %}\n    {% do exceptions.raise_compiler_error(msg) %}\n  {% endif %}\n\n  {% set columns = [] %}\n  {% for row in result %}\n    {% do columns.append(api.Column.from_description(row['name'], row['type'])) %}\n  {% endfor %}\n  {% do return(columns) %}\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": { "macros": ["macro.dbt.run_query"] },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1665426349.477352,
      "supported_languages": null
    },
    "macro.dbt_snowflake.snowflake__list_schemas": {
      "unique_id": "macro.dbt_snowflake.snowflake__list_schemas",
      "package_name": "dbt_snowflake",
      "root_path": "/Users/sung/Desktop/dbt/env/lib/python3.8/site-packages/dbt/include/snowflake",
      "path": "macros/adapters.sql",
      "original_file_path": "macros/adapters.sql",
      "name": "snowflake__list_schemas",
      "macro_sql": "{% macro snowflake__list_schemas(database) -%}\n  {# 10k limit from here: https://docs.snowflake.net/manuals/sql-reference/sql/show-schemas.html#usage-notes #}\n  {% set maximum = 10000 %}\n  {% set sql -%}\n    show terse schemas in database {{ database }}\n    limit {{ maximum }}\n  {%- endset %}\n  {% set result = run_query(sql) %}\n  {% if (result | length) >= maximum %}\n    {% set msg %}\n      Too many schemas in database {{ database }}! dbt can only get\n      information about databases with fewer than {{ maximum }} schemas.\n    {% endset %}\n    {% do exceptions.raise_compiler_error(msg) %}\n  {% endif %}\n  {{ return(result) }}\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": { "macros": ["macro.dbt.run_query"] },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1665426349.479363,
      "supported_languages": null
    },
    "macro.dbt_snowflake.snowflake__list_relations_without_caching": {
      "unique_id": "macro.dbt_snowflake.snowflake__list_relations_without_caching",
      "package_name": "dbt_snowflake",
      "root_path": "/Users/sung/Desktop/dbt/env/lib/python3.8/site-packages/dbt/include/snowflake",
      "path": "macros/adapters.sql",
      "original_file_path": "macros/adapters.sql",
      "name": "snowflake__list_relations_without_caching",
      "macro_sql": "{% macro snowflake__list_relations_without_caching(schema_relation) %}\n  {%- set sql -%}\n    show terse objects in {{ schema_relation }}\n  {%- endset -%}\n\n  {%- set result = run_query(sql) -%}\n  {% set maximum = 10000 %}\n  {% if (result | length) >= maximum %}\n    {% set msg %}\n      Too many schemas in schema  {{ schema_relation }}! dbt can only get\n      information about schemas with fewer than {{ maximum }} objects.\n    {% endset %}\n    {% do exceptions.raise_compiler_error(msg) %}\n  {% endif %}\n  {%- do return(result) -%}\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": { "macros": ["macro.dbt.run_query"] },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1665426349.480921,
      "supported_languages": null
    },
    "macro.dbt_snowflake.snowflake__check_schema_exists": {
      "unique_id": "macro.dbt_snowflake.snowflake__check_schema_exists",
      "package_name": "dbt_snowflake",
      "root_path": "/Users/sung/Desktop/dbt/env/lib/python3.8/site-packages/dbt/include/snowflake",
      "path": "macros/adapters.sql",
      "original_file_path": "macros/adapters.sql",
      "name": "snowflake__check_schema_exists",
      "macro_sql": "{% macro snowflake__check_schema_exists(information_schema, schema) -%}\n  {% call statement('check_schema_exists', fetch_result=True) -%}\n        select count(*)\n        from {{ information_schema }}.schemata\n        where upper(schema_name) = upper('{{ schema }}')\n            and upper(catalog_name) = upper('{{ information_schema.database }}')\n  {%- endcall %}\n  {{ return(load_result('check_schema_exists').table) }}\n{%- endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": { "macros": ["macro.dbt.statement"] },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1665426349.4819121,
      "supported_languages": null
    },
    "macro.dbt_snowflake.snowflake__current_timestamp": {
      "unique_id": "macro.dbt_snowflake.snowflake__current_timestamp",
      "package_name": "dbt_snowflake",
      "root_path": "/Users/sung/Desktop/dbt/env/lib/python3.8/site-packages/dbt/include/snowflake",
      "path": "macros/adapters.sql",
      "original_file_path": "macros/adapters.sql",
      "name": "snowflake__current_timestamp",
      "macro_sql": "{% macro snowflake__current_timestamp() -%}\n  convert_timezone('UTC', current_timestamp())\n{%- endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": { "macros": [] },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1665426349.482209,
      "supported_languages": null
    },
    "macro.dbt_snowflake.snowflake__snapshot_string_as_time": {
      "unique_id": "macro.dbt_snowflake.snowflake__snapshot_string_as_time",
      "package_name": "dbt_snowflake",
      "root_path": "/Users/sung/Desktop/dbt/env/lib/python3.8/site-packages/dbt/include/snowflake",
      "path": "macros/adapters.sql",
      "original_file_path": "macros/adapters.sql",
      "name": "snowflake__snapshot_string_as_time",
      "macro_sql": "{% macro snowflake__snapshot_string_as_time(timestamp) -%}\n    {%- set result = \"to_timestamp_ntz('\" ~ timestamp ~ \"')\" -%}\n    {{ return(result) }}\n{%- endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": { "macros": [] },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1665426349.482798,
      "supported_languages": null
    },
    "macro.dbt_snowflake.snowflake__snapshot_get_time": {
      "unique_id": "macro.dbt_snowflake.snowflake__snapshot_get_time",
      "package_name": "dbt_snowflake",
      "root_path": "/Users/sung/Desktop/dbt/env/lib/python3.8/site-packages/dbt/include/snowflake",
      "path": "macros/adapters.sql",
      "original_file_path": "macros/adapters.sql",
      "name": "snowflake__snapshot_get_time",
      "macro_sql": "{% macro snowflake__snapshot_get_time() -%}\n  to_timestamp_ntz({{ current_timestamp() }})\n{%- endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": { "macros": ["macro.dbt_utils.current_timestamp"] },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1665426349.4831731,
      "supported_languages": null
    },
    "macro.dbt_snowflake.snowflake__rename_relation": {
      "unique_id": "macro.dbt_snowflake.snowflake__rename_relation",
      "package_name": "dbt_snowflake",
      "root_path": "/Users/sung/Desktop/dbt/env/lib/python3.8/site-packages/dbt/include/snowflake",
      "path": "macros/adapters.sql",
      "original_file_path": "macros/adapters.sql",
      "name": "snowflake__rename_relation",
      "macro_sql": "{% macro snowflake__rename_relation(from_relation, to_relation) -%}\n  {% call statement('rename_relation') -%}\n    alter table {{ from_relation }} rename to {{ to_relation }}\n  {%- endcall %}\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": { "macros": ["macro.dbt.statement"] },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1665426349.483724,
      "supported_languages": null
    },
    "macro.dbt_snowflake.snowflake__alter_column_type": {
      "unique_id": "macro.dbt_snowflake.snowflake__alter_column_type",
      "package_name": "dbt_snowflake",
      "root_path": "/Users/sung/Desktop/dbt/env/lib/python3.8/site-packages/dbt/include/snowflake",
      "path": "macros/adapters.sql",
      "original_file_path": "macros/adapters.sql",
      "name": "snowflake__alter_column_type",
      "macro_sql": "{% macro snowflake__alter_column_type(relation, column_name, new_column_type) -%}\n  {% call statement('alter_column_type') %}\n    alter table {{ relation }} alter {{ adapter.quote(column_name) }} set data type {{ new_column_type }};\n  {% endcall %}\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": { "macros": ["macro.dbt.statement"] },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1665426349.484598,
      "supported_languages": null
    },
    "macro.dbt_snowflake.snowflake__alter_relation_comment": {
      "unique_id": "macro.dbt_snowflake.snowflake__alter_relation_comment",
      "package_name": "dbt_snowflake",
      "root_path": "/Users/sung/Desktop/dbt/env/lib/python3.8/site-packages/dbt/include/snowflake",
      "path": "macros/adapters.sql",
      "original_file_path": "macros/adapters.sql",
      "name": "snowflake__alter_relation_comment",
      "macro_sql": "{% macro snowflake__alter_relation_comment(relation, relation_comment) -%}\n  comment on {{ relation.type }} {{ relation }} IS $${{ relation_comment | replace('$', '[$]') }}$$;\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": { "macros": [] },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1665426349.485278,
      "supported_languages": null
    },
    "macro.dbt_snowflake.snowflake__alter_column_comment": {
      "unique_id": "macro.dbt_snowflake.snowflake__alter_column_comment",
      "package_name": "dbt_snowflake",
      "root_path": "/Users/sung/Desktop/dbt/env/lib/python3.8/site-packages/dbt/include/snowflake",
      "path": "macros/adapters.sql",
      "original_file_path": "macros/adapters.sql",
      "name": "snowflake__alter_column_comment",
      "macro_sql": "{% macro snowflake__alter_column_comment(relation, column_dict) -%}\n    {% set existing_columns = adapter.get_columns_in_relation(relation) | map(attribute=\"name\") | list %}\n    alter {{ relation.type }} {{ relation }} alter\n    {% for column_name in column_dict if (column_name in existing_columns) or (column_name|upper in existing_columns) %}\n        {{ get_column_comment_sql(column_name, column_dict) }} {{ ',' if not loop.last else ';' }}\n    {% endfor %}\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": ["macro.dbt_snowflake.get_column_comment_sql"]
      },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1665426349.4871979,
      "supported_languages": null
    },
    "macro.dbt_snowflake.get_current_query_tag": {
      "unique_id": "macro.dbt_snowflake.get_current_query_tag",
      "package_name": "dbt_snowflake",
      "root_path": "/Users/sung/Desktop/dbt/env/lib/python3.8/site-packages/dbt/include/snowflake",
      "path": "macros/adapters.sql",
      "original_file_path": "macros/adapters.sql",
      "name": "get_current_query_tag",
      "macro_sql": "{% macro get_current_query_tag() -%}\n  {{ return(run_query(\"show parameters like 'query_tag' in session\").rows[0]['value']) }}\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": { "macros": ["macro.dbt.run_query"] },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1665426349.488097,
      "supported_languages": null
    },
    "macro.dbt_snowflake.set_query_tag": {
      "unique_id": "macro.dbt_snowflake.set_query_tag",
      "package_name": "dbt_snowflake",
      "root_path": "/Users/sung/Desktop/dbt/env/lib/python3.8/site-packages/dbt/include/snowflake",
      "path": "macros/adapters.sql",
      "original_file_path": "macros/adapters.sql",
      "name": "set_query_tag",
      "macro_sql": "{% macro set_query_tag() -%}\n  {% set new_query_tag = config.get('query_tag') %}\n  {% if new_query_tag %}\n    {% set original_query_tag = get_current_query_tag() %}\n    {{ log(\"Setting query_tag to '\" ~ new_query_tag ~ \"'. Will reset to '\" ~ original_query_tag ~ \"' after materialization.\") }}\n    {% do run_query(\"alter session set query_tag = '{}'\".format(new_query_tag)) %}\n    {{ return(original_query_tag)}}\n  {% endif %}\n  {{ return(none)}}\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": [
          "macro.dbt_snowflake.get_current_query_tag",
          "macro.dbt.run_query"
        ]
      },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1665426349.489569,
      "supported_languages": null
    },
    "macro.dbt_snowflake.unset_query_tag": {
      "unique_id": "macro.dbt_snowflake.unset_query_tag",
      "package_name": "dbt_snowflake",
      "root_path": "/Users/sung/Desktop/dbt/env/lib/python3.8/site-packages/dbt/include/snowflake",
      "path": "macros/adapters.sql",
      "original_file_path": "macros/adapters.sql",
      "name": "unset_query_tag",
      "macro_sql": "{% macro unset_query_tag(original_query_tag) -%}\n  {% set new_query_tag = config.get('query_tag') %}\n  {% if new_query_tag %}\n    {% if original_query_tag %}\n      {{ log(\"Resetting query_tag to '\" ~ original_query_tag ~ \"'.\") }}\n      {% do run_query(\"alter session set query_tag = '{}'\".format(original_query_tag)) %}\n    {% else %}\n      {{ log(\"No original query_tag, unsetting parameter.\") }}\n      {% do run_query(\"alter session unset query_tag\") %}\n    {% endif %}\n  {% endif %}\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": { "macros": ["macro.dbt.run_query"] },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1665426349.491162,
      "supported_languages": null
    },
    "macro.dbt_snowflake.snowflake__alter_relation_add_remove_columns": {
      "unique_id": "macro.dbt_snowflake.snowflake__alter_relation_add_remove_columns",
      "package_name": "dbt_snowflake",
      "root_path": "/Users/sung/Desktop/dbt/env/lib/python3.8/site-packages/dbt/include/snowflake",
      "path": "macros/adapters.sql",
      "original_file_path": "macros/adapters.sql",
      "name": "snowflake__alter_relation_add_remove_columns",
      "macro_sql": "{% macro snowflake__alter_relation_add_remove_columns(relation, add_columns, remove_columns) %}\n\n  {% if add_columns %}\n\n    {% set sql -%}\n       alter {{ relation.type }} {{ relation }} add column\n          {% for column in add_columns %}\n            {{ column.name }} {{ column.data_type }}{{ ',' if not loop.last }}\n          {% endfor %}\n    {%- endset -%}\n\n    {% do run_query(sql) %}\n\n  {% endif %}\n\n  {% if remove_columns %}\n\n    {% set sql -%}\n        alter {{ relation.type }} {{ relation }} drop column\n            {% for column in remove_columns %}\n                {{ column.name }}{{ ',' if not loop.last }}\n            {% endfor %}\n    {%- endset -%}\n\n    {% do run_query(sql) %}\n\n  {% endif %}\n\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": { "macros": ["macro.dbt.run_query"] },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1665426349.494323,
      "supported_languages": null
    },
    "macro.dbt_snowflake.snowflake_dml_explicit_transaction": {
      "unique_id": "macro.dbt_snowflake.snowflake_dml_explicit_transaction",
      "package_name": "dbt_snowflake",
      "root_path": "/Users/sung/Desktop/dbt/env/lib/python3.8/site-packages/dbt/include/snowflake",
      "path": "macros/adapters.sql",
      "original_file_path": "macros/adapters.sql",
      "name": "snowflake_dml_explicit_transaction",
      "macro_sql": "{% macro snowflake_dml_explicit_transaction(dml) %}\n  {#\n    Use this macro to wrap all INSERT, MERGE, UPDATE, DELETE, and TRUNCATE\n    statements before passing them into run_query(), or calling in the 'main' statement\n    of a materialization\n  #}\n  {% set dml_transaction -%}\n    begin;\n    {{ dml }};\n    commit;\n  {%- endset %}\n\n  {% do return(dml_transaction) %}\n\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": { "macros": [] },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1665426349.49514,
      "supported_languages": null
    },
    "macro.dbt_snowflake.snowflake__truncate_relation": {
      "unique_id": "macro.dbt_snowflake.snowflake__truncate_relation",
      "package_name": "dbt_snowflake",
      "root_path": "/Users/sung/Desktop/dbt/env/lib/python3.8/site-packages/dbt/include/snowflake",
      "path": "macros/adapters.sql",
      "original_file_path": "macros/adapters.sql",
      "name": "snowflake__truncate_relation",
      "macro_sql": "{% macro snowflake__truncate_relation(relation) -%}\n  {% set truncate_dml %}\n    truncate table {{ relation }}\n  {% endset %}\n  {% call statement('truncate_relation') -%}\n    {{ snowflake_dml_explicit_transaction(truncate_dml) }}\n  {%- endcall %}\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": [
          "macro.dbt.statement",
          "macro.dbt_snowflake.snowflake_dml_explicit_transaction"
        ]
      },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1665426349.496198,
      "supported_languages": null
    },
    "macro.dbt_snowflake.snowflake__get_merge_sql": {
      "unique_id": "macro.dbt_snowflake.snowflake__get_merge_sql",
      "package_name": "dbt_snowflake",
      "root_path": "/Users/sung/Desktop/dbt/env/lib/python3.8/site-packages/dbt/include/snowflake",
      "path": "macros/materializations/merge.sql",
      "original_file_path": "macros/materializations/merge.sql",
      "name": "snowflake__get_merge_sql",
      "macro_sql": "{% macro snowflake__get_merge_sql(target, source_sql, unique_key, dest_columns, predicates) -%}\n\n    {#\n       Workaround for Snowflake not being happy with a merge on a constant-false predicate.\n       When no unique_key is provided, this macro will do a regular insert. If a unique_key\n       is provided, then this macro will do a proper merge instead.\n    #}\n\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute='name')) -%}\n    {%- set sql_header = config.get('sql_header', none) -%}\n\n    {%- set dml -%}\n    {%- if unique_key is none -%}\n\n        {{ sql_header if sql_header is not none }}\n\n        insert into {{ target }} ({{ dest_cols_csv }})\n        (\n            select {{ dest_cols_csv }}\n            from {{ source_sql }}\n        )\n\n    {%- else -%}\n\n        {{ default__get_merge_sql(target, source_sql, unique_key, dest_columns, predicates) }}\n\n    {%- endif -%}\n    {%- endset -%}\n\n    {% do return(snowflake_dml_explicit_transaction(dml)) %}\n\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": [
          "macro.dbt.get_quoted_csv",
          "macro.dbt.default__get_merge_sql",
          "macro.dbt_snowflake.snowflake_dml_explicit_transaction"
        ]
      },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1665426349.5003378,
      "supported_languages": null
    },
    "macro.dbt_snowflake.snowflake__get_delete_insert_merge_sql": {
      "unique_id": "macro.dbt_snowflake.snowflake__get_delete_insert_merge_sql",
      "package_name": "dbt_snowflake",
      "root_path": "/Users/sung/Desktop/dbt/env/lib/python3.8/site-packages/dbt/include/snowflake",
      "path": "macros/materializations/merge.sql",
      "original_file_path": "macros/materializations/merge.sql",
      "name": "snowflake__get_delete_insert_merge_sql",
      "macro_sql": "{% macro snowflake__get_delete_insert_merge_sql(target, source, unique_key, dest_columns) %}\n    {% set dml = default__get_delete_insert_merge_sql(target, source, unique_key, dest_columns) %}\n    {% do return(snowflake_dml_explicit_transaction(dml)) %}\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": [
          "macro.dbt.default__get_delete_insert_merge_sql",
          "macro.dbt_snowflake.snowflake_dml_explicit_transaction"
        ]
      },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1665426349.501375,
      "supported_languages": null
    },
    "macro.dbt_snowflake.snowflake__snapshot_merge_sql": {
      "unique_id": "macro.dbt_snowflake.snowflake__snapshot_merge_sql",
      "package_name": "dbt_snowflake",
      "root_path": "/Users/sung/Desktop/dbt/env/lib/python3.8/site-packages/dbt/include/snowflake",
      "path": "macros/materializations/merge.sql",
      "original_file_path": "macros/materializations/merge.sql",
      "name": "snowflake__snapshot_merge_sql",
      "macro_sql": "{% macro snowflake__snapshot_merge_sql(target, source, insert_cols) %}\n    {% set dml = default__snapshot_merge_sql(target, source, insert_cols) %}\n    {% do return(snowflake_dml_explicit_transaction(dml)) %}\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": [
          "macro.dbt.default__snapshot_merge_sql",
          "macro.dbt_snowflake.snowflake_dml_explicit_transaction"
        ]
      },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1665426349.5022888,
      "supported_languages": null
    },
    "macro.dbt_snowflake.snowflake__load_csv_rows": {
      "unique_id": "macro.dbt_snowflake.snowflake__load_csv_rows",
      "package_name": "dbt_snowflake",
      "root_path": "/Users/sung/Desktop/dbt/env/lib/python3.8/site-packages/dbt/include/snowflake",
      "path": "macros/materializations/seed.sql",
      "original_file_path": "macros/materializations/seed.sql",
      "name": "snowflake__load_csv_rows",
      "macro_sql": "{% macro snowflake__load_csv_rows(model, agate_table) %}\n    {% set batch_size = get_batch_size() %}\n    {% set cols_sql = get_seed_column_quoted_csv(model, agate_table.column_names) %}\n    {% set bindings = [] %}\n\n    {% set statements = [] %}\n\n    {% for chunk in agate_table.rows | batch(batch_size) %}\n        {% set bindings = [] %}\n\n        {% for row in chunk %}\n            {% do bindings.extend(row) %}\n        {% endfor %}\n\n        {% set sql %}\n            insert into {{ this.render() }} ({{ cols_sql }}) values\n            {% for row in chunk -%}\n                ({%- for column in agate_table.column_names -%}\n                    %s\n                    {%- if not loop.last%},{%- endif %}\n                {%- endfor -%})\n                {%- if not loop.last%},{%- endif %}\n            {%- endfor %}\n        {% endset %}\n\n        {% do adapter.add_query('BEGIN', auto_begin=False) %}\n        {% do adapter.add_query(sql, bindings=bindings, abridge_sql_log=True) %}\n        {% do adapter.add_query('COMMIT', auto_begin=False) %}\n\n        {% if loop.index0 == 0 %}\n            {% do statements.append(sql) %}\n        {% endif %}\n    {% endfor %}\n\n    {# Return SQL so we can render it out into the compiled files #}\n    {{ return(statements[0]) }}\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": [
          "macro.dbt.get_batch_size",
          "macro.dbt.get_seed_column_quoted_csv"
        ]
      },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1665426349.508826,
      "supported_languages": null
    },
    "macro.dbt_snowflake.materialization_seed_snowflake": {
      "unique_id": "macro.dbt_snowflake.materialization_seed_snowflake",
      "package_name": "dbt_snowflake",
      "root_path": "/Users/sung/Desktop/dbt/env/lib/python3.8/site-packages/dbt/include/snowflake",
      "path": "macros/materializations/seed.sql",
      "original_file_path": "macros/materializations/seed.sql",
      "name": "materialization_seed_snowflake",
      "macro_sql": "{% materialization seed, adapter='snowflake' %}\n    {% set original_query_tag = set_query_tag() %}\n\n    {% set relations = materialization_seed_default() %}\n\n    {% do unset_query_tag(original_query_tag) %}\n\n    {{ return(relations) }}\n{% endmaterialization %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": [
          "macro.dbt_snowflake.set_query_tag",
          "macro.dbt.materialization_seed_default",
          "macro.dbt_snowflake.unset_query_tag"
        ]
      },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1665426349.510114,
      "supported_languages": ["sql"]
    },
    "macro.dbt_snowflake.materialization_view_snowflake": {
      "unique_id": "macro.dbt_snowflake.materialization_view_snowflake",
      "package_name": "dbt_snowflake",
      "root_path": "/Users/sung/Desktop/dbt/env/lib/python3.8/site-packages/dbt/include/snowflake",
      "path": "macros/materializations/view.sql",
      "original_file_path": "macros/materializations/view.sql",
      "name": "materialization_view_snowflake",
      "macro_sql": "{% materialization view, adapter='snowflake' -%}\n\n    {% set original_query_tag = set_query_tag() %}\n    {% set to_return = create_or_replace_view() %}\n\n    {% set target_relation = this.incorporate(type='view') %}\n    {% do persist_docs(target_relation, model, for_columns=false) %}\n\n    {% do return(to_return) %}\n\n    {% do unset_query_tag(original_query_tag) %}\n\n{%- endmaterialization %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": [
          "macro.dbt_snowflake.set_query_tag",
          "macro.dbt.create_or_replace_view",
          "macro.dbt.persist_docs",
          "macro.dbt_snowflake.unset_query_tag"
        ]
      },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1665426349.513056,
      "supported_languages": ["sql"]
    },
    "macro.dbt_snowflake.materialization_table_snowflake": {
      "unique_id": "macro.dbt_snowflake.materialization_table_snowflake",
      "package_name": "dbt_snowflake",
      "root_path": "/Users/sung/Desktop/dbt/env/lib/python3.8/site-packages/dbt/include/snowflake",
      "path": "macros/materializations/table.sql",
      "original_file_path": "macros/materializations/table.sql",
      "name": "materialization_table_snowflake",
      "macro_sql": "{% materialization table, adapter='snowflake' %}\n\n  {% set original_query_tag = set_query_tag() %}\n\n  {%- set identifier = model['alias'] -%}\n\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n  {%- set target_relation = api.Relation.create(identifier=identifier,\n                                                schema=schema,\n                                                database=database, type='table') -%}\n\n  {{ run_hooks(pre_hooks) }}\n\n  {#-- Drop the relation if it was a view to \"convert\" it in a table. This may lead to\n    -- downtime, but it should be a relatively infrequent occurrence  #}\n  {% if old_relation is not none and not old_relation.is_table %}\n    {{ log(\"Dropping relation \" ~ old_relation ~ \" because it is of type \" ~ old_relation.type) }}\n    {{ drop_relation_if_exists(old_relation) }}\n  {% endif %}\n\n  --build model\n  {% call statement('main') -%}\n    {{ create_table_as(false, target_relation, sql) }}\n  {%- endcall %}\n\n  {{ run_hooks(post_hooks) }}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {% do unset_query_tag(original_query_tag) %}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmaterialization %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": [
          "macro.dbt_snowflake.set_query_tag",
          "macro.dbt.run_hooks",
          "macro.dbt.drop_relation_if_exists",
          "macro.dbt.statement",
          "macro.dbt.create_table_as",
          "macro.dbt.persist_docs",
          "macro.dbt_snowflake.unset_query_tag"
        ]
      },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1665426349.517643,
      "supported_languages": ["sql"]
    },
    "macro.dbt_snowflake.dbt_snowflake_validate_get_incremental_strategy": {
      "unique_id": "macro.dbt_snowflake.dbt_snowflake_validate_get_incremental_strategy",
      "package_name": "dbt_snowflake",
      "root_path": "/Users/sung/Desktop/dbt/env/lib/python3.8/site-packages/dbt/include/snowflake",
      "path": "macros/materializations/incremental.sql",
      "original_file_path": "macros/materializations/incremental.sql",
      "name": "dbt_snowflake_validate_get_incremental_strategy",
      "macro_sql": "{% macro dbt_snowflake_validate_get_incremental_strategy(config) %}\n  {#-- Find and validate the incremental strategy #}\n  {%- set strategy = config.get(\"incremental_strategy\", default=\"merge\") -%}\n\n  {% set invalid_strategy_msg -%}\n    Invalid incremental strategy provided: {{ strategy }}\n    Expected one of: 'merge', 'delete+insert'\n  {%- endset %}\n  {% if strategy not in ['merge', 'delete+insert'] %}\n    {% do exceptions.raise_compiler_error(invalid_strategy_msg) %}\n  {% endif %}\n\n  {% do return(strategy) %}\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": { "macros": [] },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1665426349.521416,
      "supported_languages": null
    },
    "macro.dbt_snowflake.dbt_snowflake_get_incremental_sql": {
      "unique_id": "macro.dbt_snowflake.dbt_snowflake_get_incremental_sql",
      "package_name": "dbt_snowflake",
      "root_path": "/Users/sung/Desktop/dbt/env/lib/python3.8/site-packages/dbt/include/snowflake",
      "path": "macros/materializations/incremental.sql",
      "original_file_path": "macros/materializations/incremental.sql",
      "name": "dbt_snowflake_get_incremental_sql",
      "macro_sql": "{% macro dbt_snowflake_get_incremental_sql(strategy, tmp_relation, target_relation, unique_key, dest_columns) %}\n  {% if strategy == 'merge' %}\n    {% do return(get_merge_sql(target_relation, tmp_relation, unique_key, dest_columns)) %}\n  {% elif strategy == 'delete+insert' %}\n    {% do return(get_delete_insert_merge_sql(target_relation, tmp_relation, unique_key, dest_columns)) %}\n  {% else %}\n    {% do exceptions.raise_compiler_error('invalid strategy: ' ~ strategy) %}\n  {% endif %}\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": [
          "macro.dbt.get_merge_sql",
          "macro.dbt.get_delete_insert_merge_sql"
        ]
      },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1665426349.52321,
      "supported_languages": null
    },
    "macro.dbt_snowflake.materialization_incremental_snowflake": {
      "unique_id": "macro.dbt_snowflake.materialization_incremental_snowflake",
      "package_name": "dbt_snowflake",
      "root_path": "/Users/sung/Desktop/dbt/env/lib/python3.8/site-packages/dbt/include/snowflake",
      "path": "macros/materializations/incremental.sql",
      "original_file_path": "macros/materializations/incremental.sql",
      "name": "materialization_incremental_snowflake",
      "macro_sql": "{% materialization incremental, adapter='snowflake' -%}\n\n  {% set original_query_tag = set_query_tag() %}\n\n  {%- set unique_key = config.get('unique_key') -%}\n  {%- set full_refresh_mode = (should_full_refresh()) -%}\n\n  {% set target_relation = this %}\n  {% set existing_relation = load_relation(this) %}\n  {% set tmp_relation = make_temp_relation(this) %}\n\n  {#-- Validate early so we don't run SQL if the strategy is invalid --#}\n  {% set strategy = dbt_snowflake_validate_get_incremental_strategy(config) -%}\n  {% set on_schema_change = incremental_validate_on_schema_change(config.get('on_schema_change'), default='ignore') %}\n\n  {{ run_hooks(pre_hooks) }}\n\n  {% if existing_relation is none %}\n    {% set build_sql = create_table_as(False, target_relation, sql) %}\n\n  {% elif existing_relation.is_view %}\n    {#-- Can't overwrite a view with a table - we must drop --#}\n    {{ log(\"Dropping relation \" ~ target_relation ~ \" because it is a view and this model is a table.\") }}\n    {% do adapter.drop_relation(existing_relation) %}\n    {% set build_sql = create_table_as(False, target_relation, sql) %}\n\n  {% elif full_refresh_mode %}\n    {% set build_sql = create_table_as(False, target_relation, sql) %}\n\n  {% else %}\n    {% do run_query(create_table_as(True, tmp_relation, sql)) %}\n    {% do adapter.expand_target_column_types(\n           from_relation=tmp_relation,\n           to_relation=target_relation) %}\n    {#-- Process schema changes. Returns dict of changes if successful. Use source columns for upserting/merging --#}\n    {% set dest_columns = process_schema_changes(on_schema_change, tmp_relation, existing_relation) %}\n    {% if not dest_columns %}\n      {% set dest_columns = adapter.get_columns_in_relation(existing_relation) %}\n    {% endif %}\n    {% set build_sql = dbt_snowflake_get_incremental_sql(strategy, tmp_relation, target_relation, unique_key, dest_columns) %}\n\n  {% endif %}\n\n  {%- call statement('main') -%}\n    {{ build_sql }}\n  {%- endcall -%}\n\n  {{ run_hooks(post_hooks) }}\n\n  {% set target_relation = target_relation.incorporate(type='table') %}\n  {% do persist_docs(target_relation, model) %}\n\n  {% do unset_query_tag(original_query_tag) %}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{%- endmaterialization %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": [
          "macro.dbt_snowflake.set_query_tag",
          "macro.dbt.should_full_refresh",
          "macro.dbt.load_relation",
          "macro.dbt.make_temp_relation",
          "macro.dbt_snowflake.dbt_snowflake_validate_get_incremental_strategy",
          "macro.dbt.incremental_validate_on_schema_change",
          "macro.dbt.run_hooks",
          "macro.dbt.create_table_as",
          "macro.dbt.run_query",
          "macro.dbt.process_schema_changes",
          "macro.dbt_snowflake.dbt_snowflake_get_incremental_sql",
          "macro.dbt.statement",
          "macro.dbt.persist_docs",
          "macro.dbt_snowflake.unset_query_tag"
        ]
      },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1665426349.531114,
      "supported_languages": ["sql"]
    },
    "macro.dbt_snowflake.materialization_snapshot_snowflake": {
      "unique_id": "macro.dbt_snowflake.materialization_snapshot_snowflake",
      "package_name": "dbt_snowflake",
      "root_path": "/Users/sung/Desktop/dbt/env/lib/python3.8/site-packages/dbt/include/snowflake",
      "path": "macros/materializations/snapshot.sql",
      "original_file_path": "macros/materializations/snapshot.sql",
      "name": "materialization_snapshot_snowflake",
      "macro_sql": "{% materialization snapshot, adapter='snowflake' %}\n    {% set original_query_tag = set_query_tag() %}\n\n    {% set relations = materialization_snapshot_default() %}\n\n    {% do unset_query_tag(original_query_tag) %}\n\n    {{ return(relations) }}\n{% endmaterialization %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": [
          "macro.dbt_snowflake.set_query_tag",
          "macro.dbt.materialization_snapshot_default",
          "macro.dbt_snowflake.unset_query_tag"
        ]
      },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1665426349.532879,
      "supported_languages": ["sql"]
    },
    "macro.dbt.run_hooks": {
      "unique_id": "macro.dbt.run_hooks",
      "package_name": "dbt",
      "root_path": "/Users/sung/Desktop/dbt/core/dbt/include/global_project",
      "path": "macros/materializations/hooks.sql",
      "original_file_path": "macros/materializations/hooks.sql",
      "name": "run_hooks",
      "macro_sql": "{% macro run_hooks(hooks, inside_transaction=True) %}\n  {% for hook in hooks | selectattr('transaction', 'equalto', inside_transaction)  %}\n    {% if not inside_transaction and loop.first %}\n      {% call statement(auto_begin=inside_transaction) %}\n        commit;\n      {% endcall %}\n    {% endif %}\n    {% set rendered = render(hook.get('sql')) | trim %}\n    {% if (rendered | length) > 0 %}\n      {% call statement(auto_begin=inside_transaction) %}\n        {{ rendered }}\n      {% endcall %}\n    {% endif %}\n  {% endfor %}\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": { "macros": ["macro.dbt.statement"] },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1665426349.53613,
      "supported_languages": null
    },
    "macro.dbt.make_hook_config": {
      "unique_id": "macro.dbt.make_hook_config",
      "package_name": "dbt",
      "root_path": "/Users/sung/Desktop/dbt/core/dbt/include/global_project",
      "path": "macros/materializations/hooks.sql",
      "original_file_path": "macros/materializations/hooks.sql",
      "name": "make_hook_config",
      "macro_sql": "{% macro make_hook_config(sql, inside_transaction) %}\n    {{ tojson({\"sql\": sql, \"transaction\": inside_transaction}) }}\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": { "macros": [] },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1665426349.536715,
      "supported_languages": null
    },
    "macro.dbt.before_begin": {
      "unique_id": "macro.dbt.before_begin",
      "package_name": "dbt",
      "root_path": "/Users/sung/Desktop/dbt/core/dbt/include/global_project",
      "path": "macros/materializations/hooks.sql",
      "original_file_path": "macros/materializations/hooks.sql",
      "name": "before_begin",
      "macro_sql": "{% macro before_begin(sql) %}\n    {{ make_hook_config(sql, inside_transaction=False) }}\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": { "macros": ["macro.dbt.make_hook_config"] },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1665426349.537106,
      "supported_languages": null
    },
    "macro.dbt.in_transaction": {
      "unique_id": "macro.dbt.in_transaction",
      "package_name": "dbt",
      "root_path": "/Users/sung/Desktop/dbt/core/dbt/include/global_project",
      "path": "macros/materializations/hooks.sql",
      "original_file_path": "macros/materializations/hooks.sql",
      "name": "in_transaction",
      "macro_sql": "{% macro in_transaction(sql) %}\n    {{ make_hook_config(sql, inside_transaction=True) }}\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": { "macros": ["macro.dbt.make_hook_config"] },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1665426349.537461,
      "supported_languages": null
    },
    "macro.dbt.after_commit": {
      "unique_id": "macro.dbt.after_commit",
      "package_name": "dbt",
      "root_path": "/Users/sung/Desktop/dbt/core/dbt/include/global_project",
      "path": "macros/materializations/hooks.sql",
      "original_file_path": "macros/materializations/hooks.sql",
      "name": "after_commit",
      "macro_sql": "{% macro after_commit(sql) %}\n    {{ make_hook_config(sql, inside_transaction=False) }}\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": { "macros": ["macro.dbt.make_hook_config"] },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1665426349.537819,
      "supported_languages": null
    },
    "macro.dbt.set_sql_header": {
      "unique_id": "macro.dbt.set_sql_header",
      "package_name": "dbt",
      "root_path": "/Users/sung/Desktop/dbt/core/dbt/include/global_project",
      "path": "macros/materializations/configs.sql",
      "original_file_path": "macros/materializations/configs.sql",
      "name": "set_sql_header",
      "macro_sql": "{% macro set_sql_header(config) -%}\n  {{ config.set('sql_header', caller()) }}\n{%- endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": { "macros": [] },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1665426349.539617,
      "supported_languages": null
    },
    "macro.dbt.should_full_refresh": {
      "unique_id": "macro.dbt.should_full_refresh",
      "package_name": "dbt",
      "root_path": "/Users/sung/Desktop/dbt/core/dbt/include/global_project",
      "path": "macros/materializations/configs.sql",
      "original_file_path": "macros/materializations/configs.sql",
      "name": "should_full_refresh",
      "macro_sql": "{% macro should_full_refresh() %}\n  {% set config_full_refresh = config.get('full_refresh') %}\n  {% if config_full_refresh is none %}\n    {% set config_full_refresh = flags.FULL_REFRESH %}\n  {% endif %}\n  {% do return(config_full_refresh) %}\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": { "macros": [] },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1665426349.541228,
      "supported_languages": null
    },
    "macro.dbt.should_store_failures": {
      "unique_id": "macro.dbt.should_store_failures",
      "package_name": "dbt",
      "root_path": "/Users/sung/Desktop/dbt/core/dbt/include/global_project",
      "path": "macros/materializations/configs.sql",
      "original_file_path": "macros/materializations/configs.sql",
      "name": "should_store_failures",
      "macro_sql": "{% macro should_store_failures() %}\n  {% set config_store_failures = config.get('store_failures') %}\n  {% if config_store_failures is none %}\n    {% set config_store_failures = flags.STORE_FAILURES %}\n  {% endif %}\n  {% do return(config_store_failures) %}\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": { "macros": [] },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1665426349.542581,
      "supported_languages": null
    },
    "macro.dbt.snapshot_merge_sql": {
      "unique_id": "macro.dbt.snapshot_merge_sql",
      "package_name": "dbt",
      "root_path": "/Users/sung/Desktop/dbt/core/dbt/include/global_project",
      "path": "macros/materializations/snapshots/snapshot_merge.sql",
      "original_file_path": "macros/materializations/snapshots/snapshot_merge.sql",
      "name": "snapshot_merge_sql",
      "macro_sql": "{% macro snapshot_merge_sql(target, source, insert_cols) -%}\n  {{ adapter.dispatch('snapshot_merge_sql', 'dbt')(target, source, insert_cols) }}\n{%- endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": ["macro.dbt_snowflake.snowflake__snapshot_merge_sql"]
      },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1665426349.544248,
      "supported_languages": null
    },
    "macro.dbt.default__snapshot_merge_sql": {
      "unique_id": "macro.dbt.default__snapshot_merge_sql",
      "package_name": "dbt",
      "root_path": "/Users/sung/Desktop/dbt/core/dbt/include/global_project",
      "path": "macros/materializations/snapshots/snapshot_merge.sql",
      "original_file_path": "macros/materializations/snapshots/snapshot_merge.sql",
      "name": "default__snapshot_merge_sql",
      "macro_sql": "{% macro default__snapshot_merge_sql(target, source, insert_cols) -%}\n    {%- set insert_cols_csv = insert_cols | join(', ') -%}\n\n    merge into {{ target }} as DBT_INTERNAL_DEST\n    using {{ source }} as DBT_INTERNAL_SOURCE\n    on DBT_INTERNAL_SOURCE.dbt_scd_id = DBT_INTERNAL_DEST.dbt_scd_id\n\n    when matched\n     and DBT_INTERNAL_DEST.dbt_valid_to is null\n     and DBT_INTERNAL_SOURCE.dbt_change_type in ('update', 'delete')\n        then update\n        set dbt_valid_to = DBT_INTERNAL_SOURCE.dbt_valid_to\n\n    when not matched\n     and DBT_INTERNAL_SOURCE.dbt_change_type = 'insert'\n        then insert ({{ insert_cols_csv }})\n        values ({{ insert_cols_csv }})\n\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": { "macros": [] },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1665426349.545179,
      "supported_languages": null
    },
    "macro.dbt.strategy_dispatch": {
      "unique_id": "macro.dbt.strategy_dispatch",
      "package_name": "dbt",
      "root_path": "/Users/sung/Desktop/dbt/core/dbt/include/global_project",
      "path": "macros/materializations/snapshots/strategies.sql",
      "original_file_path": "macros/materializations/snapshots/strategies.sql",
      "name": "strategy_dispatch",
      "macro_sql": "{% macro strategy_dispatch(name) -%}\n{% set original_name = name %}\n  {% if '.' in name %}\n    {% set package_name, name = name.split(\".\", 1) %}\n  {% else %}\n    {% set package_name = none %}\n  {% endif %}\n\n  {% if package_name is none %}\n    {% set package_context = context %}\n  {% elif package_name in context %}\n    {% set package_context = context[package_name] %}\n  {% else %}\n    {% set error_msg %}\n        Could not find package '{{package_name}}', called with '{{original_name}}'\n    {% endset %}\n    {{ exceptions.raise_compiler_error(error_msg | trim) }}\n  {% endif %}\n\n  {%- set search_name = 'snapshot_' ~ name ~ '_strategy' -%}\n\n  {% if search_name not in package_context %}\n    {% set error_msg %}\n        The specified strategy macro '{{name}}' was not found in package '{{ package_name }}'\n    {% endset %}\n    {{ exceptions.raise_compiler_error(error_msg | trim) }}\n  {% endif %}\n  {{ return(package_context[search_name]) }}\n{%- endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": { "macros": [] },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1665426349.5546298,
      "supported_languages": null
    },
    "macro.dbt.snapshot_hash_arguments": {
      "unique_id": "macro.dbt.snapshot_hash_arguments",
      "package_name": "dbt",
      "root_path": "/Users/sung/Desktop/dbt/core/dbt/include/global_project",
      "path": "macros/materializations/snapshots/strategies.sql",
      "original_file_path": "macros/materializations/snapshots/strategies.sql",
      "name": "snapshot_hash_arguments",
      "macro_sql": "{% macro snapshot_hash_arguments(args) -%}\n  {{ adapter.dispatch('snapshot_hash_arguments', 'dbt')(args) }}\n{%- endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": ["macro.dbt.default__snapshot_hash_arguments"]
      },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1665426349.5552719,
      "supported_languages": null
    },
    "macro.dbt.default__snapshot_hash_arguments": {
      "unique_id": "macro.dbt.default__snapshot_hash_arguments",
      "package_name": "dbt",
      "root_path": "/Users/sung/Desktop/dbt/core/dbt/include/global_project",
      "path": "macros/materializations/snapshots/strategies.sql",
      "original_file_path": "macros/materializations/snapshots/strategies.sql",
      "name": "default__snapshot_hash_arguments",
      "macro_sql": "{% macro default__snapshot_hash_arguments(args) -%}\n    md5({%- for arg in args -%}\n        coalesce(cast({{ arg }} as varchar ), '')\n        {% if not loop.last %} || '|' || {% endif %}\n    {%- endfor -%})\n{%- endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": { "macros": [] },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1665426349.5561569,
      "supported_languages": null
    },
    "macro.dbt.snapshot_timestamp_strategy": {
      "unique_id": "macro.dbt.snapshot_timestamp_strategy",
      "package_name": "dbt",
      "root_path": "/Users/sung/Desktop/dbt/core/dbt/include/global_project",
      "path": "macros/materializations/snapshots/strategies.sql",
      "original_file_path": "macros/materializations/snapshots/strategies.sql",
      "name": "snapshot_timestamp_strategy",
      "macro_sql": "{% macro snapshot_timestamp_strategy(node, snapshotted_rel, current_rel, config, target_exists) %}\n    {% set primary_key = config['unique_key'] %}\n    {% set updated_at = config['updated_at'] %}\n    {% set invalidate_hard_deletes = config.get('invalidate_hard_deletes', false) %}\n\n    {#/*\n        The snapshot relation might not have an {{ updated_at }} value if the\n        snapshot strategy is changed from `check` to `timestamp`. We\n        should use a dbt-created column for the comparison in the snapshot\n        table instead of assuming that the user-supplied {{ updated_at }}\n        will be present in the historical data.\n\n        See https://github.com/dbt-labs/dbt-core/issues/2350\n    */ #}\n    {% set row_changed_expr -%}\n        ({{ snapshotted_rel }}.dbt_valid_from < {{ current_rel }}.{{ updated_at }})\n    {%- endset %}\n\n    {% set scd_id_expr = snapshot_hash_arguments([primary_key, updated_at]) %}\n\n    {% do return({\n        \"unique_key\": primary_key,\n        \"updated_at\": updated_at,\n        \"row_changed\": row_changed_expr,\n        \"scd_id\": scd_id_expr,\n        \"invalidate_hard_deletes\": invalidate_hard_deletes\n    }) %}\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": { "macros": ["macro.dbt.snapshot_hash_arguments"] },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1665426349.558481,
      "supported_languages": null
    },
    "macro.dbt.snapshot_string_as_time": {
      "unique_id": "macro.dbt.snapshot_string_as_time",
      "package_name": "dbt",
      "root_path": "/Users/sung/Desktop/dbt/core/dbt/include/global_project",
      "path": "macros/materializations/snapshots/strategies.sql",
      "original_file_path": "macros/materializations/snapshots/strategies.sql",
      "name": "snapshot_string_as_time",
      "macro_sql": "{% macro snapshot_string_as_time(timestamp) -%}\n    {{ adapter.dispatch('snapshot_string_as_time', 'dbt')(timestamp) }}\n{%- endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": ["macro.dbt_snowflake.snowflake__snapshot_string_as_time"]
      },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1665426349.5590641,
      "supported_languages": null
    },
    "macro.dbt.default__snapshot_string_as_time": {
      "unique_id": "macro.dbt.default__snapshot_string_as_time",
      "package_name": "dbt",
      "root_path": "/Users/sung/Desktop/dbt/core/dbt/include/global_project",
      "path": "macros/materializations/snapshots/strategies.sql",
      "original_file_path": "macros/materializations/snapshots/strategies.sql",
      "name": "default__snapshot_string_as_time",
      "macro_sql": "{% macro default__snapshot_string_as_time(timestamp) %}\n    {% do exceptions.raise_not_implemented(\n        'snapshot_string_as_time macro not implemented for adapter '+adapter.type()\n    ) %}\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": { "macros": [] },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1665426349.559795,
      "supported_languages": null
    },
    "macro.dbt.snapshot_check_all_get_existing_columns": {
      "unique_id": "macro.dbt.snapshot_check_all_get_existing_columns",
      "package_name": "dbt",
      "root_path": "/Users/sung/Desktop/dbt/core/dbt/include/global_project",
      "path": "macros/materializations/snapshots/strategies.sql",
      "original_file_path": "macros/materializations/snapshots/strategies.sql",
      "name": "snapshot_check_all_get_existing_columns",
      "macro_sql": "{% macro snapshot_check_all_get_existing_columns(node, target_exists, check_cols_config) -%}\n    {%- if not target_exists -%}\n        {#-- no table yet -> return whatever the query does --#}\n        {{ return((false, query_columns)) }}\n    {%- endif -%}\n\n    {#-- handle any schema changes --#}\n    {%- set target_relation = adapter.get_relation(database=node.database, schema=node.schema, identifier=node.alias) -%}\n\n    {% if check_cols_config == 'all' %}\n        {%- set query_columns = get_columns_in_query(node['compiled_code']) -%}\n\n    {% elif check_cols_config is iterable and (check_cols_config | length) > 0 %}\n        {#-- query for proper casing/quoting, to support comparison below --#}\n        {%- set select_check_cols_from_target -%}\n          select {{ check_cols_config | join(', ') }} from ({{ node['compiled_code'] }}) subq\n        {%- endset -%}\n        {% set query_columns = get_columns_in_query(select_check_cols_from_target) %}\n\n    {% else %}\n        {% do exceptions.raise_compiler_error(\"Invalid value for 'check_cols': \" ~ check_cols_config) %}\n    {% endif %}\n\n    {%- set existing_cols = adapter.get_columns_in_relation(target_relation) | map(attribute = 'name') | list -%}\n    {%- set ns = namespace() -%} {#-- handle for-loop scoping with a namespace --#}\n    {%- set ns.column_added = false -%}\n\n    {%- set intersection = [] -%}\n    {%- for col in query_columns -%}\n        {%- if col in existing_cols -%}\n            {%- do intersection.append(adapter.quote(col)) -%}\n        {%- else -%}\n            {% set ns.column_added = true %}\n        {%- endif -%}\n    {%- endfor -%}\n    {{ return((ns.column_added, intersection)) }}\n{%- endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": { "macros": ["macro.dbt.get_columns_in_query"] },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1665426349.5641348,
      "supported_languages": null
    },
    "macro.dbt.snapshot_check_strategy": {
      "unique_id": "macro.dbt.snapshot_check_strategy",
      "package_name": "dbt",
      "root_path": "/Users/sung/Desktop/dbt/core/dbt/include/global_project",
      "path": "macros/materializations/snapshots/strategies.sql",
      "original_file_path": "macros/materializations/snapshots/strategies.sql",
      "name": "snapshot_check_strategy",
      "macro_sql": "{% macro snapshot_check_strategy(node, snapshotted_rel, current_rel, config, target_exists) %}\n    {% set check_cols_config = config['check_cols'] %}\n    {% set primary_key = config['unique_key'] %}\n    {% set invalidate_hard_deletes = config.get('invalidate_hard_deletes', false) %}\n    {% set updated_at = config.get('updated_at', snapshot_get_time()) %}\n\n    {% set column_added = false %}\n\n    {% set column_added, check_cols = snapshot_check_all_get_existing_columns(node, target_exists, check_cols_config) %}\n\n    {%- set row_changed_expr -%}\n    (\n    {%- if column_added -%}\n        {{ get_true_sql() }}\n    {%- else -%}\n    {%- for col in check_cols -%}\n        {{ snapshotted_rel }}.{{ col }} != {{ current_rel }}.{{ col }}\n        or\n        (\n            (({{ snapshotted_rel }}.{{ col }} is null) and not ({{ current_rel }}.{{ col }} is null))\n            or\n            ((not {{ snapshotted_rel }}.{{ col }} is null) and ({{ current_rel }}.{{ col }} is null))\n        )\n        {%- if not loop.last %} or {% endif -%}\n    {%- endfor -%}\n    {%- endif -%}\n    )\n    {%- endset %}\n\n    {% set scd_id_expr = snapshot_hash_arguments([primary_key, updated_at]) %}\n\n    {% do return({\n        \"unique_key\": primary_key,\n        \"updated_at\": updated_at,\n        \"row_changed\": row_changed_expr,\n        \"scd_id\": scd_id_expr,\n        \"invalidate_hard_deletes\": invalidate_hard_deletes\n    }) %}\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": [
          "macro.dbt.snapshot_get_time",
          "macro.dbt.snapshot_check_all_get_existing_columns",
          "macro.dbt.get_true_sql",
          "macro.dbt.snapshot_hash_arguments"
        ]
      },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1665426349.567219,
      "supported_languages": null
    },
    "macro.dbt.create_columns": {
      "unique_id": "macro.dbt.create_columns",
      "package_name": "dbt",
      "root_path": "/Users/sung/Desktop/dbt/core/dbt/include/global_project",
      "path": "macros/materializations/snapshots/helpers.sql",
      "original_file_path": "macros/materializations/snapshots/helpers.sql",
      "name": "create_columns",
      "macro_sql": "{% macro create_columns(relation, columns) %}\n  {{ adapter.dispatch('create_columns', 'dbt')(relation, columns) }}\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": { "macros": ["macro.dbt.default__create_columns"] },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1665426349.5747259,
      "supported_languages": null
    },
    "macro.dbt.default__create_columns": {
      "unique_id": "macro.dbt.default__create_columns",
      "package_name": "dbt",
      "root_path": "/Users/sung/Desktop/dbt/core/dbt/include/global_project",
      "path": "macros/materializations/snapshots/helpers.sql",
      "original_file_path": "macros/materializations/snapshots/helpers.sql",
      "name": "default__create_columns",
      "macro_sql": "{% macro default__create_columns(relation, columns) %}\n  {% for column in columns %}\n    {% call statement() %}\n      alter table {{ relation }} add column \"{{ column.name }}\" {{ column.data_type }};\n    {% endcall %}\n  {% endfor %}\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": { "macros": ["macro.dbt.statement"] },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1665426349.575681,
      "supported_languages": null
    },
    "macro.dbt.post_snapshot": {
      "unique_id": "macro.dbt.post_snapshot",
      "package_name": "dbt",
      "root_path": "/Users/sung/Desktop/dbt/core/dbt/include/global_project",
      "path": "macros/materializations/snapshots/helpers.sql",
      "original_file_path": "macros/materializations/snapshots/helpers.sql",
      "name": "post_snapshot",
      "macro_sql": "{% macro post_snapshot(staging_relation) %}\n  {{ adapter.dispatch('post_snapshot', 'dbt')(staging_relation) }}\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": { "macros": ["macro.dbt.default__post_snapshot"] },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1665426349.576206,
      "supported_languages": null
    },
    "macro.dbt.default__post_snapshot": {
      "unique_id": "macro.dbt.default__post_snapshot",
      "package_name": "dbt",
      "root_path": "/Users/sung/Desktop/dbt/core/dbt/include/global_project",
      "path": "macros/materializations/snapshots/helpers.sql",
      "original_file_path": "macros/materializations/snapshots/helpers.sql",
      "name": "default__post_snapshot",
      "macro_sql": "{% macro default__post_snapshot(staging_relation) %}\n    {# no-op #}\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": { "macros": [] },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1665426349.576452,
      "supported_languages": null
    },
    "macro.dbt.get_true_sql": {
      "unique_id": "macro.dbt.get_true_sql",
      "package_name": "dbt",
      "root_path": "/Users/sung/Desktop/dbt/core/dbt/include/global_project",
      "path": "macros/materializations/snapshots/helpers.sql",
      "original_file_path": "macros/materializations/snapshots/helpers.sql",
      "name": "get_true_sql",
      "macro_sql": "{% macro get_true_sql() %}\n  {{ adapter.dispatch('get_true_sql', 'dbt')() }}\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": { "macros": ["macro.dbt.default__get_true_sql"] },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1665426349.576818,
      "supported_languages": null
    },
    "macro.dbt.default__get_true_sql": {
      "unique_id": "macro.dbt.default__get_true_sql",
      "package_name": "dbt",
      "root_path": "/Users/sung/Desktop/dbt/core/dbt/include/global_project",
      "path": "macros/materializations/snapshots/helpers.sql",
      "original_file_path": "macros/materializations/snapshots/helpers.sql",
      "name": "default__get_true_sql",
      "macro_sql": "{% macro default__get_true_sql() %}\n    {{ return('TRUE') }}\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": { "macros": [] },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1665426349.577124,
      "supported_languages": null
    },
    "macro.dbt.snapshot_staging_table": {
      "unique_id": "macro.dbt.snapshot_staging_table",
      "package_name": "dbt",
      "root_path": "/Users/sung/Desktop/dbt/core/dbt/include/global_project",
      "path": "macros/materializations/snapshots/helpers.sql",
      "original_file_path": "macros/materializations/snapshots/helpers.sql",
      "name": "snapshot_staging_table",
      "macro_sql": "{% macro snapshot_staging_table(strategy, source_sql, target_relation) -%}\n  {{ adapter.dispatch('snapshot_staging_table', 'dbt')(strategy, source_sql, target_relation) }}\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": { "macros": ["macro.dbt.default__snapshot_staging_table"] },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1665426349.577718,
      "supported_languages": null
    },
    "macro.dbt.default__snapshot_staging_table": {
      "unique_id": "macro.dbt.default__snapshot_staging_table",
      "package_name": "dbt",
      "root_path": "/Users/sung/Desktop/dbt/core/dbt/include/global_project",
      "path": "macros/materializations/snapshots/helpers.sql",
      "original_file_path": "macros/materializations/snapshots/helpers.sql",
      "name": "default__snapshot_staging_table",
      "macro_sql": "{% macro default__snapshot_staging_table(strategy, source_sql, target_relation) -%}\n\n    with snapshot_query as (\n\n        {{ source_sql }}\n\n    ),\n\n    snapshotted_data as (\n\n        select *,\n            {{ strategy.unique_key }} as dbt_unique_key\n\n        from {{ target_relation }}\n        where dbt_valid_to is null\n\n    ),\n\n    insertions_source_data as (\n\n        select\n            *,\n            {{ strategy.unique_key }} as dbt_unique_key,\n            {{ strategy.updated_at }} as dbt_updated_at,\n            {{ strategy.updated_at }} as dbt_valid_from,\n            nullif({{ strategy.updated_at }}, {{ strategy.updated_at }}) as dbt_valid_to,\n            {{ strategy.scd_id }} as dbt_scd_id\n\n        from snapshot_query\n    ),\n\n    updates_source_data as (\n\n        select\n            *,\n            {{ strategy.unique_key }} as dbt_unique_key,\n            {{ strategy.updated_at }} as dbt_updated_at,\n            {{ strategy.updated_at }} as dbt_valid_from,\n            {{ strategy.updated_at }} as dbt_valid_to\n\n        from snapshot_query\n    ),\n\n    {%- if strategy.invalidate_hard_deletes %}\n\n    deletes_source_data as (\n\n        select\n            *,\n            {{ strategy.unique_key }} as dbt_unique_key\n        from snapshot_query\n    ),\n    {% endif %}\n\n    insertions as (\n\n        select\n            'insert' as dbt_change_type,\n            source_data.*\n\n        from insertions_source_data as source_data\n        left outer join snapshotted_data on snapshotted_data.dbt_unique_key = source_data.dbt_unique_key\n        where snapshotted_data.dbt_unique_key is null\n           or (\n                snapshotted_data.dbt_unique_key is not null\n            and (\n                {{ strategy.row_changed }}\n            )\n        )\n\n    ),\n\n    updates as (\n\n        select\n            'update' as dbt_change_type,\n            source_data.*,\n            snapshotted_data.dbt_scd_id\n\n        from updates_source_data as source_data\n        join snapshotted_data on snapshotted_data.dbt_unique_key = source_data.dbt_unique_key\n        where (\n            {{ strategy.row_changed }}\n        )\n    )\n\n    {%- if strategy.invalidate_hard_deletes -%}\n    ,\n\n    deletes as (\n\n        select\n            'delete' as dbt_change_type,\n            source_data.*,\n            {{ snapshot_get_time() }} as dbt_valid_from,\n            {{ snapshot_get_time() }} as dbt_updated_at,\n            {{ snapshot_get_time() }} as dbt_valid_to,\n            snapshotted_data.dbt_scd_id\n\n        from snapshotted_data\n        left join deletes_source_data as source_data on snapshotted_data.dbt_unique_key = source_data.dbt_unique_key\n        where source_data.dbt_unique_key is null\n    )\n    {%- endif %}\n\n    select * from insertions\n    union all\n    select * from updates\n    {%- if strategy.invalidate_hard_deletes %}\n    union all\n    select * from deletes\n    {%- endif %}\n\n{%- endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": { "macros": ["macro.dbt.snapshot_get_time"] },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1665426349.580499,
      "supported_languages": null
    },
    "macro.dbt.build_snapshot_table": {
      "unique_id": "macro.dbt.build_snapshot_table",
      "package_name": "dbt",
      "root_path": "/Users/sung/Desktop/dbt/core/dbt/include/global_project",
      "path": "macros/materializations/snapshots/helpers.sql",
      "original_file_path": "macros/materializations/snapshots/helpers.sql",
      "name": "build_snapshot_table",
      "macro_sql": "{% macro build_snapshot_table(strategy, sql) -%}\n  {{ adapter.dispatch('build_snapshot_table', 'dbt')(strategy, sql) }}\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": { "macros": ["macro.dbt.default__build_snapshot_table"] },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1665426349.5811672,
      "supported_languages": null
    },
    "macro.dbt.default__build_snapshot_table": {
      "unique_id": "macro.dbt.default__build_snapshot_table",
      "package_name": "dbt",
      "root_path": "/Users/sung/Desktop/dbt/core/dbt/include/global_project",
      "path": "macros/materializations/snapshots/helpers.sql",
      "original_file_path": "macros/materializations/snapshots/helpers.sql",
      "name": "default__build_snapshot_table",
      "macro_sql": "{% macro default__build_snapshot_table(strategy, sql) %}\n\n    select *,\n        {{ strategy.scd_id }} as dbt_scd_id,\n        {{ strategy.updated_at }} as dbt_updated_at,\n        {{ strategy.updated_at }} as dbt_valid_from,\n        nullif({{ strategy.updated_at }}, {{ strategy.updated_at }}) as dbt_valid_to\n    from (\n        {{ sql }}\n    ) sbq\n\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": { "macros": [] },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1665426349.581868,
      "supported_languages": null
    },
    "macro.dbt.build_snapshot_staging_table": {
      "unique_id": "macro.dbt.build_snapshot_staging_table",
      "package_name": "dbt",
      "root_path": "/Users/sung/Desktop/dbt/core/dbt/include/global_project",
      "path": "macros/materializations/snapshots/helpers.sql",
      "original_file_path": "macros/materializations/snapshots/helpers.sql",
      "name": "build_snapshot_staging_table",
      "macro_sql": "{% macro build_snapshot_staging_table(strategy, sql, target_relation) %}\n    {% set temp_relation = make_temp_relation(target_relation) %}\n\n    {% set select = snapshot_staging_table(strategy, sql, target_relation) %}\n\n    {% call statement('build_snapshot_staging_relation') %}\n        {{ create_table_as(True, temp_relation, select) }}\n    {% endcall %}\n\n    {% do return(temp_relation) %}\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": [
          "macro.dbt.make_temp_relation",
          "macro.dbt.snapshot_staging_table",
          "macro.dbt.statement",
          "macro.dbt.create_table_as"
        ]
      },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1665426349.583071,
      "supported_languages": null
    },
    "macro.dbt.materialization_snapshot_default": {
      "unique_id": "macro.dbt.materialization_snapshot_default",
      "package_name": "dbt",
      "root_path": "/Users/sung/Desktop/dbt/core/dbt/include/global_project",
      "path": "macros/materializations/snapshots/snapshot.sql",
      "original_file_path": "macros/materializations/snapshots/snapshot.sql",
      "name": "materialization_snapshot_default",
      "macro_sql": "{% materialization snapshot, default %}\n  {%- set config = model['config'] -%}\n\n  {%- set target_table = model.get('alias', model.get('name')) -%}\n\n  {%- set strategy_name = config.get('strategy') -%}\n  {%- set unique_key = config.get('unique_key') %}\n  -- grab current tables grants config for comparision later on\n  {%- set grant_config = config.get('grants') -%}\n\n  {% set target_relation_exists, target_relation = get_or_create_relation(\n          database=model.database,\n          schema=model.schema,\n          identifier=target_table,\n          type='table') -%}\n\n  {%- if not target_relation.is_table -%}\n    {% do exceptions.relation_wrong_type(target_relation, 'table') %}\n  {%- endif -%}\n\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  {% set strategy_macro = strategy_dispatch(strategy_name) %}\n  {% set strategy = strategy_macro(model, \"snapshotted_data\", \"source_data\", config, target_relation_exists) %}\n\n  {% if not target_relation_exists %}\n\n      {% set build_sql = build_snapshot_table(strategy, model['compiled_code']) %}\n      {% set final_sql = create_table_as(False, target_relation, build_sql) %}\n\n  {% else %}\n\n      {{ adapter.valid_snapshot_target(target_relation) }}\n\n      {% set staging_table = build_snapshot_staging_table(strategy, sql, target_relation) %}\n\n      -- this may no-op if the database does not require column expansion\n      {% do adapter.expand_target_column_types(from_relation=staging_table,\n                                               to_relation=target_relation) %}\n\n      {% set missing_columns = adapter.get_missing_columns(staging_table, target_relation)\n                                   | rejectattr('name', 'equalto', 'dbt_change_type')\n                                   | rejectattr('name', 'equalto', 'DBT_CHANGE_TYPE')\n                                   | rejectattr('name', 'equalto', 'dbt_unique_key')\n                                   | rejectattr('name', 'equalto', 'DBT_UNIQUE_KEY')\n                                   | list %}\n\n      {% do create_columns(target_relation, missing_columns) %}\n\n      {% set source_columns = adapter.get_columns_in_relation(staging_table)\n                                   | rejectattr('name', 'equalto', 'dbt_change_type')\n                                   | rejectattr('name', 'equalto', 'DBT_CHANGE_TYPE')\n                                   | rejectattr('name', 'equalto', 'dbt_unique_key')\n                                   | rejectattr('name', 'equalto', 'DBT_UNIQUE_KEY')\n                                   | list %}\n\n      {% set quoted_source_columns = [] %}\n      {% for column in source_columns %}\n        {% do quoted_source_columns.append(adapter.quote(column.name)) %}\n      {% endfor %}\n\n      {% set final_sql = snapshot_merge_sql(\n            target = target_relation,\n            source = staging_table,\n            insert_cols = quoted_source_columns\n         )\n      %}\n\n  {% endif %}\n\n  {% call statement('main') %}\n      {{ final_sql }}\n  {% endcall %}\n\n  {% set should_revoke = should_revoke(target_relation_exists, full_refresh_mode=False) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {% if not target_relation_exists %}\n    {% do create_indexes(target_relation) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {{ adapter.commit() }}\n\n  {% if staging_table is defined %}\n      {% do post_snapshot(staging_table) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmaterialization %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": [
          "macro.dbt.get_or_create_relation",
          "macro.dbt.run_hooks",
          "macro.dbt.strategy_dispatch",
          "macro.dbt.build_snapshot_table",
          "macro.dbt.create_table_as",
          "macro.dbt.build_snapshot_staging_table",
          "macro.dbt.create_columns",
          "macro.dbt.snapshot_merge_sql",
          "macro.dbt.statement",
          "macro.dbt.should_revoke",
          "macro.dbt.apply_grants",
          "macro.dbt.persist_docs",
          "macro.dbt.create_indexes",
          "macro.dbt.post_snapshot"
        ]
      },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1665426349.598475,
      "supported_languages": ["sql"]
    },
    "macro.dbt.materialization_test_default": {
      "unique_id": "macro.dbt.materialization_test_default",
      "package_name": "dbt",
      "root_path": "/Users/sung/Desktop/dbt/core/dbt/include/global_project",
      "path": "macros/materializations/tests/test.sql",
      "original_file_path": "macros/materializations/tests/test.sql",
      "name": "materialization_test_default",
      "macro_sql": "{%- materialization test, default -%}\n\n  {% set relations = [] %}\n\n  {% if should_store_failures() %}\n\n    {% set identifier = model['alias'] %}\n    {% set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) %}\n    {% set target_relation = api.Relation.create(\n        identifier=identifier, schema=schema, database=database, type='table') -%} %}\n\n    {% if old_relation %}\n        {% do adapter.drop_relation(old_relation) %}\n    {% endif %}\n\n    {% call statement(auto_begin=True) %}\n        {{ create_table_as(False, target_relation, sql) }}\n    {% endcall %}\n\n    {% do relations.append(target_relation) %}\n\n    {% set main_sql %}\n        select *\n        from {{ target_relation }}\n    {% endset %}\n\n    {{ adapter.commit() }}\n\n  {% else %}\n\n      {% set main_sql = sql %}\n\n  {% endif %}\n\n  {% set limit = config.get('limit') %}\n  {% set fail_calc = config.get('fail_calc') %}\n  {% set warn_if = config.get('warn_if') %}\n  {% set error_if = config.get('error_if') %}\n\n  {% call statement('main', fetch_result=True) -%}\n\n    {{ get_test_sql(main_sql, fail_calc, warn_if, error_if, limit)}}\n\n  {%- endcall %}\n\n  {{ return({'relations': relations}) }}\n\n{%- endmaterialization -%}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": [
          "macro.dbt.should_store_failures",
          "macro.dbt.statement",
          "macro.dbt.create_table_as",
          "macro.dbt.get_test_sql"
        ]
      },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1665426349.604537,
      "supported_languages": ["sql"]
    },
    "macro.dbt.get_test_sql": {
      "unique_id": "macro.dbt.get_test_sql",
      "package_name": "dbt",
      "root_path": "/Users/sung/Desktop/dbt/core/dbt/include/global_project",
      "path": "macros/materializations/tests/helpers.sql",
      "original_file_path": "macros/materializations/tests/helpers.sql",
      "name": "get_test_sql",
      "macro_sql": "{% macro get_test_sql(main_sql, fail_calc, warn_if, error_if, limit) -%}\n  {{ adapter.dispatch('get_test_sql', 'dbt')(main_sql, fail_calc, warn_if, error_if, limit) }}\n{%- endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": { "macros": ["macro.dbt.default__get_test_sql"] },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1665426349.606178,
      "supported_languages": null
    },
    "macro.dbt.default__get_test_sql": {
      "unique_id": "macro.dbt.default__get_test_sql",
      "package_name": "dbt",
      "root_path": "/Users/sung/Desktop/dbt/core/dbt/include/global_project",
      "path": "macros/materializations/tests/helpers.sql",
      "original_file_path": "macros/materializations/tests/helpers.sql",
      "name": "default__get_test_sql",
      "macro_sql": "{% macro default__get_test_sql(main_sql, fail_calc, warn_if, error_if, limit) -%}\n    select\n      {{ fail_calc }} as failures,\n      {{ fail_calc }} {{ warn_if }} as should_warn,\n      {{ fail_calc }} {{ error_if }} as should_error\n    from (\n      {{ main_sql }}\n      {{ \"limit \" ~ limit if limit != none }}\n    ) dbt_internal_test\n{%- endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": { "macros": [] },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1665426349.60703,
      "supported_languages": null
    },
    "macro.dbt.get_where_subquery": {
      "unique_id": "macro.dbt.get_where_subquery",
      "package_name": "dbt",
      "root_path": "/Users/sung/Desktop/dbt/core/dbt/include/global_project",
      "path": "macros/materializations/tests/where_subquery.sql",
      "original_file_path": "macros/materializations/tests/where_subquery.sql",
      "name": "get_where_subquery",
      "macro_sql": "{% macro get_where_subquery(relation) -%}\n    {% do return(adapter.dispatch('get_where_subquery', 'dbt')(relation)) %}\n{%- endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": { "macros": ["macro.dbt.default__get_where_subquery"] },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1665426349.608352,
      "supported_languages": null
    },
    "macro.dbt.default__get_where_subquery": {
      "unique_id": "macro.dbt.default__get_where_subquery",
      "package_name": "dbt",
      "root_path": "/Users/sung/Desktop/dbt/core/dbt/include/global_project",
      "path": "macros/materializations/tests/where_subquery.sql",
      "original_file_path": "macros/materializations/tests/where_subquery.sql",
      "name": "default__get_where_subquery",
      "macro_sql": "{% macro default__get_where_subquery(relation) -%}\n    {% set where = config.get('where', '') %}\n    {% if where %}\n        {%- set filtered -%}\n            (select * from {{ relation }} where {{ where }}) dbt_subquery\n        {%- endset -%}\n        {% do return(filtered) %}\n    {%- else -%}\n        {% do return(relation) %}\n    {%- endif -%}\n{%- endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": { "macros": [] },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1665426349.609531,
      "supported_languages": null
    },
    "macro.dbt.get_quoted_csv": {
      "unique_id": "macro.dbt.get_quoted_csv",
      "package_name": "dbt",
      "root_path": "/Users/sung/Desktop/dbt/core/dbt/include/global_project",
      "path": "macros/materializations/models/incremental/column_helpers.sql",
      "original_file_path": "macros/materializations/models/incremental/column_helpers.sql",
      "name": "get_quoted_csv",
      "macro_sql": "{% macro get_quoted_csv(column_names) %}\n\n    {% set quoted = [] %}\n    {% for col in column_names -%}\n        {%- do quoted.append(adapter.quote(col)) -%}\n    {%- endfor %}\n\n    {%- set dest_cols_csv = quoted | join(', ') -%}\n    {{ return(dest_cols_csv) }}\n\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": { "macros": [] },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1665426349.613339,
      "supported_languages": null
    },
    "macro.dbt.diff_columns": {
      "unique_id": "macro.dbt.diff_columns",
      "package_name": "dbt",
      "root_path": "/Users/sung/Desktop/dbt/core/dbt/include/global_project",
      "path": "macros/materializations/models/incremental/column_helpers.sql",
      "original_file_path": "macros/materializations/models/incremental/column_helpers.sql",
      "name": "diff_columns",
      "macro_sql": "{% macro diff_columns(source_columns, target_columns) %}\n\n  {% set result = [] %}\n  {% set source_names = source_columns | map(attribute = 'column') | list %}\n  {% set target_names = target_columns | map(attribute = 'column') | list %}\n\n   {# --check whether the name attribute exists in the target - this does not perform a data type check #}\n   {% for sc in source_columns %}\n     {% if sc.name not in target_names %}\n        {{ result.append(sc) }}\n     {% endif %}\n   {% endfor %}\n\n  {{ return(result) }}\n\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": { "macros": [] },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1665426349.614652,
      "supported_languages": null
    },
    "macro.dbt.diff_column_data_types": {
      "unique_id": "macro.dbt.diff_column_data_types",
      "package_name": "dbt",
      "root_path": "/Users/sung/Desktop/dbt/core/dbt/include/global_project",
      "path": "macros/materializations/models/incremental/column_helpers.sql",
      "original_file_path": "macros/materializations/models/incremental/column_helpers.sql",
      "name": "diff_column_data_types",
      "macro_sql": "{% macro diff_column_data_types(source_columns, target_columns) %}\n\n  {% set result = [] %}\n  {% for sc in source_columns %}\n    {% set tc = target_columns | selectattr(\"name\", \"equalto\", sc.name) | list | first %}\n    {% if tc %}\n      {% if sc.data_type != tc.data_type and not sc.can_expand_to(other_column=tc) %}\n        {{ result.append( { 'column_name': tc.name, 'new_type': sc.data_type } ) }}\n      {% endif %}\n    {% endif %}\n  {% endfor %}\n\n  {{ return(result) }}\n\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": { "macros": [] },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1665426349.616195,
      "supported_languages": null
    },
    "macro.dbt.get_merge_update_columns": {
      "unique_id": "macro.dbt.get_merge_update_columns",
      "package_name": "dbt",
      "root_path": "/Users/sung/Desktop/dbt/core/dbt/include/global_project",
      "path": "macros/materializations/models/incremental/column_helpers.sql",
      "original_file_path": "macros/materializations/models/incremental/column_helpers.sql",
      "name": "get_merge_update_columns",
      "macro_sql": "{% macro get_merge_update_columns(merge_update_columns, merge_exclude_columns, dest_columns) %}\n  {{ return(adapter.dispatch('get_merge_update_columns', 'dbt')(merge_update_columns, merge_exclude_columns, dest_columns)) }}\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": ["macro.dbt.default__get_merge_update_columns"]
      },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1665426349.6167638,
      "supported_languages": null
    },
    "macro.dbt.default__get_merge_update_columns": {
      "unique_id": "macro.dbt.default__get_merge_update_columns",
      "package_name": "dbt",
      "root_path": "/Users/sung/Desktop/dbt/core/dbt/include/global_project",
      "path": "macros/materializations/models/incremental/column_helpers.sql",
      "original_file_path": "macros/materializations/models/incremental/column_helpers.sql",
      "name": "default__get_merge_update_columns",
      "macro_sql": "{% macro default__get_merge_update_columns(merge_update_columns, merge_exclude_columns, dest_columns) %}\n  {%- set default_cols = dest_columns | map(attribute=\"quoted\") | list -%}\n\n  {%- if merge_update_columns and merge_exclude_columns -%}\n    {{ exceptions.raise_compiler_error(\n        'Model cannot specify merge_update_columns and merge_exclude_columns. Please update model to use only one config'\n    )}}\n  {%- elif merge_update_columns -%}\n    {%- set update_columns = merge_update_columns -%}\n  {%- elif merge_exclude_columns -%}\n    {%- set update_columns = [] -%}\n    {%- for column in dest_columns -%}\n      {% if column.column | lower not in merge_exclude_columns | map(\"lower\") | list %}\n        {%- do update_columns.append(column.quoted) -%}\n      {% endif %}\n    {%- endfor -%}\n  {%- else -%}\n    {%- set update_columns = default_cols -%}\n  {%- endif -%}\n\n  {{ return(update_columns) }}\n\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": { "macros": [] },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1665426349.618922,
      "supported_languages": null
    },
    "macro.dbt.get_merge_sql": {
      "unique_id": "macro.dbt.get_merge_sql",
      "package_name": "dbt",
      "root_path": "/Users/sung/Desktop/dbt/core/dbt/include/global_project",
      "path": "macros/materializations/models/incremental/merge.sql",
      "original_file_path": "macros/materializations/models/incremental/merge.sql",
      "name": "get_merge_sql",
      "macro_sql": "{% macro get_merge_sql(target, source, unique_key, dest_columns, predicates=none) -%}\n  {{ adapter.dispatch('get_merge_sql', 'dbt')(target, source, unique_key, dest_columns, predicates) }}\n{%- endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": ["macro.dbt_snowflake.snowflake__get_merge_sql"]
      },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1665426349.627567,
      "supported_languages": null
    },
    "macro.dbt.default__get_merge_sql": {
      "unique_id": "macro.dbt.default__get_merge_sql",
      "package_name": "dbt",
      "root_path": "/Users/sung/Desktop/dbt/core/dbt/include/global_project",
      "path": "macros/materializations/models/incremental/merge.sql",
      "original_file_path": "macros/materializations/models/incremental/merge.sql",
      "name": "default__get_merge_sql",
      "macro_sql": "{% macro default__get_merge_sql(target, source, unique_key, dest_columns, predicates) -%}\n    {%- set predicates = [] if predicates is none else [] + predicates -%}\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n    {%- set merge_update_columns = config.get('merge_update_columns') -%}\n    {%- set merge_exclude_columns = config.get('merge_exclude_columns') -%}\n    {%- set update_columns = get_merge_update_columns(merge_update_columns, merge_exclude_columns, dest_columns) -%}\n    {%- set sql_header = config.get('sql_header', none) -%}\n\n    {% if unique_key %}\n        {% if unique_key is sequence and unique_key is not mapping and unique_key is not string %}\n            {% for key in unique_key %}\n                {% set this_key_match %}\n                    DBT_INTERNAL_SOURCE.{{ key }} = DBT_INTERNAL_DEST.{{ key }}\n                {% endset %}\n                {% do predicates.append(this_key_match) %}\n            {% endfor %}\n        {% else %}\n            {% set unique_key_match %}\n                DBT_INTERNAL_SOURCE.{{ unique_key }} = DBT_INTERNAL_DEST.{{ unique_key }}\n            {% endset %}\n            {% do predicates.append(unique_key_match) %}\n        {% endif %}\n    {% else %}\n        {% do predicates.append('FALSE') %}\n    {% endif %}\n\n    {{ sql_header if sql_header is not none }}\n\n    merge into {{ target }} as DBT_INTERNAL_DEST\n        using {{ source }} as DBT_INTERNAL_SOURCE\n        on {{ predicates | join(' and ') }}\n\n    {% if unique_key %}\n    when matched then update set\n        {% for column_name in update_columns -%}\n            {{ column_name }} = DBT_INTERNAL_SOURCE.{{ column_name }}\n            {%- if not loop.last %}, {%- endif %}\n        {%- endfor %}\n    {% endif %}\n\n    when not matched then insert\n        ({{ dest_cols_csv }})\n    values\n        ({{ dest_cols_csv }})\n\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": [
          "macro.dbt.get_quoted_csv",
          "macro.dbt.get_merge_update_columns"
        ]
      },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1665426349.6324081,
      "supported_languages": null
    },
    "macro.dbt.get_delete_insert_merge_sql": {
      "unique_id": "macro.dbt.get_delete_insert_merge_sql",
      "package_name": "dbt",
      "root_path": "/Users/sung/Desktop/dbt/core/dbt/include/global_project",
      "path": "macros/materializations/models/incremental/merge.sql",
      "original_file_path": "macros/materializations/models/incremental/merge.sql",
      "name": "get_delete_insert_merge_sql",
      "macro_sql": "{% macro get_delete_insert_merge_sql(target, source, unique_key, dest_columns) -%}\n  {{ adapter.dispatch('get_delete_insert_merge_sql', 'dbt')(target, source, unique_key, dest_columns) }}\n{%- endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": ["macro.dbt_snowflake.snowflake__get_delete_insert_merge_sql"]
      },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1665426349.633098,
      "supported_languages": null
    },
    "macro.dbt.default__get_delete_insert_merge_sql": {
      "unique_id": "macro.dbt.default__get_delete_insert_merge_sql",
      "package_name": "dbt",
      "root_path": "/Users/sung/Desktop/dbt/core/dbt/include/global_project",
      "path": "macros/materializations/models/incremental/merge.sql",
      "original_file_path": "macros/materializations/models/incremental/merge.sql",
      "name": "default__get_delete_insert_merge_sql",
      "macro_sql": "{% macro default__get_delete_insert_merge_sql(target, source, unique_key, dest_columns) -%}\n\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n\n    {% if unique_key %}\n        {% if unique_key is sequence and unique_key is not string %}\n            delete from {{target }}\n            using {{ source }}\n            where (\n                {% for key in unique_key %}\n                    {{ source }}.{{ key }} = {{ target }}.{{ key }}\n                    {{ \"and \" if not loop.last }}\n                {% endfor %}\n            );\n        {% else %}\n            delete from {{ target }}\n            where (\n                {{ unique_key }}) in (\n                select ({{ unique_key }})\n                from {{ source }}\n            );\n\n        {% endif %}\n    {% endif %}\n\n    insert into {{ target }} ({{ dest_cols_csv }})\n    (\n        select {{ dest_cols_csv }}\n        from {{ source }}\n    )\n\n{%- endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": { "macros": ["macro.dbt.get_quoted_csv"] },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1665426349.635215,
      "supported_languages": null
    },
    "macro.dbt.get_insert_overwrite_merge_sql": {
      "unique_id": "macro.dbt.get_insert_overwrite_merge_sql",
      "package_name": "dbt",
      "root_path": "/Users/sung/Desktop/dbt/core/dbt/include/global_project",
      "path": "macros/materializations/models/incremental/merge.sql",
      "original_file_path": "macros/materializations/models/incremental/merge.sql",
      "name": "get_insert_overwrite_merge_sql",
      "macro_sql": "{% macro get_insert_overwrite_merge_sql(target, source, dest_columns, predicates, include_sql_header=false) -%}\n  {{ adapter.dispatch('get_insert_overwrite_merge_sql', 'dbt')(target, source, dest_columns, predicates, include_sql_header) }}\n{%- endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": ["macro.dbt.default__get_insert_overwrite_merge_sql"]
      },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1665426349.636182,
      "supported_languages": null
    },
    "macro.dbt.default__get_insert_overwrite_merge_sql": {
      "unique_id": "macro.dbt.default__get_insert_overwrite_merge_sql",
      "package_name": "dbt",
      "root_path": "/Users/sung/Desktop/dbt/core/dbt/include/global_project",
      "path": "macros/materializations/models/incremental/merge.sql",
      "original_file_path": "macros/materializations/models/incremental/merge.sql",
      "name": "default__get_insert_overwrite_merge_sql",
      "macro_sql": "{% macro default__get_insert_overwrite_merge_sql(target, source, dest_columns, predicates, include_sql_header) -%}\n    {#-- The only time include_sql_header is True: --#}\n    {#-- BigQuery + insert_overwrite strategy + \"static\" partitions config --#}\n    {#-- We should consider including the sql header at the materialization level instead --#}\n\n    {%- set predicates = [] if predicates is none else [] + predicates -%}\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n    {%- set sql_header = config.get('sql_header', none) -%}\n\n    {{ sql_header if sql_header is not none and include_sql_header }}\n\n    merge into {{ target }} as DBT_INTERNAL_DEST\n        using {{ source }} as DBT_INTERNAL_SOURCE\n        on FALSE\n\n    when not matched by source\n        {% if predicates %} and {{ predicates | join(' and ') }} {% endif %}\n        then delete\n\n    when not matched then insert\n        ({{ dest_cols_csv }})\n    values\n        ({{ dest_cols_csv }})\n\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": { "macros": ["macro.dbt.get_quoted_csv"] },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1665426349.638239,
      "supported_languages": null
    },
    "macro.dbt.is_incremental": {
      "unique_id": "macro.dbt.is_incremental",
      "package_name": "dbt",
      "root_path": "/Users/sung/Desktop/dbt/core/dbt/include/global_project",
      "path": "macros/materializations/models/incremental/is_incremental.sql",
      "original_file_path": "macros/materializations/models/incremental/is_incremental.sql",
      "name": "is_incremental",
      "macro_sql": "{% macro is_incremental() %}\n    {#-- do not run introspective queries in parsing #}\n    {% if not execute %}\n        {{ return(False) }}\n    {% else %}\n        {% set relation = adapter.get_relation(this.database, this.schema, this.table) %}\n        {{ return(relation is not none\n                  and relation.type == 'table'\n                  and model.config.materialized == 'incremental'\n                  and not should_full_refresh()) }}\n    {% endif %}\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": { "macros": ["macro.dbt.should_full_refresh"] },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1665426349.640272,
      "supported_languages": null
    },
    "macro.dbt.get_incremental_append_sql": {
      "unique_id": "macro.dbt.get_incremental_append_sql",
      "package_name": "dbt",
      "root_path": "/Users/sung/Desktop/dbt/core/dbt/include/global_project",
      "path": "macros/materializations/models/incremental/strategies.sql",
      "original_file_path": "macros/materializations/models/incremental/strategies.sql",
      "name": "get_incremental_append_sql",
      "macro_sql": "{% macro get_incremental_append_sql(arg_dict) %}\n\n  {{ return(adapter.dispatch('get_incremental_append_sql', 'dbt')(arg_dict)) }}\n\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": ["macro.dbt.default__get_incremental_append_sql"]
      },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1665426349.642739,
      "supported_languages": null
    },
    "macro.dbt.default__get_incremental_append_sql": {
      "unique_id": "macro.dbt.default__get_incremental_append_sql",
      "package_name": "dbt",
      "root_path": "/Users/sung/Desktop/dbt/core/dbt/include/global_project",
      "path": "macros/materializations/models/incremental/strategies.sql",
      "original_file_path": "macros/materializations/models/incremental/strategies.sql",
      "name": "default__get_incremental_append_sql",
      "macro_sql": "{% macro default__get_incremental_append_sql(arg_dict) %}\n\n  {% do return(get_insert_into_sql(arg_dict[\"target_relation\"], arg_dict[\"temp_relation\"], arg_dict[\"dest_columns\"])) %}\n\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": { "macros": ["macro.dbt.get_insert_into_sql"] },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1665426349.6437602,
      "supported_languages": null
    },
    "macro.dbt.get_incremental_delete_insert_sql": {
      "unique_id": "macro.dbt.get_incremental_delete_insert_sql",
      "package_name": "dbt",
      "root_path": "/Users/sung/Desktop/dbt/core/dbt/include/global_project",
      "path": "macros/materializations/models/incremental/strategies.sql",
      "original_file_path": "macros/materializations/models/incremental/strategies.sql",
      "name": "get_incremental_delete_insert_sql",
      "macro_sql": "{% macro get_incremental_delete_insert_sql(arg_dict) %}\n\n  {{ return(adapter.dispatch('get_incremental_delete_insert_sql', 'dbt')(arg_dict)) }}\n\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": ["macro.dbt.default__get_incremental_delete_insert_sql"]
      },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1665426349.6443782,
      "supported_languages": null
    },
    "macro.dbt.default__get_incremental_delete_insert_sql": {
      "unique_id": "macro.dbt.default__get_incremental_delete_insert_sql",
      "package_name": "dbt",
      "root_path": "/Users/sung/Desktop/dbt/core/dbt/include/global_project",
      "path": "macros/materializations/models/incremental/strategies.sql",
      "original_file_path": "macros/materializations/models/incremental/strategies.sql",
      "name": "default__get_incremental_delete_insert_sql",
      "macro_sql": "{% macro default__get_incremental_delete_insert_sql(arg_dict) %}\n\n  {% do return(get_delete_insert_merge_sql(arg_dict[\"target_relation\"], arg_dict[\"temp_relation\"], arg_dict[\"unique_key\"], arg_dict[\"dest_columns\"])) %}\n\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": { "macros": ["macro.dbt.get_delete_insert_merge_sql"] },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1665426349.645071,
      "supported_languages": null
    },
    "macro.dbt.get_incremental_merge_sql": {
      "unique_id": "macro.dbt.get_incremental_merge_sql",
      "package_name": "dbt",
      "root_path": "/Users/sung/Desktop/dbt/core/dbt/include/global_project",
      "path": "macros/materializations/models/incremental/strategies.sql",
      "original_file_path": "macros/materializations/models/incremental/strategies.sql",
      "name": "get_incremental_merge_sql",
      "macro_sql": "{% macro get_incremental_merge_sql(arg_dict) %}\n\n  {{ return(adapter.dispatch('get_incremental_merge_sql', 'dbt')(arg_dict)) }}\n\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": ["macro.dbt.default__get_incremental_merge_sql"]
      },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1665426349.645534,
      "supported_languages": null
    },
    "macro.dbt.default__get_incremental_merge_sql": {
      "unique_id": "macro.dbt.default__get_incremental_merge_sql",
      "package_name": "dbt",
      "root_path": "/Users/sung/Desktop/dbt/core/dbt/include/global_project",
      "path": "macros/materializations/models/incremental/strategies.sql",
      "original_file_path": "macros/materializations/models/incremental/strategies.sql",
      "name": "default__get_incremental_merge_sql",
      "macro_sql": "{% macro default__get_incremental_merge_sql(arg_dict) %}\n\n  {% do return(get_merge_sql(arg_dict[\"target_relation\"], arg_dict[\"temp_relation\"], arg_dict[\"unique_key\"], arg_dict[\"dest_columns\"])) %}\n\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": { "macros": ["macro.dbt.get_merge_sql"] },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1665426349.646425,
      "supported_languages": null
    },
    "macro.dbt.get_incremental_insert_overwrite_sql": {
      "unique_id": "macro.dbt.get_incremental_insert_overwrite_sql",
      "package_name": "dbt",
      "root_path": "/Users/sung/Desktop/dbt/core/dbt/include/global_project",
      "path": "macros/materializations/models/incremental/strategies.sql",
      "original_file_path": "macros/materializations/models/incremental/strategies.sql",
      "name": "get_incremental_insert_overwrite_sql",
      "macro_sql": "{% macro get_incremental_insert_overwrite_sql(arg_dict) %}\n\n  {{ return(adapter.dispatch('get_incremental_insert_overwrite_sql', 'dbt')(arg_dict)) }}\n\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": ["macro.dbt.default__get_incremental_insert_overwrite_sql"]
      },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1665426349.646982,
      "supported_languages": null
    },
    "macro.dbt.default__get_incremental_insert_overwrite_sql": {
      "unique_id": "macro.dbt.default__get_incremental_insert_overwrite_sql",
      "package_name": "dbt",
      "root_path": "/Users/sung/Desktop/dbt/core/dbt/include/global_project",
      "path": "macros/materializations/models/incremental/strategies.sql",
      "original_file_path": "macros/materializations/models/incremental/strategies.sql",
      "name": "default__get_incremental_insert_overwrite_sql",
      "macro_sql": "{% macro default__get_incremental_insert_overwrite_sql(arg_dict) %}\n\n  {% do return(get_insert_overwrite_merge_sql(arg_dict[\"target_relation\"], arg_dict[\"temp_relation\"], arg_dict[\"dest_columns\"], arg_dict[\"predicates\"])) %}\n\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": { "macros": ["macro.dbt.get_insert_overwrite_merge_sql"] },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1665426349.64768,
      "supported_languages": null
    },
    "macro.dbt.get_incremental_default_sql": {
      "unique_id": "macro.dbt.get_incremental_default_sql",
      "package_name": "dbt",
      "root_path": "/Users/sung/Desktop/dbt/core/dbt/include/global_project",
      "path": "macros/materializations/models/incremental/strategies.sql",
      "original_file_path": "macros/materializations/models/incremental/strategies.sql",
      "name": "get_incremental_default_sql",
      "macro_sql": "{% macro get_incremental_default_sql(arg_dict) %}\n\n  {{ return(adapter.dispatch('get_incremental_default_sql', 'dbt')(arg_dict)) }}\n\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": ["macro.dbt.default__get_incremental_default_sql"]
      },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1665426349.648211,
      "supported_languages": null
    },
    "macro.dbt.default__get_incremental_default_sql": {
      "unique_id": "macro.dbt.default__get_incremental_default_sql",
      "package_name": "dbt",
      "root_path": "/Users/sung/Desktop/dbt/core/dbt/include/global_project",
      "path": "macros/materializations/models/incremental/strategies.sql",
      "original_file_path": "macros/materializations/models/incremental/strategies.sql",
      "name": "default__get_incremental_default_sql",
      "macro_sql": "{% macro default__get_incremental_default_sql(arg_dict) %}\n\n  {% do return(get_incremental_append_sql(arg_dict)) %}\n\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": { "macros": ["macro.dbt.get_incremental_append_sql"] },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1665426349.6486259,
      "supported_languages": null
    },
    "macro.dbt.get_insert_into_sql": {
      "unique_id": "macro.dbt.get_insert_into_sql",
      "package_name": "dbt",
      "root_path": "/Users/sung/Desktop/dbt/core/dbt/include/global_project",
      "path": "macros/materializations/models/incremental/strategies.sql",
      "original_file_path": "macros/materializations/models/incremental/strategies.sql",
      "name": "get_insert_into_sql",
      "macro_sql": "{% macro get_insert_into_sql(target_relation, temp_relation, dest_columns) %}\n\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n\n    insert into {{ target_relation }} ({{ dest_cols_csv }})\n    (\n        select {{ dest_cols_csv }}\n        from {{ temp_relation }}\n    )\n\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": { "macros": ["macro.dbt.get_quoted_csv"] },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1665426349.64939,
      "supported_languages": null
    },
    "macro.dbt.materialization_incremental_default": {
      "unique_id": "macro.dbt.materialization_incremental_default",
      "package_name": "dbt",
      "root_path": "/Users/sung/Desktop/dbt/core/dbt/include/global_project",
      "path": "macros/materializations/models/incremental/incremental.sql",
      "original_file_path": "macros/materializations/models/incremental/incremental.sql",
      "name": "materialization_incremental_default",
      "macro_sql": "{% materialization incremental, default -%}\n\n  -- relations\n  {%- set existing_relation = load_cached_relation(this) -%}\n  {%- set target_relation = this.incorporate(type='table') -%}\n  {%- set temp_relation = make_temp_relation(target_relation)-%}\n  {%- set intermediate_relation = make_intermediate_relation(target_relation)-%}\n  {%- set backup_relation_type = 'table' if existing_relation is none else existing_relation.type -%}\n  {%- set backup_relation = make_backup_relation(target_relation, backup_relation_type) -%}\n\n  -- configs\n  {%- set unique_key = config.get('unique_key') -%}\n  {%- set full_refresh_mode = (should_full_refresh()  or existing_relation.is_view) -%}\n  {%- set on_schema_change = incremental_validate_on_schema_change(config.get('on_schema_change'), default='ignore') -%}\n\n  -- the temp_ and backup_ relations should not already exist in the database; get_relation\n  -- will return None in that case. Otherwise, we get a relation that we can drop\n  -- later, before we try to use this name for the current operation. This has to happen before\n  -- BEGIN, in a separate transaction\n  {%- set preexisting_intermediate_relation = load_cached_relation(intermediate_relation)-%}\n  {%- set preexisting_backup_relation = load_cached_relation(backup_relation) -%}\n   -- grab current tables grants config for comparision later on\n  {% set grant_config = config.get('grants') %}\n  {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n  {{ drop_relation_if_exists(preexisting_backup_relation) }}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  {% set to_drop = [] %}\n\n  {% if existing_relation is none %}\n      {% set build_sql = get_create_table_as_sql(False, target_relation, sql) %}\n  {% elif full_refresh_mode %}\n      {% set build_sql = get_create_table_as_sql(False, intermediate_relation, sql) %}\n      {% set need_swap = true %}\n  {% else %}\n    {% do run_query(get_create_table_as_sql(True, temp_relation, sql)) %}\n    {% do adapter.expand_target_column_types(\n             from_relation=temp_relation,\n             to_relation=target_relation) %}\n    {#-- Process schema changes. Returns dict of changes if successful. Use source columns for upserting/merging --#}\n    {% set dest_columns = process_schema_changes(on_schema_change, temp_relation, existing_relation) %}\n    {% if not dest_columns %}\n      {% set dest_columns = adapter.get_columns_in_relation(existing_relation) %}\n    {% endif %}\n\n    {#-- Get the incremental_strategy, the macro to use for the strategy, and build the sql --#}\n    {% set incremental_strategy = config.get('incremental_strategy') or 'default' %}\n    {% set incremental_predicates = config.get('incremental_predicates', none) %}\n    {% set strategy_sql_macro_func = adapter.get_incremental_strategy_macro(context, incremental_strategy) %}\n    {% set strategy_arg_dict = ({'target_relation': target_relation, 'temp_relation': temp_relation, 'unique_key': unique_key, 'dest_columns': dest_columns, 'predicates': incremental_predicates }) %}\n    {% set build_sql = strategy_sql_macro_func(strategy_arg_dict) %}\n\n  {% endif %}\n\n  {% call statement(\"main\") %}\n      {{ build_sql }}\n  {% endcall %}\n\n  {% if need_swap %}\n      {% do adapter.rename_relation(target_relation, backup_relation) %}\n      {% do adapter.rename_relation(intermediate_relation, target_relation) %}\n      {% do to_drop.append(backup_relation) %}\n  {% endif %}\n\n  {% set should_revoke = should_revoke(existing_relation, full_refresh_mode) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {% if existing_relation is none or existing_relation.is_view or should_full_refresh() %}\n    {% do create_indexes(target_relation) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  -- `COMMIT` happens here\n  {% do adapter.commit() %}\n\n  {% for rel in to_drop %}\n      {% do adapter.drop_relation(rel) %}\n  {% endfor %}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{%- endmaterialization %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": [
          "macro.dbt.load_cached_relation",
          "macro.dbt.make_temp_relation",
          "macro.dbt.make_intermediate_relation",
          "macro.dbt.make_backup_relation",
          "macro.dbt.should_full_refresh",
          "macro.dbt.incremental_validate_on_schema_change",
          "macro.dbt.drop_relation_if_exists",
          "macro.dbt.run_hooks",
          "macro.dbt.get_create_table_as_sql",
          "macro.dbt.run_query",
          "macro.dbt.process_schema_changes",
          "macro.dbt.statement",
          "macro.dbt.should_revoke",
          "macro.dbt.apply_grants",
          "macro.dbt.persist_docs",
          "macro.dbt.create_indexes"
        ]
      },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1665426349.662621,
      "supported_languages": ["sql"]
    },
    "macro.dbt.incremental_validate_on_schema_change": {
      "unique_id": "macro.dbt.incremental_validate_on_schema_change",
      "package_name": "dbt",
      "root_path": "/Users/sung/Desktop/dbt/core/dbt/include/global_project",
      "path": "macros/materializations/models/incremental/on_schema_change.sql",
      "original_file_path": "macros/materializations/models/incremental/on_schema_change.sql",
      "name": "incremental_validate_on_schema_change",
      "macro_sql": "{% macro incremental_validate_on_schema_change(on_schema_change, default='ignore') %}\n\n   {% if on_schema_change not in ['sync_all_columns', 'append_new_columns', 'fail', 'ignore'] %}\n\n     {% set log_message = 'Invalid value for on_schema_change (%s) specified. Setting default value of %s.' % (on_schema_change, default) %}\n     {% do log(log_message) %}\n\n     {{ return(default) }}\n\n   {% else %}\n\n     {{ return(on_schema_change) }}\n\n   {% endif %}\n\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": { "macros": [] },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1665426349.672766,
      "supported_languages": null
    },
    "macro.dbt.check_for_schema_changes": {
      "unique_id": "macro.dbt.check_for_schema_changes",
      "package_name": "dbt",
      "root_path": "/Users/sung/Desktop/dbt/core/dbt/include/global_project",
      "path": "macros/materializations/models/incremental/on_schema_change.sql",
      "original_file_path": "macros/materializations/models/incremental/on_schema_change.sql",
      "name": "check_for_schema_changes",
      "macro_sql": "{% macro check_for_schema_changes(source_relation, target_relation) %}\n\n  {% set schema_changed = False %}\n\n  {%- set source_columns = adapter.get_columns_in_relation(source_relation) -%}\n  {%- set target_columns = adapter.get_columns_in_relation(target_relation) -%}\n  {%- set source_not_in_target = diff_columns(source_columns, target_columns) -%}\n  {%- set target_not_in_source = diff_columns(target_columns, source_columns) -%}\n\n  {% set new_target_types = diff_column_data_types(source_columns, target_columns) %}\n\n  {% if source_not_in_target != [] %}\n    {% set schema_changed = True %}\n  {% elif target_not_in_source != [] or new_target_types != [] %}\n    {% set schema_changed = True %}\n  {% elif new_target_types != [] %}\n    {% set schema_changed = True %}\n  {% endif %}\n\n  {% set changes_dict = {\n    'schema_changed': schema_changed,\n    'source_not_in_target': source_not_in_target,\n    'target_not_in_source': target_not_in_source,\n    'source_columns': source_columns,\n    'target_columns': target_columns,\n    'new_target_types': new_target_types\n  } %}\n\n  {% set msg %}\n    In {{ target_relation }}:\n        Schema changed: {{ schema_changed }}\n        Source columns not in target: {{ source_not_in_target }}\n        Target columns not in source: {{ target_not_in_source }}\n        New column types: {{ new_target_types }}\n  {% endset %}\n\n  {% do log(msg) %}\n\n  {{ return(changes_dict) }}\n\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": ["macro.dbt.diff_columns", "macro.dbt.diff_column_data_types"]
      },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1665426349.676588,
      "supported_languages": null
    },
    "macro.dbt.sync_column_schemas": {
      "unique_id": "macro.dbt.sync_column_schemas",
      "package_name": "dbt",
      "root_path": "/Users/sung/Desktop/dbt/core/dbt/include/global_project",
      "path": "macros/materializations/models/incremental/on_schema_change.sql",
      "original_file_path": "macros/materializations/models/incremental/on_schema_change.sql",
      "name": "sync_column_schemas",
      "macro_sql": "{% macro sync_column_schemas(on_schema_change, target_relation, schema_changes_dict) %}\n\n  {%- set add_to_target_arr = schema_changes_dict['source_not_in_target'] -%}\n\n  {%- if on_schema_change == 'append_new_columns'-%}\n     {%- if add_to_target_arr | length > 0 -%}\n       {%- do alter_relation_add_remove_columns(target_relation, add_to_target_arr, none) -%}\n     {%- endif -%}\n\n  {% elif on_schema_change == 'sync_all_columns' %}\n     {%- set remove_from_target_arr = schema_changes_dict['target_not_in_source'] -%}\n     {%- set new_target_types = schema_changes_dict['new_target_types'] -%}\n\n     {% if add_to_target_arr | length > 0 or remove_from_target_arr | length > 0 %}\n       {%- do alter_relation_add_remove_columns(target_relation, add_to_target_arr, remove_from_target_arr) -%}\n     {% endif %}\n\n     {% if new_target_types != [] %}\n       {% for ntt in new_target_types %}\n         {% set column_name = ntt['column_name'] %}\n         {% set new_type = ntt['new_type'] %}\n         {% do alter_column_type(target_relation, column_name, new_type) %}\n       {% endfor %}\n     {% endif %}\n\n  {% endif %}\n\n  {% set schema_change_message %}\n    In {{ target_relation }}:\n        Schema change approach: {{ on_schema_change }}\n        Columns added: {{ add_to_target_arr }}\n        Columns removed: {{ remove_from_target_arr }}\n        Data types changed: {{ new_target_types }}\n  {% endset %}\n\n  {% do log(schema_change_message) %}\n\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": [
          "macro.dbt.alter_relation_add_remove_columns",
          "macro.dbt.alter_column_type"
        ]
      },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1665426349.680587,
      "supported_languages": null
    },
    "macro.dbt.process_schema_changes": {
      "unique_id": "macro.dbt.process_schema_changes",
      "package_name": "dbt",
      "root_path": "/Users/sung/Desktop/dbt/core/dbt/include/global_project",
      "path": "macros/materializations/models/incremental/on_schema_change.sql",
      "original_file_path": "macros/materializations/models/incremental/on_schema_change.sql",
      "name": "process_schema_changes",
      "macro_sql": "{% macro process_schema_changes(on_schema_change, source_relation, target_relation) %}\n\n    {% if on_schema_change == 'ignore' %}\n\n     {{ return({}) }}\n\n    {% else %}\n\n      {% set schema_changes_dict = check_for_schema_changes(source_relation, target_relation) %}\n\n      {% if schema_changes_dict['schema_changed'] %}\n\n        {% if on_schema_change == 'fail' %}\n\n          {% set fail_msg %}\n              The source and target schemas on this incremental model are out of sync!\n              They can be reconciled in several ways:\n                - set the `on_schema_change` config to either append_new_columns or sync_all_columns, depending on your situation.\n                - Re-run the incremental model with `full_refresh: True` to update the target schema.\n                - update the schema manually and re-run the process.\n\n              Additional troubleshooting context:\n                 Source columns not in target: {{ schema_changes_dict['source_not_in_target'] }}\n                 Target columns not in source: {{ schema_changes_dict['target_not_in_source'] }}\n                 New column types: {{ schema_changes_dict['new_target_types'] }}\n          {% endset %}\n\n          {% do exceptions.raise_compiler_error(fail_msg) %}\n\n        {# -- unless we ignore, run the sync operation per the config #}\n        {% else %}\n\n          {% do sync_column_schemas(on_schema_change, target_relation, schema_changes_dict) %}\n\n        {% endif %}\n\n      {% endif %}\n\n      {{ return(schema_changes_dict['source_columns']) }}\n\n    {% endif %}\n\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": [
          "macro.dbt.check_for_schema_changes",
          "macro.dbt.sync_column_schemas"
        ]
      },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1665426349.6832361,
      "supported_languages": null
    },
    "macro.dbt.materialization_table_default": {
      "unique_id": "macro.dbt.materialization_table_default",
      "package_name": "dbt",
      "root_path": "/Users/sung/Desktop/dbt/core/dbt/include/global_project",
      "path": "macros/materializations/models/table/table.sql",
      "original_file_path": "macros/materializations/models/table/table.sql",
      "name": "materialization_table_default",
      "macro_sql": "{% materialization table, default %}\n\n  {%- set existing_relation = load_cached_relation(this) -%}\n  {%- set target_relation = this.incorporate(type='table') %}\n  {%- set intermediate_relation =  make_intermediate_relation(target_relation) -%}\n  -- the intermediate_relation should not already exist in the database; get_relation\n  -- will return None in that case. Otherwise, we get a relation that we can drop\n  -- later, before we try to use this name for the current operation\n  {%- set preexisting_intermediate_relation = load_cached_relation(intermediate_relation) -%}\n  /*\n      See ../view/view.sql for more information about this relation.\n  */\n  {%- set backup_relation_type = 'table' if existing_relation is none else existing_relation.type -%}\n  {%- set backup_relation = make_backup_relation(target_relation, backup_relation_type) -%}\n  -- as above, the backup_relation should not already exist\n  {%- set preexisting_backup_relation = load_cached_relation(backup_relation) -%}\n  -- grab current tables grants config for comparision later on\n  {% set grant_config = config.get('grants') %}\n\n  -- drop the temp relations if they exist already in the database\n  {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n  {{ drop_relation_if_exists(preexisting_backup_relation) }}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  -- build model\n  {% call statement('main') -%}\n    {{ get_create_table_as_sql(False, intermediate_relation, sql) }}\n  {%- endcall %}\n\n  -- cleanup\n  {% if existing_relation is not none %}\n      {{ adapter.rename_relation(existing_relation, backup_relation) }}\n  {% endif %}\n\n  {{ adapter.rename_relation(intermediate_relation, target_relation) }}\n\n  {% do create_indexes(target_relation) %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {% set should_revoke = should_revoke(existing_relation, full_refresh_mode=True) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  -- `COMMIT` happens here\n  {{ adapter.commit() }}\n\n  -- finally, drop the existing/backup relation after the commit\n  {{ drop_relation_if_exists(backup_relation) }}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n{% endmaterialization %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": [
          "macro.dbt.load_cached_relation",
          "macro.dbt.make_intermediate_relation",
          "macro.dbt.make_backup_relation",
          "macro.dbt.drop_relation_if_exists",
          "macro.dbt.run_hooks",
          "macro.dbt.statement",
          "macro.dbt.get_create_table_as_sql",
          "macro.dbt.create_indexes",
          "macro.dbt.should_revoke",
          "macro.dbt.apply_grants",
          "macro.dbt.persist_docs"
        ]
      },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1665426349.690153,
      "supported_languages": ["sql"]
    },
    "macro.dbt.get_create_table_as_sql": {
      "unique_id": "macro.dbt.get_create_table_as_sql",
      "package_name": "dbt",
      "root_path": "/Users/sung/Desktop/dbt/core/dbt/include/global_project",
      "path": "macros/materializations/models/table/create_table_as.sql",
      "original_file_path": "macros/materializations/models/table/create_table_as.sql",
      "name": "get_create_table_as_sql",
      "macro_sql": "{% macro get_create_table_as_sql(temporary, relation, sql) -%}\n  {{ adapter.dispatch('get_create_table_as_sql', 'dbt')(temporary, relation, sql) }}\n{%- endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": ["macro.dbt.default__get_create_table_as_sql"]
      },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1665426349.691885,
      "supported_languages": null
    },
    "macro.dbt.default__get_create_table_as_sql": {
      "unique_id": "macro.dbt.default__get_create_table_as_sql",
      "package_name": "dbt",
      "root_path": "/Users/sung/Desktop/dbt/core/dbt/include/global_project",
      "path": "macros/materializations/models/table/create_table_as.sql",
      "original_file_path": "macros/materializations/models/table/create_table_as.sql",
      "name": "default__get_create_table_as_sql",
      "macro_sql": "{% macro default__get_create_table_as_sql(temporary, relation, sql) -%}\n  {{ return(create_table_as(temporary, relation, sql)) }}\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": { "macros": ["macro.dbt.create_table_as"] },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1665426349.692439,
      "supported_languages": null
    },
    "macro.dbt.create_table_as": {
      "unique_id": "macro.dbt.create_table_as",
      "package_name": "dbt",
      "root_path": "/Users/sung/Desktop/dbt/core/dbt/include/global_project",
      "path": "macros/materializations/models/table/create_table_as.sql",
      "original_file_path": "macros/materializations/models/table/create_table_as.sql",
      "name": "create_table_as",
      "macro_sql": "{% macro create_table_as(temporary, relation, compiled_code, language='sql') -%}\n  {# backward compatibility for create_table_as that does not support language #}\n  {% if language == \"sql\" %}\n    {{ adapter.dispatch('create_table_as', 'dbt')(temporary, relation, compiled_code)}}\n  {% else %}\n    {{ adapter.dispatch('create_table_as', 'dbt')(temporary, relation, compiled_code, language) }}\n  {% endif %}\n\n{%- endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": ["macro.dbt_snowflake.snowflake__create_table_as"]
      },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1665426349.694057,
      "supported_languages": null
    },
    "macro.dbt.default__create_table_as": {
      "unique_id": "macro.dbt.default__create_table_as",
      "package_name": "dbt",
      "root_path": "/Users/sung/Desktop/dbt/core/dbt/include/global_project",
      "path": "macros/materializations/models/table/create_table_as.sql",
      "original_file_path": "macros/materializations/models/table/create_table_as.sql",
      "name": "default__create_table_as",
      "macro_sql": "{% macro default__create_table_as(temporary, relation, sql) -%}\n  {%- set sql_header = config.get('sql_header', none) -%}\n\n  {{ sql_header if sql_header is not none }}\n\n  create {% if temporary: -%}temporary{%- endif %} table\n    {{ relation.include(database=(not temporary), schema=(not temporary)) }}\n  as (\n    {{ sql }}\n  );\n{%- endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": { "macros": [] },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1665426349.695499,
      "supported_languages": null
    },
    "macro.dbt.materialization_view_default": {
      "unique_id": "macro.dbt.materialization_view_default",
      "package_name": "dbt",
      "root_path": "/Users/sung/Desktop/dbt/core/dbt/include/global_project",
      "path": "macros/materializations/models/view/view.sql",
      "original_file_path": "macros/materializations/models/view/view.sql",
      "name": "materialization_view_default",
      "macro_sql": "{%- materialization view, default -%}\n\n  {%- set existing_relation = load_cached_relation(this) -%}\n  {%- set target_relation = this.incorporate(type='view') -%}\n  {%- set intermediate_relation =  make_intermediate_relation(target_relation) -%}\n\n  -- the intermediate_relation should not already exist in the database; get_relation\n  -- will return None in that case. Otherwise, we get a relation that we can drop\n  -- later, before we try to use this name for the current operation\n  {%- set preexisting_intermediate_relation = load_cached_relation(intermediate_relation) -%}\n  /*\n     This relation (probably) doesn't exist yet. If it does exist, it's a leftover from\n     a previous run, and we're going to try to drop it immediately. At the end of this\n     materialization, we're going to rename the \"existing_relation\" to this identifier,\n     and then we're going to drop it. In order to make sure we run the correct one of:\n       - drop view ...\n       - drop table ...\n\n     We need to set the type of this relation to be the type of the existing_relation, if it exists,\n     or else \"view\" as a sane default if it does not. Note that if the existing_relation does not\n     exist, then there is nothing to move out of the way and subsequentally drop. In that case,\n     this relation will be effectively unused.\n  */\n  {%- set backup_relation_type = 'view' if existing_relation is none else existing_relation.type -%}\n  {%- set backup_relation = make_backup_relation(target_relation, backup_relation_type) -%}\n  -- as above, the backup_relation should not already exist\n  {%- set preexisting_backup_relation = load_cached_relation(backup_relation) -%}\n  -- grab current tables grants config for comparision later on\n  {% set grant_config = config.get('grants') %}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- drop the temp relations if they exist already in the database\n  {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n  {{ drop_relation_if_exists(preexisting_backup_relation) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  -- build model\n  {% call statement('main') -%}\n    {{ get_create_view_as_sql(intermediate_relation, sql) }}\n  {%- endcall %}\n\n  -- cleanup\n  -- move the existing view out of the way\n  {% if existing_relation is not none %}\n    {{ adapter.rename_relation(existing_relation, backup_relation) }}\n  {% endif %}\n  {{ adapter.rename_relation(intermediate_relation, target_relation) }}\n\n  {% set should_revoke = should_revoke(existing_relation, full_refresh_mode=True) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {{ adapter.commit() }}\n\n  {{ drop_relation_if_exists(backup_relation) }}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{%- endmaterialization -%}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": [
          "macro.dbt.load_cached_relation",
          "macro.dbt.make_intermediate_relation",
          "macro.dbt.make_backup_relation",
          "macro.dbt.run_hooks",
          "macro.dbt.drop_relation_if_exists",
          "macro.dbt.statement",
          "macro.dbt.get_create_view_as_sql",
          "macro.dbt.should_revoke",
          "macro.dbt.apply_grants",
          "macro.dbt.persist_docs"
        ]
      },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1665426349.702379,
      "supported_languages": ["sql"]
    },
    "macro.dbt.handle_existing_table": {
      "unique_id": "macro.dbt.handle_existing_table",
      "package_name": "dbt",
      "root_path": "/Users/sung/Desktop/dbt/core/dbt/include/global_project",
      "path": "macros/materializations/models/view/helpers.sql",
      "original_file_path": "macros/materializations/models/view/helpers.sql",
      "name": "handle_existing_table",
      "macro_sql": "{% macro handle_existing_table(full_refresh, old_relation) %}\n    {{ adapter.dispatch('handle_existing_table', 'dbt')(full_refresh, old_relation) }}\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": { "macros": ["macro.dbt.default__handle_existing_table"] },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1665426349.7039528,
      "supported_languages": null
    },
    "macro.dbt.default__handle_existing_table": {
      "unique_id": "macro.dbt.default__handle_existing_table",
      "package_name": "dbt",
      "root_path": "/Users/sung/Desktop/dbt/core/dbt/include/global_project",
      "path": "macros/materializations/models/view/helpers.sql",
      "original_file_path": "macros/materializations/models/view/helpers.sql",
      "name": "default__handle_existing_table",
      "macro_sql": "{% macro default__handle_existing_table(full_refresh, old_relation) %}\n    {{ log(\"Dropping relation \" ~ old_relation ~ \" because it is of type \" ~ old_relation.type) }}\n    {{ adapter.drop_relation(old_relation) }}\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": { "macros": [] },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1665426349.7049248,
      "supported_languages": null
    },
    "macro.dbt.create_or_replace_view": {
      "unique_id": "macro.dbt.create_or_replace_view",
      "package_name": "dbt",
      "root_path": "/Users/sung/Desktop/dbt/core/dbt/include/global_project",
      "path": "macros/materializations/models/view/create_or_replace_view.sql",
      "original_file_path": "macros/materializations/models/view/create_or_replace_view.sql",
      "name": "create_or_replace_view",
      "macro_sql": "{% macro create_or_replace_view() %}\n  {%- set identifier = model['alias'] -%}\n\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n  {%- set exists_as_view = (old_relation is not none and old_relation.is_view) -%}\n\n  {%- set target_relation = api.Relation.create(\n      identifier=identifier, schema=schema, database=database,\n      type='view') -%}\n  {% set grant_config = config.get('grants') %}\n\n  {{ run_hooks(pre_hooks) }}\n\n  -- If there's a table with the same name and we weren't told to full refresh,\n  -- that's an error. If we were told to full refresh, drop it. This behavior differs\n  -- for Snowflake and BigQuery, so multiple dispatch is used.\n  {%- if old_relation is not none and old_relation.is_table -%}\n    {{ handle_existing_table(should_full_refresh(), old_relation) }}\n  {%- endif -%}\n\n  -- build model\n  {% call statement('main') -%}\n    {{ get_create_view_as_sql(target_relation, sql) }}\n  {%- endcall %}\n\n  {% set should_revoke = should_revoke(exists_as_view, full_refresh_mode=True) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=True) %}\n\n  {{ run_hooks(post_hooks) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": [
          "macro.dbt.run_hooks",
          "macro.dbt.handle_existing_table",
          "macro.dbt.should_full_refresh",
          "macro.dbt.statement",
          "macro.dbt.get_create_view_as_sql",
          "macro.dbt.should_revoke",
          "macro.dbt.apply_grants"
        ]
      },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1665426349.7093198,
      "supported_languages": null
    },
    "macro.dbt.get_create_view_as_sql": {
      "unique_id": "macro.dbt.get_create_view_as_sql",
      "package_name": "dbt",
      "root_path": "/Users/sung/Desktop/dbt/core/dbt/include/global_project",
      "path": "macros/materializations/models/view/create_view_as.sql",
      "original_file_path": "macros/materializations/models/view/create_view_as.sql",
      "name": "get_create_view_as_sql",
      "macro_sql": "{% macro get_create_view_as_sql(relation, sql) -%}\n  {{ adapter.dispatch('get_create_view_as_sql', 'dbt')(relation, sql) }}\n{%- endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": { "macros": ["macro.dbt.default__get_create_view_as_sql"] },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1665426349.7108212,
      "supported_languages": null
    },
    "macro.dbt.default__get_create_view_as_sql": {
      "unique_id": "macro.dbt.default__get_create_view_as_sql",
      "package_name": "dbt",
      "root_path": "/Users/sung/Desktop/dbt/core/dbt/include/global_project",
      "path": "macros/materializations/models/view/create_view_as.sql",
      "original_file_path": "macros/materializations/models/view/create_view_as.sql",
      "name": "default__get_create_view_as_sql",
      "macro_sql": "{% macro default__get_create_view_as_sql(relation, sql) -%}\n  {{ return(create_view_as(relation, sql)) }}\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": { "macros": ["macro.dbt.create_view_as"] },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1665426349.7112849,
      "supported_languages": null
    },
    "macro.dbt.create_view_as": {
      "unique_id": "macro.dbt.create_view_as",
      "package_name": "dbt",
      "root_path": "/Users/sung/Desktop/dbt/core/dbt/include/global_project",
      "path": "macros/materializations/models/view/create_view_as.sql",
      "original_file_path": "macros/materializations/models/view/create_view_as.sql",
      "name": "create_view_as",
      "macro_sql": "{% macro create_view_as(relation, sql) -%}\n  {{ adapter.dispatch('create_view_as', 'dbt')(relation, sql) }}\n{%- endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": ["macro.dbt_snowflake.snowflake__create_view_as"]
      },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1665426349.7117171,
      "supported_languages": null
    },
    "macro.dbt.default__create_view_as": {
      "unique_id": "macro.dbt.default__create_view_as",
      "package_name": "dbt",
      "root_path": "/Users/sung/Desktop/dbt/core/dbt/include/global_project",
      "path": "macros/materializations/models/view/create_view_as.sql",
      "original_file_path": "macros/materializations/models/view/create_view_as.sql",
      "name": "default__create_view_as",
      "macro_sql": "{% macro default__create_view_as(relation, sql) -%}\n  {%- set sql_header = config.get('sql_header', none) -%}\n\n  {{ sql_header if sql_header is not none }}\n  create view {{ relation }} as (\n    {{ sql }}\n  );\n{%- endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": { "macros": [] },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1665426349.712331,
      "supported_languages": null
    },
    "macro.dbt.materialization_seed_default": {
      "unique_id": "macro.dbt.materialization_seed_default",
      "package_name": "dbt",
      "root_path": "/Users/sung/Desktop/dbt/core/dbt/include/global_project",
      "path": "macros/materializations/seeds/seed.sql",
      "original_file_path": "macros/materializations/seeds/seed.sql",
      "name": "materialization_seed_default",
      "macro_sql": "{% materialization seed, default %}\n\n  {%- set identifier = model['alias'] -%}\n  {%- set full_refresh_mode = (should_full_refresh()) -%}\n\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n\n  {%- set exists_as_table = (old_relation is not none and old_relation.is_table) -%}\n  {%- set exists_as_view = (old_relation is not none and old_relation.is_view) -%}\n\n  {%- set grant_config = config.get('grants') -%}\n  {%- set agate_table = load_agate_table() -%}\n  -- grab current tables grants config for comparision later on\n\n  {%- do store_result('agate_table', response='OK', agate_table=agate_table) -%}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  -- build model\n  {% set create_table_sql = \"\" %}\n  {% if exists_as_view %}\n    {{ exceptions.raise_compiler_error(\"Cannot seed to '{}', it is a view\".format(old_relation)) }}\n  {% elif exists_as_table %}\n    {% set create_table_sql = reset_csv_table(model, full_refresh_mode, old_relation, agate_table) %}\n  {% else %}\n    {% set create_table_sql = create_csv_table(model, agate_table) %}\n  {% endif %}\n\n  {% set code = 'CREATE' if full_refresh_mode else 'INSERT' %}\n  {% set rows_affected = (agate_table.rows | length) %}\n  {% set sql = load_csv_rows(model, agate_table) %}\n\n  {% call noop_statement('main', code ~ ' ' ~ rows_affected, code, rows_affected) %}\n    {{ get_csv_sql(create_table_sql, sql) }};\n  {% endcall %}\n\n  {% set target_relation = this.incorporate(type='table') %}\n\n  {% set should_revoke = should_revoke(old_relation, full_refresh_mode) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {% if full_refresh_mode or not exists_as_table %}\n    {% do create_indexes(target_relation) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  -- `COMMIT` happens here\n  {{ adapter.commit() }}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmaterialization %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": [
          "macro.dbt.should_full_refresh",
          "macro.dbt.run_hooks",
          "macro.dbt.reset_csv_table",
          "macro.dbt.create_csv_table",
          "macro.dbt.load_csv_rows",
          "macro.dbt.noop_statement",
          "macro.dbt.get_csv_sql",
          "macro.dbt.should_revoke",
          "macro.dbt.apply_grants",
          "macro.dbt.persist_docs",
          "macro.dbt.create_indexes"
        ]
      },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1665426349.720129,
      "supported_languages": ["sql"]
    },
    "macro.dbt.create_csv_table": {
      "unique_id": "macro.dbt.create_csv_table",
      "package_name": "dbt",
      "root_path": "/Users/sung/Desktop/dbt/core/dbt/include/global_project",
      "path": "macros/materializations/seeds/helpers.sql",
      "original_file_path": "macros/materializations/seeds/helpers.sql",
      "name": "create_csv_table",
      "macro_sql": "{% macro create_csv_table(model, agate_table) -%}\n  {{ adapter.dispatch('create_csv_table', 'dbt')(model, agate_table) }}\n{%- endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": { "macros": ["macro.dbt.default__create_csv_table"] },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1665426349.7296221,
      "supported_languages": null
    },
    "macro.dbt.default__create_csv_table": {
      "unique_id": "macro.dbt.default__create_csv_table",
      "package_name": "dbt",
      "root_path": "/Users/sung/Desktop/dbt/core/dbt/include/global_project",
      "path": "macros/materializations/seeds/helpers.sql",
      "original_file_path": "macros/materializations/seeds/helpers.sql",
      "name": "default__create_csv_table",
      "macro_sql": "{% macro default__create_csv_table(model, agate_table) %}\n  {%- set column_override = model['config'].get('column_types', {}) -%}\n  {%- set quote_seed_column = model['config'].get('quote_columns', None) -%}\n\n  {% set sql %}\n    create table {{ this.render() }} (\n        {%- for col_name in agate_table.column_names -%}\n            {%- set inferred_type = adapter.convert_type(agate_table, loop.index0) -%}\n            {%- set type = column_override.get(col_name, inferred_type) -%}\n            {%- set column_name = (col_name | string) -%}\n            {{ adapter.quote_seed_column(column_name, quote_seed_column) }} {{ type }} {%- if not loop.last -%}, {%- endif -%}\n        {%- endfor -%}\n    )\n  {% endset %}\n\n  {% call statement('_') -%}\n    {{ sql }}\n  {%- endcall %}\n\n  {{ return(sql) }}\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": { "macros": ["macro.dbt.statement"] },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1665426349.732264,
      "supported_languages": null
    },
    "macro.dbt.reset_csv_table": {
      "unique_id": "macro.dbt.reset_csv_table",
      "package_name": "dbt",
      "root_path": "/Users/sung/Desktop/dbt/core/dbt/include/global_project",
      "path": "macros/materializations/seeds/helpers.sql",
      "original_file_path": "macros/materializations/seeds/helpers.sql",
      "name": "reset_csv_table",
      "macro_sql": "{% macro reset_csv_table(model, full_refresh, old_relation, agate_table) -%}\n  {{ adapter.dispatch('reset_csv_table', 'dbt')(model, full_refresh, old_relation, agate_table) }}\n{%- endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": { "macros": ["macro.dbt.default__reset_csv_table"] },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1665426349.732983,
      "supported_languages": null
    },
    "macro.dbt.default__reset_csv_table": {
      "unique_id": "macro.dbt.default__reset_csv_table",
      "package_name": "dbt",
      "root_path": "/Users/sung/Desktop/dbt/core/dbt/include/global_project",
      "path": "macros/materializations/seeds/helpers.sql",
      "original_file_path": "macros/materializations/seeds/helpers.sql",
      "name": "default__reset_csv_table",
      "macro_sql": "{% macro default__reset_csv_table(model, full_refresh, old_relation, agate_table) %}\n    {% set sql = \"\" %}\n    {% if full_refresh %}\n        {{ adapter.drop_relation(old_relation) }}\n        {% set sql = create_csv_table(model, agate_table) %}\n    {% else %}\n        {{ adapter.truncate_relation(old_relation) }}\n        {% set sql = \"truncate table \" ~ old_relation %}\n    {% endif %}\n\n    {{ return(sql) }}\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": { "macros": ["macro.dbt.create_csv_table"] },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1665426349.7341728,
      "supported_languages": null
    },
    "macro.dbt.get_csv_sql": {
      "unique_id": "macro.dbt.get_csv_sql",
      "package_name": "dbt",
      "root_path": "/Users/sung/Desktop/dbt/core/dbt/include/global_project",
      "path": "macros/materializations/seeds/helpers.sql",
      "original_file_path": "macros/materializations/seeds/helpers.sql",
      "name": "get_csv_sql",
      "macro_sql": "{% macro get_csv_sql(create_or_truncate_sql, insert_sql) %}\n    {{ adapter.dispatch('get_csv_sql', 'dbt')(create_or_truncate_sql, insert_sql) }}\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": { "macros": ["macro.dbt.default__get_csv_sql"] },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1665426349.7346501,
      "supported_languages": null
    },
    "macro.dbt.default__get_csv_sql": {
      "unique_id": "macro.dbt.default__get_csv_sql",
      "package_name": "dbt",
      "root_path": "/Users/sung/Desktop/dbt/core/dbt/include/global_project",
      "path": "macros/materializations/seeds/helpers.sql",
      "original_file_path": "macros/materializations/seeds/helpers.sql",
      "name": "default__get_csv_sql",
      "macro_sql": "{% macro default__get_csv_sql(create_or_truncate_sql, insert_sql) %}\n    {{ create_or_truncate_sql }};\n    -- dbt seed --\n    {{ insert_sql }}\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": { "macros": [] },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1665426349.734977,
      "supported_languages": null
    },
    "macro.dbt.get_binding_char": {
      "unique_id": "macro.dbt.get_binding_char",
      "package_name": "dbt",
      "root_path": "/Users/sung/Desktop/dbt/core/dbt/include/global_project",
      "path": "macros/materializations/seeds/helpers.sql",
      "original_file_path": "macros/materializations/seeds/helpers.sql",
      "name": "get_binding_char",
      "macro_sql": "{% macro get_binding_char() -%}\n  {{ adapter.dispatch('get_binding_char', 'dbt')() }}\n{%- endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": { "macros": ["macro.dbt.default__get_binding_char"] },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1665426349.7353961,
      "supported_languages": null
    },
    "macro.dbt.default__get_binding_char": {
      "unique_id": "macro.dbt.default__get_binding_char",
      "package_name": "dbt",
      "root_path": "/Users/sung/Desktop/dbt/core/dbt/include/global_project",
      "path": "macros/materializations/seeds/helpers.sql",
      "original_file_path": "macros/materializations/seeds/helpers.sql",
      "name": "default__get_binding_char",
      "macro_sql": "{% macro default__get_binding_char() %}\n  {{ return('%s') }}\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": { "macros": [] },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1665426349.7357981,
      "supported_languages": null
    },
    "macro.dbt.get_batch_size": {
      "unique_id": "macro.dbt.get_batch_size",
      "package_name": "dbt",
      "root_path": "/Users/sung/Desktop/dbt/core/dbt/include/global_project",
      "path": "macros/materializations/seeds/helpers.sql",
      "original_file_path": "macros/materializations/seeds/helpers.sql",
      "name": "get_batch_size",
      "macro_sql": "{% macro get_batch_size() -%}\n  {{ return(adapter.dispatch('get_batch_size', 'dbt')()) }}\n{%- endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": { "macros": ["macro.dbt.default__get_batch_size"] },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1665426349.736361,
      "supported_languages": null
    },
    "macro.dbt.default__get_batch_size": {
      "unique_id": "macro.dbt.default__get_batch_size",
      "package_name": "dbt",
      "root_path": "/Users/sung/Desktop/dbt/core/dbt/include/global_project",
      "path": "macros/materializations/seeds/helpers.sql",
      "original_file_path": "macros/materializations/seeds/helpers.sql",
      "name": "default__get_batch_size",
      "macro_sql": "{% macro default__get_batch_size() %}\n  {{ return(10000) }}\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": { "macros": [] },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1665426349.736856,
      "supported_languages": null
    },
    "macro.dbt.get_seed_column_quoted_csv": {
      "unique_id": "macro.dbt.get_seed_column_quoted_csv",
      "package_name": "dbt",
      "root_path": "/Users/sung/Desktop/dbt/core/dbt/include/global_project",
      "path": "macros/materializations/seeds/helpers.sql",
      "original_file_path": "macros/materializations/seeds/helpers.sql",
      "name": "get_seed_column_quoted_csv",
      "macro_sql": "{% macro get_seed_column_quoted_csv(model, column_names) %}\n  {%- set quote_seed_column = model['config'].get('quote_columns', None) -%}\n    {% set quoted = [] %}\n    {% for col in column_names -%}\n        {%- do quoted.append(adapter.quote_seed_column(col, quote_seed_column)) -%}\n    {%- endfor %}\n\n    {%- set dest_cols_csv = quoted | join(', ') -%}\n    {{ return(dest_cols_csv) }}\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": { "macros": [] },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1665426349.738366,
      "supported_languages": null
    },
    "macro.dbt.load_csv_rows": {
      "unique_id": "macro.dbt.load_csv_rows",
      "package_name": "dbt",
      "root_path": "/Users/sung/Desktop/dbt/core/dbt/include/global_project",
      "path": "macros/materializations/seeds/helpers.sql",
      "original_file_path": "macros/materializations/seeds/helpers.sql",
      "name": "load_csv_rows",
      "macro_sql": "{% macro load_csv_rows(model, agate_table) -%}\n  {{ adapter.dispatch('load_csv_rows', 'dbt')(model, agate_table) }}\n{%- endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": ["macro.dbt_snowflake.snowflake__load_csv_rows"]
      },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1665426349.73897,
      "supported_languages": null
    },
    "macro.dbt.default__load_csv_rows": {
      "unique_id": "macro.dbt.default__load_csv_rows",
      "package_name": "dbt",
      "root_path": "/Users/sung/Desktop/dbt/core/dbt/include/global_project",
      "path": "macros/materializations/seeds/helpers.sql",
      "original_file_path": "macros/materializations/seeds/helpers.sql",
      "name": "default__load_csv_rows",
      "macro_sql": "{% macro default__load_csv_rows(model, agate_table) %}\n\n  {% set batch_size = get_batch_size() %}\n\n  {% set cols_sql = get_seed_column_quoted_csv(model, agate_table.column_names) %}\n  {% set bindings = [] %}\n\n  {% set statements = [] %}\n\n  {% for chunk in agate_table.rows | batch(batch_size) %}\n      {% set bindings = [] %}\n\n      {% for row in chunk %}\n          {% do bindings.extend(row) %}\n      {% endfor %}\n\n      {% set sql %}\n          insert into {{ this.render() }} ({{ cols_sql }}) values\n          {% for row in chunk -%}\n              ({%- for column in agate_table.column_names -%}\n                  {{ get_binding_char() }}\n                  {%- if not loop.last%},{%- endif %}\n              {%- endfor -%})\n              {%- if not loop.last%},{%- endif %}\n          {%- endfor %}\n      {% endset %}\n\n      {% do adapter.add_query(sql, bindings=bindings, abridge_sql_log=True) %}\n\n      {% if loop.index0 == 0 %}\n          {% do statements.append(sql) %}\n      {% endif %}\n  {% endfor %}\n\n  {# Return SQL so we can render it out into the compiled files #}\n  {{ return(statements[0]) }}\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": [
          "macro.dbt.get_batch_size",
          "macro.dbt.get_seed_column_quoted_csv",
          "macro.dbt.get_binding_char"
        ]
      },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1665426349.742433,
      "supported_languages": null
    },
    "macro.dbt.generate_alias_name": {
      "unique_id": "macro.dbt.generate_alias_name",
      "package_name": "dbt",
      "root_path": "/Users/sung/Desktop/dbt/core/dbt/include/global_project",
      "path": "macros/get_custom_name/get_custom_alias.sql",
      "original_file_path": "macros/get_custom_name/get_custom_alias.sql",
      "name": "generate_alias_name",
      "macro_sql": "{% macro generate_alias_name(custom_alias_name=none, node=none) -%}\n    {% do return(adapter.dispatch('generate_alias_name', 'dbt')(custom_alias_name, node)) %}\n{%- endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": { "macros": ["macro.dbt.default__generate_alias_name"] },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1665426349.744169,
      "supported_languages": null
    },
    "macro.dbt.default__generate_alias_name": {
      "unique_id": "macro.dbt.default__generate_alias_name",
      "package_name": "dbt",
      "root_path": "/Users/sung/Desktop/dbt/core/dbt/include/global_project",
      "path": "macros/get_custom_name/get_custom_alias.sql",
      "original_file_path": "macros/get_custom_name/get_custom_alias.sql",
      "name": "default__generate_alias_name",
      "macro_sql": "{% macro default__generate_alias_name(custom_alias_name=none, node=none) -%}\n\n    {%- if custom_alias_name is none -%}\n\n        {{ node.name }}\n\n    {%- else -%}\n\n        {{ custom_alias_name | trim }}\n\n    {%- endif -%}\n\n{%- endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": { "macros": [] },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1665426349.745216,
      "supported_languages": null
    },
    "macro.dbt.generate_schema_name": {
      "unique_id": "macro.dbt.generate_schema_name",
      "package_name": "dbt",
      "root_path": "/Users/sung/Desktop/dbt/core/dbt/include/global_project",
      "path": "macros/get_custom_name/get_custom_schema.sql",
      "original_file_path": "macros/get_custom_name/get_custom_schema.sql",
      "name": "generate_schema_name",
      "macro_sql": "{% macro generate_schema_name(custom_schema_name=none, node=none) -%}\n    {{ return(adapter.dispatch('generate_schema_name', 'dbt')(custom_schema_name, node)) }}\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": { "macros": ["macro.dbt.default__generate_schema_name"] },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1665426349.746808,
      "supported_languages": null
    },
    "macro.dbt.default__generate_schema_name": {
      "unique_id": "macro.dbt.default__generate_schema_name",
      "package_name": "dbt",
      "root_path": "/Users/sung/Desktop/dbt/core/dbt/include/global_project",
      "path": "macros/get_custom_name/get_custom_schema.sql",
      "original_file_path": "macros/get_custom_name/get_custom_schema.sql",
      "name": "default__generate_schema_name",
      "macro_sql": "{% macro default__generate_schema_name(custom_schema_name, node) -%}\n\n    {%- set default_schema = target.schema -%}\n    {%- if custom_schema_name is none -%}\n\n        {{ default_schema }}\n\n    {%- else -%}\n\n        {{ default_schema }}_{{ custom_schema_name | trim }}\n\n    {%- endif -%}\n\n{%- endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": { "macros": [] },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1665426349.74756,
      "supported_languages": null
    },
    "macro.dbt.generate_schema_name_for_env": {
      "unique_id": "macro.dbt.generate_schema_name_for_env",
      "package_name": "dbt",
      "root_path": "/Users/sung/Desktop/dbt/core/dbt/include/global_project",
      "path": "macros/get_custom_name/get_custom_schema.sql",
      "original_file_path": "macros/get_custom_name/get_custom_schema.sql",
      "name": "generate_schema_name_for_env",
      "macro_sql": "{% macro generate_schema_name_for_env(custom_schema_name, node) -%}\n\n    {%- set default_schema = target.schema -%}\n    {%- if target.name == 'prod' and custom_schema_name is not none -%}\n\n        {{ custom_schema_name | trim }}\n\n    {%- else -%}\n\n        {{ default_schema }}\n\n    {%- endif -%}\n\n{%- endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": { "macros": [] },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1665426349.7483468,
      "supported_languages": null
    },
    "macro.dbt.generate_database_name": {
      "unique_id": "macro.dbt.generate_database_name",
      "package_name": "dbt",
      "root_path": "/Users/sung/Desktop/dbt/core/dbt/include/global_project",
      "path": "macros/get_custom_name/get_custom_database.sql",
      "original_file_path": "macros/get_custom_name/get_custom_database.sql",
      "name": "generate_database_name",
      "macro_sql": "{% macro generate_database_name(custom_database_name=none, node=none) -%}\n    {% do return(adapter.dispatch('generate_database_name', 'dbt')(custom_database_name, node)) %}\n{%- endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": { "macros": ["macro.dbt.default__generate_database_name"] },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1665426349.749708,
      "supported_languages": null
    },
    "macro.dbt.default__generate_database_name": {
      "unique_id": "macro.dbt.default__generate_database_name",
      "package_name": "dbt",
      "root_path": "/Users/sung/Desktop/dbt/core/dbt/include/global_project",
      "path": "macros/get_custom_name/get_custom_database.sql",
      "original_file_path": "macros/get_custom_name/get_custom_database.sql",
      "name": "default__generate_database_name",
      "macro_sql": "{% macro default__generate_database_name(custom_database_name=none, node=none) -%}\n    {%- set default_database = target.database -%}\n    {%- if custom_database_name is none -%}\n\n        {{ default_database }}\n\n    {%- else -%}\n\n        {{ custom_database_name }}\n\n    {%- endif -%}\n\n{%- endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": { "macros": [] },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1665426349.750413,
      "supported_languages": null
    },
    "macro.dbt.default__test_relationships": {
      "unique_id": "macro.dbt.default__test_relationships",
      "package_name": "dbt",
      "root_path": "/Users/sung/Desktop/dbt/core/dbt/include/global_project",
      "path": "macros/generic_test_sql/relationships.sql",
      "original_file_path": "macros/generic_test_sql/relationships.sql",
      "name": "default__test_relationships",
      "macro_sql": "{% macro default__test_relationships(model, column_name, to, field) %}\n\nwith child as (\n    select {{ column_name }} as from_field\n    from {{ model }}\n    where {{ column_name }} is not null\n),\n\nparent as (\n    select {{ field }} as to_field\n    from {{ to }}\n)\n\nselect\n    from_field\n\nfrom child\nleft join parent\n    on child.from_field = parent.to_field\n\nwhere parent.to_field is null\n\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": { "macros": [] },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1665426349.751482,
      "supported_languages": null
    },
    "macro.dbt.default__test_not_null": {
      "unique_id": "macro.dbt.default__test_not_null",
      "package_name": "dbt",
      "root_path": "/Users/sung/Desktop/dbt/core/dbt/include/global_project",
      "path": "macros/generic_test_sql/not_null.sql",
      "original_file_path": "macros/generic_test_sql/not_null.sql",
      "name": "default__test_not_null",
      "macro_sql": "{% macro default__test_not_null(model, column_name) %}\n\n{% set column_list = '*' if should_store_failures() else column_name %}\n\nselect {{ column_list }}\nfrom {{ model }}\nwhere {{ column_name }} is null\n\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": { "macros": ["macro.dbt.should_store_failures"] },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1665426349.752417,
      "supported_languages": null
    },
    "macro.dbt.default__test_unique": {
      "unique_id": "macro.dbt.default__test_unique",
      "package_name": "dbt",
      "root_path": "/Users/sung/Desktop/dbt/core/dbt/include/global_project",
      "path": "macros/generic_test_sql/unique.sql",
      "original_file_path": "macros/generic_test_sql/unique.sql",
      "name": "default__test_unique",
      "macro_sql": "{% macro default__test_unique(model, column_name) %}\n\nselect\n    {{ column_name }} as unique_field,\n    count(*) as n_records\n\nfrom {{ model }}\nwhere {{ column_name }} is not null\ngroup by {{ column_name }}\nhaving count(*) > 1\n\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": { "macros": [] },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1665426349.7534049,
      "supported_languages": null
    },
    "macro.dbt.default__test_accepted_values": {
      "unique_id": "macro.dbt.default__test_accepted_values",
      "package_name": "dbt",
      "root_path": "/Users/sung/Desktop/dbt/core/dbt/include/global_project",
      "path": "macros/generic_test_sql/accepted_values.sql",
      "original_file_path": "macros/generic_test_sql/accepted_values.sql",
      "name": "default__test_accepted_values",
      "macro_sql": "{% macro default__test_accepted_values(model, column_name, values, quote=True) %}\n\nwith all_values as (\n\n    select\n        {{ column_name }} as value_field,\n        count(*) as n_records\n\n    from {{ model }}\n    group by {{ column_name }}\n\n)\n\nselect *\nfrom all_values\nwhere value_field not in (\n    {% for value in values -%}\n        {% if quote -%}\n        '{{ value }}'\n        {%- else -%}\n        {{ value }}\n        {%- endif -%}\n        {%- if not loop.last -%},{%- endif %}\n    {%- endfor %}\n)\n\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": { "macros": [] },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1665426349.7554612,
      "supported_languages": null
    },
    "macro.dbt.statement": {
      "unique_id": "macro.dbt.statement",
      "package_name": "dbt",
      "root_path": "/Users/sung/Desktop/dbt/core/dbt/include/global_project",
      "path": "macros/etc/statement.sql",
      "original_file_path": "macros/etc/statement.sql",
      "name": "statement",
      "macro_sql": "\n{%- macro statement(name=None, fetch_result=False, auto_begin=True, language='sql') -%}\n  {%- if execute: -%}\n    {%- set compiled_code = caller() -%}\n\n    {%- if name == 'main' -%}\n      {{ log('Writing runtime {} for node \"{}\"'.format(language, model['unique_id'])) }}\n      {{ write(compiled_code) }}\n    {%- endif -%}\n    {%- if language == 'sql'-%}\n      {%- set res, table = adapter.execute(compiled_code, auto_begin=auto_begin, fetch=fetch_result) -%}\n    {%- elif language == 'python' -%}\n      {%- set res = submit_python_job(model, compiled_code) -%}\n      {#-- TODO: What should table be for python models? --#}\n      {%- set table = None -%}\n    {%- else -%}\n      {% do exceptions.raise_compiler_error(\"statement macro didn't get supported language\") %}\n    {%- endif -%}\n\n    {%- if name is not none -%}\n      {{ store_result(name, response=res, agate_table=table) }}\n    {%- endif -%}\n\n  {%- endif -%}\n{%- endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": { "macros": [] },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1665426349.759799,
      "supported_languages": null
    },
    "macro.dbt.noop_statement": {
      "unique_id": "macro.dbt.noop_statement",
      "package_name": "dbt",
      "root_path": "/Users/sung/Desktop/dbt/core/dbt/include/global_project",
      "path": "macros/etc/statement.sql",
      "original_file_path": "macros/etc/statement.sql",
      "name": "noop_statement",
      "macro_sql": "{% macro noop_statement(name=None, message=None, code=None, rows_affected=None, res=None) -%}\n  {%- set sql = caller() -%}\n\n  {%- if name == 'main' -%}\n    {{ log('Writing runtime SQL for node \"{}\"'.format(model['unique_id'])) }}\n    {{ write(sql) }}\n  {%- endif -%}\n\n  {%- if name is not none -%}\n    {{ store_raw_result(name, message=message, code=code, rows_affected=rows_affected, agate_table=res) }}\n  {%- endif -%}\n\n{%- endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": { "macros": [] },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1665426349.762133,
      "supported_languages": null
    },
    "macro.dbt.run_query": {
      "unique_id": "macro.dbt.run_query",
      "package_name": "dbt",
      "root_path": "/Users/sung/Desktop/dbt/core/dbt/include/global_project",
      "path": "macros/etc/statement.sql",
      "original_file_path": "macros/etc/statement.sql",
      "name": "run_query",
      "macro_sql": "{% macro run_query(sql) %}\n  {% call statement(\"run_query_statement\", fetch_result=true, auto_begin=false) %}\n    {{ sql }}\n  {% endcall %}\n\n  {% do return(load_result(\"run_query_statement\").table) %}\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": { "macros": ["macro.dbt.statement"] },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1665426349.7628958,
      "supported_languages": null
    },
    "macro.dbt.convert_datetime": {
      "unique_id": "macro.dbt.convert_datetime",
      "package_name": "dbt",
      "root_path": "/Users/sung/Desktop/dbt/core/dbt/include/global_project",
      "path": "macros/etc/datetime.sql",
      "original_file_path": "macros/etc/datetime.sql",
      "name": "convert_datetime",
      "macro_sql": "{% macro convert_datetime(date_str, date_fmt) %}\n\n  {% set error_msg -%}\n      The provided partition date '{{ date_str }}' does not match the expected format '{{ date_fmt }}'\n  {%- endset %}\n\n  {% set res = try_or_compiler_error(error_msg, modules.datetime.datetime.strptime, date_str.strip(), date_fmt) %}\n  {{ return(res) }}\n\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": { "macros": [] },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1665426349.7669818,
      "supported_languages": null
    },
    "macro.dbt.dates_in_range": {
      "unique_id": "macro.dbt.dates_in_range",
      "package_name": "dbt",
      "root_path": "/Users/sung/Desktop/dbt/core/dbt/include/global_project",
      "path": "macros/etc/datetime.sql",
      "original_file_path": "macros/etc/datetime.sql",
      "name": "dates_in_range",
      "macro_sql": "{% macro dates_in_range(start_date_str, end_date_str=none, in_fmt=\"%Y%m%d\", out_fmt=\"%Y%m%d\") %}\n    {% set end_date_str = start_date_str if end_date_str is none else end_date_str %}\n\n    {% set start_date = convert_datetime(start_date_str, in_fmt) %}\n    {% set end_date = convert_datetime(end_date_str, in_fmt) %}\n\n    {% set day_count = (end_date - start_date).days %}\n    {% if day_count < 0 %}\n        {% set msg -%}\n            Partiton start date is after the end date ({{ start_date }}, {{ end_date }})\n        {%- endset %}\n\n        {{ exceptions.raise_compiler_error(msg, model) }}\n    {% endif %}\n\n    {% set date_list = [] %}\n    {% for i in range(0, day_count + 1) %}\n        {% set the_date = (modules.datetime.timedelta(days=i) + start_date) %}\n        {% if not out_fmt %}\n            {% set _ = date_list.append(the_date) %}\n        {% else %}\n            {% set _ = date_list.append(the_date.strftime(out_fmt)) %}\n        {% endif %}\n    {% endfor %}\n\n    {{ return(date_list) }}\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": { "macros": ["macro.dbt.convert_datetime"] },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1665426349.7700129,
      "supported_languages": null
    },
    "macro.dbt.partition_range": {
      "unique_id": "macro.dbt.partition_range",
      "package_name": "dbt",
      "root_path": "/Users/sung/Desktop/dbt/core/dbt/include/global_project",
      "path": "macros/etc/datetime.sql",
      "original_file_path": "macros/etc/datetime.sql",
      "name": "partition_range",
      "macro_sql": "{% macro partition_range(raw_partition_date, date_fmt='%Y%m%d') %}\n    {% set partition_range = (raw_partition_date | string).split(\",\") %}\n\n    {% if (partition_range | length) == 1 %}\n      {% set start_date = partition_range[0] %}\n      {% set end_date = none %}\n    {% elif (partition_range | length) == 2 %}\n      {% set start_date = partition_range[0] %}\n      {% set end_date = partition_range[1] %}\n    {% else %}\n      {{ exceptions.raise_compiler_error(\"Invalid partition time. Expected format: {Start Date}[,{End Date}]. Got: \" ~ raw_partition_date) }}\n    {% endif %}\n\n    {{ return(dates_in_range(start_date, end_date, in_fmt=date_fmt)) }}\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": { "macros": ["macro.dbt.dates_in_range"] },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1665426349.771774,
      "supported_languages": null
    },
    "macro.dbt.py_current_timestring": {
      "unique_id": "macro.dbt.py_current_timestring",
      "package_name": "dbt",
      "root_path": "/Users/sung/Desktop/dbt/core/dbt/include/global_project",
      "path": "macros/etc/datetime.sql",
      "original_file_path": "macros/etc/datetime.sql",
      "name": "py_current_timestring",
      "macro_sql": "{% macro py_current_timestring() %}\n    {% set dt = modules.datetime.datetime.now() %}\n    {% do return(dt.strftime(\"%Y%m%d%H%M%S%f\")) %}\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": { "macros": [] },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1665426349.77231,
      "supported_languages": null
    },
    "macro.dbt.except": {
      "unique_id": "macro.dbt.except",
      "package_name": "dbt",
      "root_path": "/Users/sung/Desktop/dbt/core/dbt/include/global_project",
      "path": "macros/utils/except.sql",
      "original_file_path": "macros/utils/except.sql",
      "name": "except",
      "macro_sql": "{% macro except() %}\n  {{ return(adapter.dispatch('except', 'dbt')()) }}\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": { "macros": ["macro.dbt.default__except"] },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1665426349.773163,
      "supported_languages": null
    },
    "macro.dbt.default__except": {
      "unique_id": "macro.dbt.default__except",
      "package_name": "dbt",
      "root_path": "/Users/sung/Desktop/dbt/core/dbt/include/global_project",
      "path": "macros/utils/except.sql",
      "original_file_path": "macros/utils/except.sql",
      "name": "default__except",
      "macro_sql": "{% macro default__except() %}\n\n    except\n\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": { "macros": [] },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1665426349.773477,
      "supported_languages": null
    },
    "macro.dbt.replace": {
      "unique_id": "macro.dbt.replace",
      "package_name": "dbt",
      "root_path": "/Users/sung/Desktop/dbt/core/dbt/include/global_project",
      "path": "macros/utils/replace.sql",
      "original_file_path": "macros/utils/replace.sql",
      "name": "replace",
      "macro_sql": "{% macro replace(field, old_chars, new_chars) -%}\n    {{ return(adapter.dispatch('replace', 'dbt') (field, old_chars, new_chars)) }}\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": { "macros": ["macro.dbt.default__replace"] },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1665426349.774871,
      "supported_languages": null
    },
    "macro.dbt.default__replace": {
      "unique_id": "macro.dbt.default__replace",
      "package_name": "dbt",
      "root_path": "/Users/sung/Desktop/dbt/core/dbt/include/global_project",
      "path": "macros/utils/replace.sql",
      "original_file_path": "macros/utils/replace.sql",
      "name": "default__replace",
      "macro_sql": "{% macro default__replace(field, old_chars, new_chars) %}\n\n    replace(\n        {{ field }},\n        {{ old_chars }},\n        {{ new_chars }}\n    )\n\n\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": { "macros": [] },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1665426349.775357,
      "supported_languages": null
    },
    "macro.dbt.concat": {
      "unique_id": "macro.dbt.concat",
      "package_name": "dbt",
      "root_path": "/Users/sung/Desktop/dbt/core/dbt/include/global_project",
      "path": "macros/utils/concat.sql",
      "original_file_path": "macros/utils/concat.sql",
      "name": "concat",
      "macro_sql": "{% macro concat(fields) -%}\n  {{ return(adapter.dispatch('concat', 'dbt')(fields)) }}\n{%- endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": { "macros": ["macro.dbt.default__concat"] },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1665426349.776286,
      "supported_languages": null
    },
    "macro.dbt.default__concat": {
      "unique_id": "macro.dbt.default__concat",
      "package_name": "dbt",
      "root_path": "/Users/sung/Desktop/dbt/core/dbt/include/global_project",
      "path": "macros/utils/concat.sql",
      "original_file_path": "macros/utils/concat.sql",
      "name": "default__concat",
      "macro_sql": "{% macro default__concat(fields) -%}\n    {{ fields|join(' || ') }}\n{%- endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": { "macros": [] },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1665426349.776639,
      "supported_languages": null
    },
    "macro.dbt.length": {
      "unique_id": "macro.dbt.length",
      "package_name": "dbt",
      "root_path": "/Users/sung/Desktop/dbt/core/dbt/include/global_project",
      "path": "macros/utils/length.sql",
      "original_file_path": "macros/utils/length.sql",
      "name": "length",
      "macro_sql": "{% macro length(expression) -%}\n    {{ return(adapter.dispatch('length', 'dbt') (expression)) }}\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": { "macros": ["macro.dbt.default__length"] },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1665426349.777601,
      "supported_languages": null
    },
    "macro.dbt.default__length": {
      "unique_id": "macro.dbt.default__length",
      "package_name": "dbt",
      "root_path": "/Users/sung/Desktop/dbt/core/dbt/include/global_project",
      "path": "macros/utils/length.sql",
      "original_file_path": "macros/utils/length.sql",
      "name": "default__length",
      "macro_sql": "{% macro default__length(expression) %}\n\n    length(\n        {{ expression }}\n    )\n\n{%- endmacro -%}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": { "macros": [] },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1665426349.777956,
      "supported_languages": null
    },
    "macro.dbt.dateadd": {
      "unique_id": "macro.dbt.dateadd",
      "package_name": "dbt",
      "root_path": "/Users/sung/Desktop/dbt/core/dbt/include/global_project",
      "path": "macros/utils/dateadd.sql",
      "original_file_path": "macros/utils/dateadd.sql",
      "name": "dateadd",
      "macro_sql": "{% macro dateadd(datepart, interval, from_date_or_timestamp) %}\n  {{ return(adapter.dispatch('dateadd', 'dbt')(datepart, interval, from_date_or_timestamp)) }}\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": { "macros": ["macro.dbt.default__dateadd"] },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1665426349.77921,
      "supported_languages": null
    },
    "macro.dbt.default__dateadd": {
      "unique_id": "macro.dbt.default__dateadd",
      "package_name": "dbt",
      "root_path": "/Users/sung/Desktop/dbt/core/dbt/include/global_project",
      "path": "macros/utils/dateadd.sql",
      "original_file_path": "macros/utils/dateadd.sql",
      "name": "default__dateadd",
      "macro_sql": "{% macro default__dateadd(datepart, interval, from_date_or_timestamp) %}\n\n    dateadd(\n        {{ datepart }},\n        {{ interval }},\n        {{ from_date_or_timestamp }}\n        )\n\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": { "macros": [] },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1665426349.7797382,
      "supported_languages": null
    },
    "macro.dbt.intersect": {
      "unique_id": "macro.dbt.intersect",
      "package_name": "dbt",
      "root_path": "/Users/sung/Desktop/dbt/core/dbt/include/global_project",
      "path": "macros/utils/intersect.sql",
      "original_file_path": "macros/utils/intersect.sql",
      "name": "intersect",
      "macro_sql": "{% macro intersect() %}\n  {{ return(adapter.dispatch('intersect', 'dbt')()) }}\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": { "macros": ["macro.dbt.default__intersect"] },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1665426349.78103,
      "supported_languages": null
    },
    "macro.dbt.default__intersect": {
      "unique_id": "macro.dbt.default__intersect",
      "package_name": "dbt",
      "root_path": "/Users/sung/Desktop/dbt/core/dbt/include/global_project",
      "path": "macros/utils/intersect.sql",
      "original_file_path": "macros/utils/intersect.sql",
      "name": "default__intersect",
      "macro_sql": "{% macro default__intersect() %}\n\n    intersect\n\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": { "macros": [] },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1665426349.7812831,
      "supported_languages": null
    },
    "macro.dbt.escape_single_quotes": {
      "unique_id": "macro.dbt.escape_single_quotes",
      "package_name": "dbt",
      "root_path": "/Users/sung/Desktop/dbt/core/dbt/include/global_project",
      "path": "macros/utils/escape_single_quotes.sql",
      "original_file_path": "macros/utils/escape_single_quotes.sql",
      "name": "escape_single_quotes",
      "macro_sql": "{% macro escape_single_quotes(expression) %}\n      {{ return(adapter.dispatch('escape_single_quotes', 'dbt') (expression)) }}\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": { "macros": ["macro.dbt.default__escape_single_quotes"] },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1665426349.782397,
      "supported_languages": null
    },
    "macro.dbt.default__escape_single_quotes": {
      "unique_id": "macro.dbt.default__escape_single_quotes",
      "package_name": "dbt",
      "root_path": "/Users/sung/Desktop/dbt/core/dbt/include/global_project",
      "path": "macros/utils/escape_single_quotes.sql",
      "original_file_path": "macros/utils/escape_single_quotes.sql",
      "name": "default__escape_single_quotes",
      "macro_sql": "{% macro default__escape_single_quotes(expression) -%}\n{{ expression | replace(\"'\",\"''\") }}\n{%- endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": { "macros": [] },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1665426349.782798,
      "supported_languages": null
    },
    "macro.dbt.right": {
      "unique_id": "macro.dbt.right",
      "package_name": "dbt",
      "root_path": "/Users/sung/Desktop/dbt/core/dbt/include/global_project",
      "path": "macros/utils/right.sql",
      "original_file_path": "macros/utils/right.sql",
      "name": "right",
      "macro_sql": "{% macro right(string_text, length_expression) -%}\n    {{ return(adapter.dispatch('right', 'dbt') (string_text, length_expression)) }}\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": { "macros": ["macro.dbt.default__right"] },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1665426349.784113,
      "supported_languages": null
    },
    "macro.dbt.default__right": {
      "unique_id": "macro.dbt.default__right",
      "package_name": "dbt",
      "root_path": "/Users/sung/Desktop/dbt/core/dbt/include/global_project",
      "path": "macros/utils/right.sql",
      "original_file_path": "macros/utils/right.sql",
      "name": "default__right",
      "macro_sql": "{% macro default__right(string_text, length_expression) %}\n\n    right(\n        {{ string_text }},\n        {{ length_expression }}\n    )\n\n{%- endmacro -%}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": { "macros": [] },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1665426349.784647,
      "supported_languages": null
    },
    "macro.dbt.listagg": {
      "unique_id": "macro.dbt.listagg",
      "package_name": "dbt",
      "root_path": "/Users/sung/Desktop/dbt/core/dbt/include/global_project",
      "path": "macros/utils/listagg.sql",
      "original_file_path": "macros/utils/listagg.sql",
      "name": "listagg",
      "macro_sql": "{% macro listagg(measure, delimiter_text=\"','\", order_by_clause=none, limit_num=none) -%}\n    {{ return(adapter.dispatch('listagg', 'dbt') (measure, delimiter_text, order_by_clause, limit_num)) }}\n{%- endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": { "macros": ["macro.dbt.default__listagg"] },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1665426349.7864351,
      "supported_languages": null
    },
    "macro.dbt.default__listagg": {
      "unique_id": "macro.dbt.default__listagg",
      "package_name": "dbt",
      "root_path": "/Users/sung/Desktop/dbt/core/dbt/include/global_project",
      "path": "macros/utils/listagg.sql",
      "original_file_path": "macros/utils/listagg.sql",
      "name": "default__listagg",
      "macro_sql": "{% macro default__listagg(measure, delimiter_text, order_by_clause, limit_num) -%}\n\n    {% if limit_num -%}\n    array_to_string(\n        array_slice(\n            array_agg(\n                {{ measure }}\n            ){% if order_by_clause -%}\n            within group ({{ order_by_clause }})\n            {%- endif %}\n            ,0\n            ,{{ limit_num }}\n        ),\n        {{ delimiter_text }}\n        )\n    {%- else %}\n    listagg(\n        {{ measure }},\n        {{ delimiter_text }}\n        )\n        {% if order_by_clause -%}\n        within group ({{ order_by_clause }})\n        {%- endif %}\n    {%- endif %}\n\n{%- endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": { "macros": [] },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1665426349.787765,
      "supported_languages": null
    },
    "macro.dbt.datediff": {
      "unique_id": "macro.dbt.datediff",
      "package_name": "dbt",
      "root_path": "/Users/sung/Desktop/dbt/core/dbt/include/global_project",
      "path": "macros/utils/datediff.sql",
      "original_file_path": "macros/utils/datediff.sql",
      "name": "datediff",
      "macro_sql": "{% macro datediff(first_date, second_date, datepart) %}\n  {{ return(adapter.dispatch('datediff', 'dbt')(first_date, second_date, datepart)) }}\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": { "macros": ["macro.dbt.default__datediff"] },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1665426349.78927,
      "supported_languages": null
    },
    "macro.dbt.default__datediff": {
      "unique_id": "macro.dbt.default__datediff",
      "package_name": "dbt",
      "root_path": "/Users/sung/Desktop/dbt/core/dbt/include/global_project",
      "path": "macros/utils/datediff.sql",
      "original_file_path": "macros/utils/datediff.sql",
      "name": "default__datediff",
      "macro_sql": "{% macro default__datediff(first_date, second_date, datepart) -%}\n\n    datediff(\n        {{ datepart }},\n        {{ first_date }},\n        {{ second_date }}\n        )\n\n{%- endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": { "macros": [] },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1665426349.7899048,
      "supported_languages": null
    },
    "macro.dbt.safe_cast": {
      "unique_id": "macro.dbt.safe_cast",
      "package_name": "dbt",
      "root_path": "/Users/sung/Desktop/dbt/core/dbt/include/global_project",
      "path": "macros/utils/safe_cast.sql",
      "original_file_path": "macros/utils/safe_cast.sql",
      "name": "safe_cast",
      "macro_sql": "{% macro safe_cast(field, type) %}\n  {{ return(adapter.dispatch('safe_cast', 'dbt') (field, type)) }}\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": { "macros": ["macro.dbt.default__safe_cast"] },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1665426349.7914398,
      "supported_languages": null
    },
    "macro.dbt.default__safe_cast": {
      "unique_id": "macro.dbt.default__safe_cast",
      "package_name": "dbt",
      "root_path": "/Users/sung/Desktop/dbt/core/dbt/include/global_project",
      "path": "macros/utils/safe_cast.sql",
      "original_file_path": "macros/utils/safe_cast.sql",
      "name": "default__safe_cast",
      "macro_sql": "{% macro default__safe_cast(field, type) %}\n    {# most databases don't support this function yet\n    so we just need to use cast #}\n    cast({{field}} as {{type}})\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": { "macros": [] },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1665426349.791856,
      "supported_languages": null
    },
    "macro.dbt.hash": {
      "unique_id": "macro.dbt.hash",
      "package_name": "dbt",
      "root_path": "/Users/sung/Desktop/dbt/core/dbt/include/global_project",
      "path": "macros/utils/hash.sql",
      "original_file_path": "macros/utils/hash.sql",
      "name": "hash",
      "macro_sql": "{% macro hash(field) -%}\n  {{ return(adapter.dispatch('hash', 'dbt') (field)) }}\n{%- endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": { "macros": ["macro.dbt.default__hash"] },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1665426349.793055,
      "supported_languages": null
    },
    "macro.dbt.default__hash": {
      "unique_id": "macro.dbt.default__hash",
      "package_name": "dbt",
      "root_path": "/Users/sung/Desktop/dbt/core/dbt/include/global_project",
      "path": "macros/utils/hash.sql",
      "original_file_path": "macros/utils/hash.sql",
      "name": "default__hash",
      "macro_sql": "{% macro default__hash(field) -%}\n    md5(cast({{ field }} as {{ api.Column.translate_type('string') }}))\n{%- endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": { "macros": [] },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1665426349.793738,
      "supported_languages": null
    },
    "macro.dbt.cast_bool_to_text": {
      "unique_id": "macro.dbt.cast_bool_to_text",
      "package_name": "dbt",
      "root_path": "/Users/sung/Desktop/dbt/core/dbt/include/global_project",
      "path": "macros/utils/cast_bool_to_text.sql",
      "original_file_path": "macros/utils/cast_bool_to_text.sql",
      "name": "cast_bool_to_text",
      "macro_sql": "{% macro cast_bool_to_text(field) %}\n  {{ adapter.dispatch('cast_bool_to_text', 'dbt') (field) }}\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": { "macros": ["macro.dbt.default__cast_bool_to_text"] },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1665426349.79471,
      "supported_languages": null
    },
    "macro.dbt.default__cast_bool_to_text": {
      "unique_id": "macro.dbt.default__cast_bool_to_text",
      "package_name": "dbt",
      "root_path": "/Users/sung/Desktop/dbt/core/dbt/include/global_project",
      "path": "macros/utils/cast_bool_to_text.sql",
      "original_file_path": "macros/utils/cast_bool_to_text.sql",
      "name": "default__cast_bool_to_text",
      "macro_sql": "{% macro default__cast_bool_to_text(field) %}\n    cast({{ field }} as {{ api.Column.translate_type('string') }})\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": { "macros": [] },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1665426349.795103,
      "supported_languages": null
    },
    "macro.dbt.any_value": {
      "unique_id": "macro.dbt.any_value",
      "package_name": "dbt",
      "root_path": "/Users/sung/Desktop/dbt/core/dbt/include/global_project",
      "path": "macros/utils/any_value.sql",
      "original_file_path": "macros/utils/any_value.sql",
      "name": "any_value",
      "macro_sql": "{% macro any_value(expression) -%}\n    {{ return(adapter.dispatch('any_value', 'dbt') (expression)) }}\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": { "macros": ["macro.dbt.default__any_value"] },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1665426349.795904,
      "supported_languages": null
    },
    "macro.dbt.default__any_value": {
      "unique_id": "macro.dbt.default__any_value",
      "package_name": "dbt",
      "root_path": "/Users/sung/Desktop/dbt/core/dbt/include/global_project",
      "path": "macros/utils/any_value.sql",
      "original_file_path": "macros/utils/any_value.sql",
      "name": "default__any_value",
      "macro_sql": "{% macro default__any_value(expression) -%}\n\n    any_value({{ expression }})\n\n{%- endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": { "macros": [] },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1665426349.796175,
      "supported_languages": null
    },
    "macro.dbt.position": {
      "unique_id": "macro.dbt.position",
      "package_name": "dbt",
      "root_path": "/Users/sung/Desktop/dbt/core/dbt/include/global_project",
      "path": "macros/utils/position.sql",
      "original_file_path": "macros/utils/position.sql",
      "name": "position",
      "macro_sql": "{% macro position(substring_text, string_text) -%}\n    {{ return(adapter.dispatch('position', 'dbt') (substring_text, string_text)) }}\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": { "macros": ["macro.dbt.default__position"] },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1665426349.797138,
      "supported_languages": null
    },
    "macro.dbt.default__position": {
      "unique_id": "macro.dbt.default__position",
      "package_name": "dbt",
      "root_path": "/Users/sung/Desktop/dbt/core/dbt/include/global_project",
      "path": "macros/utils/position.sql",
      "original_file_path": "macros/utils/position.sql",
      "name": "default__position",
      "macro_sql": "{% macro default__position(substring_text, string_text) %}\n\n    position(\n        {{ substring_text }} in {{ string_text }}\n    )\n\n{%- endmacro -%}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": { "macros": [] },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1665426349.797552,
      "supported_languages": null
    },
    "macro.dbt.string_literal": {
      "unique_id": "macro.dbt.string_literal",
      "package_name": "dbt",
      "root_path": "/Users/sung/Desktop/dbt/core/dbt/include/global_project",
      "path": "macros/utils/literal.sql",
      "original_file_path": "macros/utils/literal.sql",
      "name": "string_literal",
      "macro_sql": "{%- macro string_literal(value) -%}\n  {{ return(adapter.dispatch('string_literal', 'dbt') (value)) }}\n{%- endmacro -%}\n\n",
      "resource_type": "macro",
      "tags": [],
      "depends_on": { "macros": ["macro.dbt.default__string_literal"] },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1665426349.79853,
      "supported_languages": null
    },
    "macro.dbt.default__string_literal": {
      "unique_id": "macro.dbt.default__string_literal",
      "package_name": "dbt",
      "root_path": "/Users/sung/Desktop/dbt/core/dbt/include/global_project",
      "path": "macros/utils/literal.sql",
      "original_file_path": "macros/utils/literal.sql",
      "name": "default__string_literal",
      "macro_sql": "{% macro default__string_literal(value) -%}\n    '{{ value }}'\n{%- endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": { "macros": [] },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1665426349.7988212,
      "supported_languages": null
    },
    "macro.dbt.type_string": {
      "unique_id": "macro.dbt.type_string",
      "package_name": "dbt",
      "root_path": "/Users/sung/Desktop/dbt/core/dbt/include/global_project",
      "path": "macros/utils/data_types.sql",
      "original_file_path": "macros/utils/data_types.sql",
      "name": "type_string",
      "macro_sql": "\n\n{%- macro type_string() -%}\n  {{ return(adapter.dispatch('type_string', 'dbt')()) }}\n{%- endmacro -%}\n\n",
      "resource_type": "macro",
      "tags": [],
      "depends_on": { "macros": ["macro.dbt.default__type_string"] },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1665426349.8010979,
      "supported_languages": null
    },
    "macro.dbt.default__type_string": {
      "unique_id": "macro.dbt.default__type_string",
      "package_name": "dbt",
      "root_path": "/Users/sung/Desktop/dbt/core/dbt/include/global_project",
      "path": "macros/utils/data_types.sql",
      "original_file_path": "macros/utils/data_types.sql",
      "name": "default__type_string",
      "macro_sql": "{% macro default__type_string() %}\n    {{ return(api.Column.translate_type(\"string\")) }}\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": { "macros": [] },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1665426349.801478,
      "supported_languages": null
    },
    "macro.dbt.type_timestamp": {
      "unique_id": "macro.dbt.type_timestamp",
      "package_name": "dbt",
      "root_path": "/Users/sung/Desktop/dbt/core/dbt/include/global_project",
      "path": "macros/utils/data_types.sql",
      "original_file_path": "macros/utils/data_types.sql",
      "name": "type_timestamp",
      "macro_sql": "\n\n{%- macro type_timestamp() -%}\n  {{ return(adapter.dispatch('type_timestamp', 'dbt')()) }}\n{%- endmacro -%}\n\n",
      "resource_type": "macro",
      "tags": [],
      "depends_on": { "macros": ["macro.dbt.default__type_timestamp"] },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1665426349.801928,
      "supported_languages": null
    },
    "macro.dbt.default__type_timestamp": {
      "unique_id": "macro.dbt.default__type_timestamp",
      "package_name": "dbt",
      "root_path": "/Users/sung/Desktop/dbt/core/dbt/include/global_project",
      "path": "macros/utils/data_types.sql",
      "original_file_path": "macros/utils/data_types.sql",
      "name": "default__type_timestamp",
      "macro_sql": "{% macro default__type_timestamp() %}\n    {{ return(api.Column.translate_type(\"timestamp\")) }}\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": { "macros": [] },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1665426349.802468,
      "supported_languages": null
    },
    "macro.dbt.type_float": {
      "unique_id": "macro.dbt.type_float",
      "package_name": "dbt",
      "root_path": "/Users/sung/Desktop/dbt/core/dbt/include/global_project",
      "path": "macros/utils/data_types.sql",
      "original_file_path": "macros/utils/data_types.sql",
      "name": "type_float",
      "macro_sql": "\n\n{%- macro type_float() -%}\n  {{ return(adapter.dispatch('type_float', 'dbt')()) }}\n{%- endmacro -%}\n\n",
      "resource_type": "macro",
      "tags": [],
      "depends_on": { "macros": ["macro.dbt.default__type_float"] },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1665426349.803046,
      "supported_languages": null
    },
    "macro.dbt.default__type_float": {
      "unique_id": "macro.dbt.default__type_float",
      "package_name": "dbt",
      "root_path": "/Users/sung/Desktop/dbt/core/dbt/include/global_project",
      "path": "macros/utils/data_types.sql",
      "original_file_path": "macros/utils/data_types.sql",
      "name": "default__type_float",
      "macro_sql": "{% macro default__type_float() %}\n    {{ return(api.Column.translate_type(\"float\")) }}\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": { "macros": [] },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1665426349.8036249,
      "supported_languages": null
    },
    "macro.dbt.type_numeric": {
      "unique_id": "macro.dbt.type_numeric",
      "package_name": "dbt",
      "root_path": "/Users/sung/Desktop/dbt/core/dbt/include/global_project",
      "path": "macros/utils/data_types.sql",
      "original_file_path": "macros/utils/data_types.sql",
      "name": "type_numeric",
      "macro_sql": "\n\n{%- macro type_numeric() -%}\n  {{ return(adapter.dispatch('type_numeric', 'dbt')()) }}\n{%- endmacro -%}\n\n",
      "resource_type": "macro",
      "tags": [],
      "depends_on": { "macros": ["macro.dbt.default__type_numeric"] },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1665426349.8042119,
      "supported_languages": null
    },
    "macro.dbt.default__type_numeric": {
      "unique_id": "macro.dbt.default__type_numeric",
      "package_name": "dbt",
      "root_path": "/Users/sung/Desktop/dbt/core/dbt/include/global_project",
      "path": "macros/utils/data_types.sql",
      "original_file_path": "macros/utils/data_types.sql",
      "name": "default__type_numeric",
      "macro_sql": "{% macro default__type_numeric() %}\n    {{ return(api.Column.numeric_type(\"numeric\", 28, 6)) }}\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": { "macros": [] },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1665426349.804919,
      "supported_languages": null
    },
    "macro.dbt.type_bigint": {
      "unique_id": "macro.dbt.type_bigint",
      "package_name": "dbt",
      "root_path": "/Users/sung/Desktop/dbt/core/dbt/include/global_project",
      "path": "macros/utils/data_types.sql",
      "original_file_path": "macros/utils/data_types.sql",
      "name": "type_bigint",
      "macro_sql": "\n\n{%- macro type_bigint() -%}\n  {{ return(adapter.dispatch('type_bigint', 'dbt')()) }}\n{%- endmacro -%}\n\n",
      "resource_type": "macro",
      "tags": [],
      "depends_on": { "macros": ["macro.dbt.default__type_bigint"] },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1665426349.805502,
      "supported_languages": null
    },
    "macro.dbt.default__type_bigint": {
      "unique_id": "macro.dbt.default__type_bigint",
      "package_name": "dbt",
      "root_path": "/Users/sung/Desktop/dbt/core/dbt/include/global_project",
      "path": "macros/utils/data_types.sql",
      "original_file_path": "macros/utils/data_types.sql",
      "name": "default__type_bigint",
      "macro_sql": "{% macro default__type_bigint() %}\n    {{ return(api.Column.translate_type(\"bigint\")) }}\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": { "macros": [] },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1665426349.8059762,
      "supported_languages": null
    },
    "macro.dbt.type_int": {
      "unique_id": "macro.dbt.type_int",
      "package_name": "dbt",
      "root_path": "/Users/sung/Desktop/dbt/core/dbt/include/global_project",
      "path": "macros/utils/data_types.sql",
      "original_file_path": "macros/utils/data_types.sql",
      "name": "type_int",
      "macro_sql": "\n\n{%- macro type_int() -%}\n  {{ return(adapter.dispatch('type_int', 'dbt')()) }}\n{%- endmacro -%}\n\n",
      "resource_type": "macro",
      "tags": [],
      "depends_on": { "macros": ["macro.dbt.default__type_int"] },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1665426349.806495,
      "supported_languages": null
    },
    "macro.dbt.default__type_int": {
      "unique_id": "macro.dbt.default__type_int",
      "package_name": "dbt",
      "root_path": "/Users/sung/Desktop/dbt/core/dbt/include/global_project",
      "path": "macros/utils/data_types.sql",
      "original_file_path": "macros/utils/data_types.sql",
      "name": "default__type_int",
      "macro_sql": "{%- macro default__type_int() -%}\n  {{ return(api.Column.translate_type(\"integer\")) }}\n{%- endmacro -%}\n\n",
      "resource_type": "macro",
      "tags": [],
      "depends_on": { "macros": [] },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1665426349.8068469,
      "supported_languages": null
    },
    "macro.dbt.type_boolean": {
      "unique_id": "macro.dbt.type_boolean",
      "package_name": "dbt",
      "root_path": "/Users/sung/Desktop/dbt/core/dbt/include/global_project",
      "path": "macros/utils/data_types.sql",
      "original_file_path": "macros/utils/data_types.sql",
      "name": "type_boolean",
      "macro_sql": "\n\n{%- macro type_boolean() -%}\n  {{ return(adapter.dispatch('type_boolean', 'dbt')()) }}\n{%- endmacro -%}\n\n",
      "resource_type": "macro",
      "tags": [],
      "depends_on": { "macros": ["macro.dbt.default__type_boolean"] },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1665426349.8072162,
      "supported_languages": null
    },
    "macro.dbt.default__type_boolean": {
      "unique_id": "macro.dbt.default__type_boolean",
      "package_name": "dbt",
      "root_path": "/Users/sung/Desktop/dbt/core/dbt/include/global_project",
      "path": "macros/utils/data_types.sql",
      "original_file_path": "macros/utils/data_types.sql",
      "name": "default__type_boolean",
      "macro_sql": "{%- macro default__type_boolean() -%}\n  {{ return(api.Column.translate_type(\"boolean\")) }}\n{%- endmacro -%}\n\n",
      "resource_type": "macro",
      "tags": [],
      "depends_on": { "macros": [] },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1665426349.807648,
      "supported_languages": null
    },
    "macro.dbt.array_concat": {
      "unique_id": "macro.dbt.array_concat",
      "package_name": "dbt",
      "root_path": "/Users/sung/Desktop/dbt/core/dbt/include/global_project",
      "path": "macros/utils/array_concat.sql",
      "original_file_path": "macros/utils/array_concat.sql",
      "name": "array_concat",
      "macro_sql": "{% macro array_concat(array_1, array_2) -%}\n  {{ return(adapter.dispatch('array_concat', 'dbt')(array_1, array_2)) }}\n{%- endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": { "macros": ["macro.dbt.default__array_concat"] },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1665426349.8087602,
      "supported_languages": null
    },
    "macro.dbt.default__array_concat": {
      "unique_id": "macro.dbt.default__array_concat",
      "package_name": "dbt",
      "root_path": "/Users/sung/Desktop/dbt/core/dbt/include/global_project",
      "path": "macros/utils/array_concat.sql",
      "original_file_path": "macros/utils/array_concat.sql",
      "name": "default__array_concat",
      "macro_sql": "{% macro default__array_concat(array_1, array_2) -%}\n    array_cat({{ array_1 }}, {{ array_2 }})\n{%- endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": { "macros": [] },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1665426349.80941,
      "supported_languages": null
    },
    "macro.dbt.bool_or": {
      "unique_id": "macro.dbt.bool_or",
      "package_name": "dbt",
      "root_path": "/Users/sung/Desktop/dbt/core/dbt/include/global_project",
      "path": "macros/utils/bool_or.sql",
      "original_file_path": "macros/utils/bool_or.sql",
      "name": "bool_or",
      "macro_sql": "{% macro bool_or(expression) -%}\n    {{ return(adapter.dispatch('bool_or', 'dbt') (expression)) }}\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": { "macros": ["macro.dbt.default__bool_or"] },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1665426349.810998,
      "supported_languages": null
    },
    "macro.dbt.default__bool_or": {
      "unique_id": "macro.dbt.default__bool_or",
      "package_name": "dbt",
      "root_path": "/Users/sung/Desktop/dbt/core/dbt/include/global_project",
      "path": "macros/utils/bool_or.sql",
      "original_file_path": "macros/utils/bool_or.sql",
      "name": "default__bool_or",
      "macro_sql": "{% macro default__bool_or(expression) -%}\n\n    bool_or({{ expression }})\n\n{%- endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": { "macros": [] },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1665426349.811303,
      "supported_languages": null
    },
    "macro.dbt.last_day": {
      "unique_id": "macro.dbt.last_day",
      "package_name": "dbt",
      "root_path": "/Users/sung/Desktop/dbt/core/dbt/include/global_project",
      "path": "macros/utils/last_day.sql",
      "original_file_path": "macros/utils/last_day.sql",
      "name": "last_day",
      "macro_sql": "{% macro last_day(date, datepart) %}\n  {{ return(adapter.dispatch('last_day', 'dbt') (date, datepart)) }}\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": { "macros": ["macro.dbt.default__last_day"] },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1665426349.812361,
      "supported_languages": null
    },
    "macro.dbt.default_last_day": {
      "unique_id": "macro.dbt.default_last_day",
      "package_name": "dbt",
      "root_path": "/Users/sung/Desktop/dbt/core/dbt/include/global_project",
      "path": "macros/utils/last_day.sql",
      "original_file_path": "macros/utils/last_day.sql",
      "name": "default_last_day",
      "macro_sql": "\n\n{%- macro default_last_day(date, datepart) -%}\n    cast(\n        {{dbt.dateadd('day', '-1',\n        dbt.dateadd(datepart, '1', dbt.date_trunc(datepart, date))\n        )}}\n        as date)\n{%- endmacro -%}\n\n",
      "resource_type": "macro",
      "tags": [],
      "depends_on": { "macros": ["macro.dbt.dateadd", "macro.dbt.date_trunc"] },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1665426349.812993,
      "supported_languages": null
    },
    "macro.dbt.default__last_day": {
      "unique_id": "macro.dbt.default__last_day",
      "package_name": "dbt",
      "root_path": "/Users/sung/Desktop/dbt/core/dbt/include/global_project",
      "path": "macros/utils/last_day.sql",
      "original_file_path": "macros/utils/last_day.sql",
      "name": "default__last_day",
      "macro_sql": "{% macro default__last_day(date, datepart) -%}\n    {{dbt.default_last_day(date, datepart)}}\n{%- endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": { "macros": ["macro.dbt.default_last_day"] },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1665426349.813344,
      "supported_languages": null
    },
    "macro.dbt.split_part": {
      "unique_id": "macro.dbt.split_part",
      "package_name": "dbt",
      "root_path": "/Users/sung/Desktop/dbt/core/dbt/include/global_project",
      "path": "macros/utils/split_part.sql",
      "original_file_path": "macros/utils/split_part.sql",
      "name": "split_part",
      "macro_sql": "{% macro split_part(string_text, delimiter_text, part_number) %}\n  {{ return(adapter.dispatch('split_part', 'dbt') (string_text, delimiter_text, part_number)) }}\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": { "macros": ["macro.dbt.default__split_part"] },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1665426349.814655,
      "supported_languages": null
    },
    "macro.dbt.default__split_part": {
      "unique_id": "macro.dbt.default__split_part",
      "package_name": "dbt",
      "root_path": "/Users/sung/Desktop/dbt/core/dbt/include/global_project",
      "path": "macros/utils/split_part.sql",
      "original_file_path": "macros/utils/split_part.sql",
      "name": "default__split_part",
      "macro_sql": "{% macro default__split_part(string_text, delimiter_text, part_number) %}\n\n    split_part(\n        {{ string_text }},\n        {{ delimiter_text }},\n        {{ part_number }}\n        )\n\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": { "macros": [] },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1665426349.815084,
      "supported_languages": null
    },
    "macro.dbt._split_part_negative": {
      "unique_id": "macro.dbt._split_part_negative",
      "package_name": "dbt",
      "root_path": "/Users/sung/Desktop/dbt/core/dbt/include/global_project",
      "path": "macros/utils/split_part.sql",
      "original_file_path": "macros/utils/split_part.sql",
      "name": "_split_part_negative",
      "macro_sql": "{% macro _split_part_negative(string_text, delimiter_text, part_number) %}\n\n    split_part(\n        {{ string_text }},\n        {{ delimiter_text }},\n          length({{ string_text }})\n          - length(\n              replace({{ string_text }},  {{ delimiter_text }}, '')\n          ) + 2 {{ part_number }}\n        )\n\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": { "macros": [] },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1665426349.815619,
      "supported_languages": null
    },
    "macro.dbt.date_trunc": {
      "unique_id": "macro.dbt.date_trunc",
      "package_name": "dbt",
      "root_path": "/Users/sung/Desktop/dbt/core/dbt/include/global_project",
      "path": "macros/utils/date_trunc.sql",
      "original_file_path": "macros/utils/date_trunc.sql",
      "name": "date_trunc",
      "macro_sql": "{% macro date_trunc(datepart, date) -%}\n  {{ return(adapter.dispatch('date_trunc', 'dbt') (datepart, date)) }}\n{%- endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": { "macros": ["macro.dbt.default__date_trunc"] },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1665426349.816481,
      "supported_languages": null
    },
    "macro.dbt.default__date_trunc": {
      "unique_id": "macro.dbt.default__date_trunc",
      "package_name": "dbt",
      "root_path": "/Users/sung/Desktop/dbt/core/dbt/include/global_project",
      "path": "macros/utils/date_trunc.sql",
      "original_file_path": "macros/utils/date_trunc.sql",
      "name": "default__date_trunc",
      "macro_sql": "{% macro default__date_trunc(datepart, date) -%}\n    date_trunc('{{datepart}}', {{date}})\n{%- endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": { "macros": [] },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1665426349.816789,
      "supported_languages": null
    },
    "macro.dbt.array_construct": {
      "unique_id": "macro.dbt.array_construct",
      "package_name": "dbt",
      "root_path": "/Users/sung/Desktop/dbt/core/dbt/include/global_project",
      "path": "macros/utils/array_construct.sql",
      "original_file_path": "macros/utils/array_construct.sql",
      "name": "array_construct",
      "macro_sql": "{% macro array_construct(inputs=[], data_type=api.Column.translate_type('integer')) -%}\n  {{ return(adapter.dispatch('array_construct', 'dbt')(inputs, data_type)) }}\n{%- endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": { "macros": ["macro.dbt.default__array_construct"] },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1665426349.8178382,
      "supported_languages": null
    },
    "macro.dbt.default__array_construct": {
      "unique_id": "macro.dbt.default__array_construct",
      "package_name": "dbt",
      "root_path": "/Users/sung/Desktop/dbt/core/dbt/include/global_project",
      "path": "macros/utils/array_construct.sql",
      "original_file_path": "macros/utils/array_construct.sql",
      "name": "default__array_construct",
      "macro_sql": "{% macro default__array_construct(inputs, data_type) -%}\n    {% if inputs|length > 0 %}\n    array[ {{ inputs|join(' , ') }} ]\n    {% else %}\n    array[]::{{data_type}}[]\n    {% endif %}\n{%- endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": { "macros": [] },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1665426349.81843,
      "supported_languages": null
    },
    "macro.dbt.array_append": {
      "unique_id": "macro.dbt.array_append",
      "package_name": "dbt",
      "root_path": "/Users/sung/Desktop/dbt/core/dbt/include/global_project",
      "path": "macros/utils/array_append.sql",
      "original_file_path": "macros/utils/array_append.sql",
      "name": "array_append",
      "macro_sql": "{% macro array_append(array, new_element) -%}\n  {{ return(adapter.dispatch('array_append', 'dbt')(array, new_element)) }}\n{%- endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": { "macros": ["macro.dbt.default__array_append"] },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1665426349.8194308,
      "supported_languages": null
    },
    "macro.dbt.default__array_append": {
      "unique_id": "macro.dbt.default__array_append",
      "package_name": "dbt",
      "root_path": "/Users/sung/Desktop/dbt/core/dbt/include/global_project",
      "path": "macros/utils/array_append.sql",
      "original_file_path": "macros/utils/array_append.sql",
      "name": "default__array_append",
      "macro_sql": "{% macro default__array_append(array, new_element) -%}\n    array_append({{ array }}, {{ new_element }})\n{%- endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": { "macros": [] },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1665426349.819937,
      "supported_languages": null
    },
    "macro.dbt.create_schema": {
      "unique_id": "macro.dbt.create_schema",
      "package_name": "dbt",
      "root_path": "/Users/sung/Desktop/dbt/core/dbt/include/global_project",
      "path": "macros/adapters/schema.sql",
      "original_file_path": "macros/adapters/schema.sql",
      "name": "create_schema",
      "macro_sql": "{% macro create_schema(relation) -%}\n  {{ adapter.dispatch('create_schema', 'dbt')(relation) }}\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": { "macros": ["macro.dbt.default__create_schema"] },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1665426349.821111,
      "supported_languages": null
    },
    "macro.dbt.default__create_schema": {
      "unique_id": "macro.dbt.default__create_schema",
      "package_name": "dbt",
      "root_path": "/Users/sung/Desktop/dbt/core/dbt/include/global_project",
      "path": "macros/adapters/schema.sql",
      "original_file_path": "macros/adapters/schema.sql",
      "name": "default__create_schema",
      "macro_sql": "{% macro default__create_schema(relation) -%}\n  {%- call statement('create_schema') -%}\n    create schema if not exists {{ relation.without_identifier() }}\n  {% endcall %}\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": { "macros": ["macro.dbt.statement"] },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1665426349.821574,
      "supported_languages": null
    },
    "macro.dbt.drop_schema": {
      "unique_id": "macro.dbt.drop_schema",
      "package_name": "dbt",
      "root_path": "/Users/sung/Desktop/dbt/core/dbt/include/global_project",
      "path": "macros/adapters/schema.sql",
      "original_file_path": "macros/adapters/schema.sql",
      "name": "drop_schema",
      "macro_sql": "{% macro drop_schema(relation) -%}\n  {{ adapter.dispatch('drop_schema', 'dbt')(relation) }}\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": { "macros": ["macro.dbt.default__drop_schema"] },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1665426349.8219461,
      "supported_languages": null
    },
    "macro.dbt.default__drop_schema": {
      "unique_id": "macro.dbt.default__drop_schema",
      "package_name": "dbt",
      "root_path": "/Users/sung/Desktop/dbt/core/dbt/include/global_project",
      "path": "macros/adapters/schema.sql",
      "original_file_path": "macros/adapters/schema.sql",
      "name": "default__drop_schema",
      "macro_sql": "{% macro default__drop_schema(relation) -%}\n  {%- call statement('drop_schema') -%}\n    drop schema if exists {{ relation.without_identifier() }} cascade\n  {% endcall %}\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": { "macros": ["macro.dbt.statement"] },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1665426349.822528,
      "supported_languages": null
    },
    "macro.dbt.current_timestamp": {
      "unique_id": "macro.dbt.current_timestamp",
      "package_name": "dbt",
      "root_path": "/Users/sung/Desktop/dbt/core/dbt/include/global_project",
      "path": "macros/adapters/timestamps.sql",
      "original_file_path": "macros/adapters/timestamps.sql",
      "name": "current_timestamp",
      "macro_sql": "{%- macro current_timestamp() -%}\n    {{ adapter.dispatch('current_timestamp', 'dbt')() }}\n{%- endmacro -%}\n\n",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": ["macro.dbt_snowflake.snowflake__current_timestamp"]
      },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1665426349.82373,
      "supported_languages": null
    },
    "macro.dbt.default__current_timestamp": {
      "unique_id": "macro.dbt.default__current_timestamp",
      "package_name": "dbt",
      "root_path": "/Users/sung/Desktop/dbt/core/dbt/include/global_project",
      "path": "macros/adapters/timestamps.sql",
      "original_file_path": "macros/adapters/timestamps.sql",
      "name": "default__current_timestamp",
      "macro_sql": "{% macro default__current_timestamp() -%}\n  {{ exceptions.raise_not_implemented(\n    'current_timestamp macro not implemented for adapter ' + adapter.type()) }}\n{%- endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": { "macros": [] },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1665426349.824109,
      "supported_languages": null
    },
    "macro.dbt.snapshot_get_time": {
      "unique_id": "macro.dbt.snapshot_get_time",
      "package_name": "dbt",
      "root_path": "/Users/sung/Desktop/dbt/core/dbt/include/global_project",
      "path": "macros/adapters/timestamps.sql",
      "original_file_path": "macros/adapters/timestamps.sql",
      "name": "snapshot_get_time",
      "macro_sql": "\n\n{%- macro snapshot_get_time() -%}\n    {{ adapter.dispatch('snapshot_get_time', 'dbt')() }}\n{%- endmacro -%}\n\n",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": ["macro.dbt_snowflake.snowflake__snapshot_get_time"]
      },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1665426349.8244522,
      "supported_languages": null
    },
    "macro.dbt.default__snapshot_get_time": {
      "unique_id": "macro.dbt.default__snapshot_get_time",
      "package_name": "dbt",
      "root_path": "/Users/sung/Desktop/dbt/core/dbt/include/global_project",
      "path": "macros/adapters/timestamps.sql",
      "original_file_path": "macros/adapters/timestamps.sql",
      "name": "default__snapshot_get_time",
      "macro_sql": "{% macro default__snapshot_get_time() %}\n    {{ current_timestamp() }}\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": { "macros": ["macro.dbt.current_timestamp"] },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1665426349.824822,
      "supported_languages": null
    },
    "macro.dbt.current_timestamp_backcompat": {
      "unique_id": "macro.dbt.current_timestamp_backcompat",
      "package_name": "dbt",
      "root_path": "/Users/sung/Desktop/dbt/core/dbt/include/global_project",
      "path": "macros/adapters/timestamps.sql",
      "original_file_path": "macros/adapters/timestamps.sql",
      "name": "current_timestamp_backcompat",
      "macro_sql": "{% macro current_timestamp_backcompat() %}\n    {{ return(adapter.dispatch('current_timestamp_backcompat', 'dbt')()) }}\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": ["macro.dbt.default__current_timestamp_backcompat"]
      },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1665426349.82538,
      "supported_languages": null
    },
    "macro.dbt.default__current_timestamp_backcompat": {
      "unique_id": "macro.dbt.default__current_timestamp_backcompat",
      "package_name": "dbt",
      "root_path": "/Users/sung/Desktop/dbt/core/dbt/include/global_project",
      "path": "macros/adapters/timestamps.sql",
      "original_file_path": "macros/adapters/timestamps.sql",
      "name": "default__current_timestamp_backcompat",
      "macro_sql": "{% macro default__current_timestamp_backcompat() %}\n    current_timestamp::timestamp\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": { "macros": [] },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1665426349.825662,
      "supported_languages": null
    },
    "macro.dbt.current_timestamp_in_utc_backcompat": {
      "unique_id": "macro.dbt.current_timestamp_in_utc_backcompat",
      "package_name": "dbt",
      "root_path": "/Users/sung/Desktop/dbt/core/dbt/include/global_project",
      "path": "macros/adapters/timestamps.sql",
      "original_file_path": "macros/adapters/timestamps.sql",
      "name": "current_timestamp_in_utc_backcompat",
      "macro_sql": "{% macro current_timestamp_in_utc_backcompat() %}\n    {{ return(adapter.dispatch('current_timestamp_in_utc_backcompat', 'dbt')()) }}\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": ["macro.dbt.default__current_timestamp_in_utc_backcompat"]
      },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1665426349.826117,
      "supported_languages": null
    },
    "macro.dbt.default__current_timestamp_in_utc_backcompat": {
      "unique_id": "macro.dbt.default__current_timestamp_in_utc_backcompat",
      "package_name": "dbt",
      "root_path": "/Users/sung/Desktop/dbt/core/dbt/include/global_project",
      "path": "macros/adapters/timestamps.sql",
      "original_file_path": "macros/adapters/timestamps.sql",
      "name": "default__current_timestamp_in_utc_backcompat",
      "macro_sql": "{% macro default__current_timestamp_in_utc_backcompat() %}\n    {{ return(adapter.dispatch('current_timestamp_backcompat', 'dbt')()) }}\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": [
          "macro.dbt.current_timestamp_backcompat",
          "macro.dbt.default__current_timestamp_backcompat"
        ]
      },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1665426349.826536,
      "supported_languages": null
    },
    "macro.dbt.get_create_index_sql": {
      "unique_id": "macro.dbt.get_create_index_sql",
      "package_name": "dbt",
      "root_path": "/Users/sung/Desktop/dbt/core/dbt/include/global_project",
      "path": "macros/adapters/indexes.sql",
      "original_file_path": "macros/adapters/indexes.sql",
      "name": "get_create_index_sql",
      "macro_sql": "{% macro get_create_index_sql(relation, index_dict) -%}\n  {{ return(adapter.dispatch('get_create_index_sql', 'dbt')(relation, index_dict)) }}\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": { "macros": ["macro.dbt.default__get_create_index_sql"] },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1665426349.828087,
      "supported_languages": null
    },
    "macro.dbt.default__get_create_index_sql": {
      "unique_id": "macro.dbt.default__get_create_index_sql",
      "package_name": "dbt",
      "root_path": "/Users/sung/Desktop/dbt/core/dbt/include/global_project",
      "path": "macros/adapters/indexes.sql",
      "original_file_path": "macros/adapters/indexes.sql",
      "name": "default__get_create_index_sql",
      "macro_sql": "{% macro default__get_create_index_sql(relation, index_dict) -%}\n  {% do return(None) %}\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": { "macros": [] },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1665426349.8285341,
      "supported_languages": null
    },
    "macro.dbt.create_indexes": {
      "unique_id": "macro.dbt.create_indexes",
      "package_name": "dbt",
      "root_path": "/Users/sung/Desktop/dbt/core/dbt/include/global_project",
      "path": "macros/adapters/indexes.sql",
      "original_file_path": "macros/adapters/indexes.sql",
      "name": "create_indexes",
      "macro_sql": "{% macro create_indexes(relation) -%}\n  {{ adapter.dispatch('create_indexes', 'dbt')(relation) }}\n{%- endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": { "macros": ["macro.dbt.default__create_indexes"] },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1665426349.8291671,
      "supported_languages": null
    },
    "macro.dbt.default__create_indexes": {
      "unique_id": "macro.dbt.default__create_indexes",
      "package_name": "dbt",
      "root_path": "/Users/sung/Desktop/dbt/core/dbt/include/global_project",
      "path": "macros/adapters/indexes.sql",
      "original_file_path": "macros/adapters/indexes.sql",
      "name": "default__create_indexes",
      "macro_sql": "{% macro default__create_indexes(relation) -%}\n  {%- set _indexes = config.get('indexes', default=[]) -%}\n\n  {% for _index_dict in _indexes %}\n    {% set create_index_sql = get_create_index_sql(relation, _index_dict) %}\n    {% if create_index_sql %}\n      {% do run_query(create_index_sql) %}\n    {% endif %}\n  {% endfor %}\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": ["macro.dbt.get_create_index_sql", "macro.dbt.run_query"]
      },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1665426349.830129,
      "supported_languages": null
    },
    "macro.dbt.make_intermediate_relation": {
      "unique_id": "macro.dbt.make_intermediate_relation",
      "package_name": "dbt",
      "root_path": "/Users/sung/Desktop/dbt/core/dbt/include/global_project",
      "path": "macros/adapters/relation.sql",
      "original_file_path": "macros/adapters/relation.sql",
      "name": "make_intermediate_relation",
      "macro_sql": "{% macro make_intermediate_relation(base_relation, suffix='__dbt_tmp') %}\n  {{ return(adapter.dispatch('make_intermediate_relation', 'dbt')(base_relation, suffix)) }}\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": ["macro.dbt.default__make_intermediate_relation"]
      },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1665426349.83644,
      "supported_languages": null
    },
    "macro.dbt.default__make_intermediate_relation": {
      "unique_id": "macro.dbt.default__make_intermediate_relation",
      "package_name": "dbt",
      "root_path": "/Users/sung/Desktop/dbt/core/dbt/include/global_project",
      "path": "macros/adapters/relation.sql",
      "original_file_path": "macros/adapters/relation.sql",
      "name": "default__make_intermediate_relation",
      "macro_sql": "{% macro default__make_intermediate_relation(base_relation, suffix) %}\n    {{ return(default__make_temp_relation(base_relation, suffix)) }}\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": { "macros": ["macro.dbt.default__make_temp_relation"] },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1665426349.8372312,
      "supported_languages": null
    },
    "macro.dbt.make_temp_relation": {
      "unique_id": "macro.dbt.make_temp_relation",
      "package_name": "dbt",
      "root_path": "/Users/sung/Desktop/dbt/core/dbt/include/global_project",
      "path": "macros/adapters/relation.sql",
      "original_file_path": "macros/adapters/relation.sql",
      "name": "make_temp_relation",
      "macro_sql": "{% macro make_temp_relation(base_relation, suffix='__dbt_tmp') %}\n  {{ return(adapter.dispatch('make_temp_relation', 'dbt')(base_relation, suffix)) }}\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": { "macros": ["macro.dbt.default__make_temp_relation"] },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1665426349.8379898,
      "supported_languages": null
    },
    "macro.dbt.default__make_temp_relation": {
      "unique_id": "macro.dbt.default__make_temp_relation",
      "package_name": "dbt",
      "root_path": "/Users/sung/Desktop/dbt/core/dbt/include/global_project",
      "path": "macros/adapters/relation.sql",
      "original_file_path": "macros/adapters/relation.sql",
      "name": "default__make_temp_relation",
      "macro_sql": "{% macro default__make_temp_relation(base_relation, suffix) %}\n    {%- set temp_identifier = base_relation.identifier ~ suffix -%}\n    {%- set temp_relation = base_relation.incorporate(\n                                path={\"identifier\": temp_identifier}) -%}\n\n    {{ return(temp_relation) }}\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": { "macros": [] },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1665426349.8387709,
      "supported_languages": null
    },
    "macro.dbt.make_backup_relation": {
      "unique_id": "macro.dbt.make_backup_relation",
      "package_name": "dbt",
      "root_path": "/Users/sung/Desktop/dbt/core/dbt/include/global_project",
      "path": "macros/adapters/relation.sql",
      "original_file_path": "macros/adapters/relation.sql",
      "name": "make_backup_relation",
      "macro_sql": "{% macro make_backup_relation(base_relation, backup_relation_type, suffix='__dbt_backup') %}\n    {{ return(adapter.dispatch('make_backup_relation', 'dbt')(base_relation, backup_relation_type, suffix)) }}\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": { "macros": ["macro.dbt.default__make_backup_relation"] },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1665426349.839416,
      "supported_languages": null
    },
    "macro.dbt.default__make_backup_relation": {
      "unique_id": "macro.dbt.default__make_backup_relation",
      "package_name": "dbt",
      "root_path": "/Users/sung/Desktop/dbt/core/dbt/include/global_project",
      "path": "macros/adapters/relation.sql",
      "original_file_path": "macros/adapters/relation.sql",
      "name": "default__make_backup_relation",
      "macro_sql": "{% macro default__make_backup_relation(base_relation, backup_relation_type, suffix) %}\n    {%- set backup_identifier = base_relation.identifier ~ suffix -%}\n    {%- set backup_relation = base_relation.incorporate(\n                                  path={\"identifier\": backup_identifier},\n                                  type=backup_relation_type\n    ) -%}\n    {{ return(backup_relation) }}\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": { "macros": [] },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1665426349.8405828,
      "supported_languages": null
    },
    "macro.dbt.drop_relation": {
      "unique_id": "macro.dbt.drop_relation",
      "package_name": "dbt",
      "root_path": "/Users/sung/Desktop/dbt/core/dbt/include/global_project",
      "path": "macros/adapters/relation.sql",
      "original_file_path": "macros/adapters/relation.sql",
      "name": "drop_relation",
      "macro_sql": "{% macro drop_relation(relation) -%}\n  {{ return(adapter.dispatch('drop_relation', 'dbt')(relation)) }}\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": { "macros": ["macro.dbt.default__drop_relation"] },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1665426349.841037,
      "supported_languages": null
    },
    "macro.dbt.default__drop_relation": {
      "unique_id": "macro.dbt.default__drop_relation",
      "package_name": "dbt",
      "root_path": "/Users/sung/Desktop/dbt/core/dbt/include/global_project",
      "path": "macros/adapters/relation.sql",
      "original_file_path": "macros/adapters/relation.sql",
      "name": "default__drop_relation",
      "macro_sql": "{% macro default__drop_relation(relation) -%}\n  {% call statement('drop_relation', auto_begin=False) -%}\n    drop {{ relation.type }} if exists {{ relation }} cascade\n  {%- endcall %}\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": { "macros": ["macro.dbt.statement"] },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1665426349.8417652,
      "supported_languages": null
    },
    "macro.dbt.truncate_relation": {
      "unique_id": "macro.dbt.truncate_relation",
      "package_name": "dbt",
      "root_path": "/Users/sung/Desktop/dbt/core/dbt/include/global_project",
      "path": "macros/adapters/relation.sql",
      "original_file_path": "macros/adapters/relation.sql",
      "name": "truncate_relation",
      "macro_sql": "{% macro truncate_relation(relation) -%}\n  {{ return(adapter.dispatch('truncate_relation', 'dbt')(relation)) }}\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": ["macro.dbt_snowflake.snowflake__truncate_relation"]
      },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1665426349.842494,
      "supported_languages": null
    },
    "macro.dbt.default__truncate_relation": {
      "unique_id": "macro.dbt.default__truncate_relation",
      "package_name": "dbt",
      "root_path": "/Users/sung/Desktop/dbt/core/dbt/include/global_project",
      "path": "macros/adapters/relation.sql",
      "original_file_path": "macros/adapters/relation.sql",
      "name": "default__truncate_relation",
      "macro_sql": "{% macro default__truncate_relation(relation) -%}\n  {% call statement('truncate_relation') -%}\n    truncate table {{ relation }}\n  {%- endcall %}\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": { "macros": ["macro.dbt.statement"] },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1665426349.842962,
      "supported_languages": null
    },
    "macro.dbt.rename_relation": {
      "unique_id": "macro.dbt.rename_relation",
      "package_name": "dbt",
      "root_path": "/Users/sung/Desktop/dbt/core/dbt/include/global_project",
      "path": "macros/adapters/relation.sql",
      "original_file_path": "macros/adapters/relation.sql",
      "name": "rename_relation",
      "macro_sql": "{% macro rename_relation(from_relation, to_relation) -%}\n  {{ return(adapter.dispatch('rename_relation', 'dbt')(from_relation, to_relation)) }}\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": ["macro.dbt_snowflake.snowflake__rename_relation"]
      },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1665426349.843453,
      "supported_languages": null
    },
    "macro.dbt.default__rename_relation": {
      "unique_id": "macro.dbt.default__rename_relation",
      "package_name": "dbt",
      "root_path": "/Users/sung/Desktop/dbt/core/dbt/include/global_project",
      "path": "macros/adapters/relation.sql",
      "original_file_path": "macros/adapters/relation.sql",
      "name": "default__rename_relation",
      "macro_sql": "{% macro default__rename_relation(from_relation, to_relation) -%}\n  {% set target_name = adapter.quote_as_configured(to_relation.identifier, 'identifier') %}\n  {% call statement('rename_relation') -%}\n    alter table {{ from_relation }} rename to {{ target_name }}\n  {%- endcall %}\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": { "macros": ["macro.dbt.statement"] },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1665426349.8442008,
      "supported_languages": null
    },
    "macro.dbt.get_or_create_relation": {
      "unique_id": "macro.dbt.get_or_create_relation",
      "package_name": "dbt",
      "root_path": "/Users/sung/Desktop/dbt/core/dbt/include/global_project",
      "path": "macros/adapters/relation.sql",
      "original_file_path": "macros/adapters/relation.sql",
      "name": "get_or_create_relation",
      "macro_sql": "{% macro get_or_create_relation(database, schema, identifier, type) -%}\n  {{ return(adapter.dispatch('get_or_create_relation', 'dbt')(database, schema, identifier, type)) }}\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": { "macros": ["macro.dbt.default__get_or_create_relation"] },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1665426349.844857,
      "supported_languages": null
    },
    "macro.dbt.default__get_or_create_relation": {
      "unique_id": "macro.dbt.default__get_or_create_relation",
      "package_name": "dbt",
      "root_path": "/Users/sung/Desktop/dbt/core/dbt/include/global_project",
      "path": "macros/adapters/relation.sql",
      "original_file_path": "macros/adapters/relation.sql",
      "name": "default__get_or_create_relation",
      "macro_sql": "{% macro default__get_or_create_relation(database, schema, identifier, type) %}\n  {%- set target_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) %}\n\n  {% if target_relation %}\n    {% do return([true, target_relation]) %}\n  {% endif %}\n\n  {%- set new_relation = api.Relation.create(\n      database=database,\n      schema=schema,\n      identifier=identifier,\n      type=type\n  ) -%}\n  {% do return([false, new_relation]) %}\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": { "macros": [] },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1665426349.846304,
      "supported_languages": null
    },
    "macro.dbt.load_cached_relation": {
      "unique_id": "macro.dbt.load_cached_relation",
      "package_name": "dbt",
      "root_path": "/Users/sung/Desktop/dbt/core/dbt/include/global_project",
      "path": "macros/adapters/relation.sql",
      "original_file_path": "macros/adapters/relation.sql",
      "name": "load_cached_relation",
      "macro_sql": "{% macro load_cached_relation(relation) %}\n  {% do return(adapter.get_relation(\n    database=relation.database,\n    schema=relation.schema,\n    identifier=relation.identifier\n  )) -%}\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": { "macros": [] },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1665426349.847007,
      "supported_languages": null
    },
    "macro.dbt.load_relation": {
      "unique_id": "macro.dbt.load_relation",
      "package_name": "dbt",
      "root_path": "/Users/sung/Desktop/dbt/core/dbt/include/global_project",
      "path": "macros/adapters/relation.sql",
      "original_file_path": "macros/adapters/relation.sql",
      "name": "load_relation",
      "macro_sql": "{% macro load_relation(relation) %}\n    {{ return(load_cached_relation(relation)) }}\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": { "macros": ["macro.dbt.load_cached_relation"] },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1665426349.847414,
      "supported_languages": null
    },
    "macro.dbt.drop_relation_if_exists": {
      "unique_id": "macro.dbt.drop_relation_if_exists",
      "package_name": "dbt",
      "root_path": "/Users/sung/Desktop/dbt/core/dbt/include/global_project",
      "path": "macros/adapters/relation.sql",
      "original_file_path": "macros/adapters/relation.sql",
      "name": "drop_relation_if_exists",
      "macro_sql": "{% macro drop_relation_if_exists(relation) %}\n  {% if relation is not none %}\n    {{ adapter.drop_relation(relation) }}\n  {% endif %}\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": { "macros": [] },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1665426349.847918,
      "supported_languages": null
    },
    "macro.dbt.collect_freshness": {
      "unique_id": "macro.dbt.collect_freshness",
      "package_name": "dbt",
      "root_path": "/Users/sung/Desktop/dbt/core/dbt/include/global_project",
      "path": "macros/adapters/freshness.sql",
      "original_file_path": "macros/adapters/freshness.sql",
      "name": "collect_freshness",
      "macro_sql": "{% macro collect_freshness(source, loaded_at_field, filter) %}\n  {{ return(adapter.dispatch('collect_freshness', 'dbt')(source, loaded_at_field, filter))}}\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": { "macros": ["macro.dbt.default__collect_freshness"] },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1665426349.8492749,
      "supported_languages": null
    },
    "macro.dbt.default__collect_freshness": {
      "unique_id": "macro.dbt.default__collect_freshness",
      "package_name": "dbt",
      "root_path": "/Users/sung/Desktop/dbt/core/dbt/include/global_project",
      "path": "macros/adapters/freshness.sql",
      "original_file_path": "macros/adapters/freshness.sql",
      "name": "default__collect_freshness",
      "macro_sql": "{% macro default__collect_freshness(source, loaded_at_field, filter) %}\n  {% call statement('collect_freshness', fetch_result=True, auto_begin=False) -%}\n    select\n      max({{ loaded_at_field }}) as max_loaded_at,\n      {{ current_timestamp() }} as snapshotted_at\n    from {{ source }}\n    {% if filter %}\n    where {{ filter }}\n    {% endif %}\n  {% endcall %}\n  {{ return(load_result('collect_freshness').table) }}\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": ["macro.dbt.statement", "macro.dbt.current_timestamp"]
      },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1665426349.850413,
      "supported_languages": null
    },
    "macro.dbt.copy_grants": {
      "unique_id": "macro.dbt.copy_grants",
      "package_name": "dbt",
      "root_path": "/Users/sung/Desktop/dbt/core/dbt/include/global_project",
      "path": "macros/adapters/apply_grants.sql",
      "original_file_path": "macros/adapters/apply_grants.sql",
      "name": "copy_grants",
      "macro_sql": "{% macro copy_grants() %}\n    {{ return(adapter.dispatch('copy_grants', 'dbt')()) }}\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": { "macros": ["macro.dbt.default__copy_grants"] },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1665426349.854739,
      "supported_languages": null
    },
    "macro.dbt.default__copy_grants": {
      "unique_id": "macro.dbt.default__copy_grants",
      "package_name": "dbt",
      "root_path": "/Users/sung/Desktop/dbt/core/dbt/include/global_project",
      "path": "macros/adapters/apply_grants.sql",
      "original_file_path": "macros/adapters/apply_grants.sql",
      "name": "default__copy_grants",
      "macro_sql": "{% macro default__copy_grants() %}\n    {{ return(True) }}\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": { "macros": [] },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1665426349.855176,
      "supported_languages": null
    },
    "macro.dbt.support_multiple_grantees_per_dcl_statement": {
      "unique_id": "macro.dbt.support_multiple_grantees_per_dcl_statement",
      "package_name": "dbt",
      "root_path": "/Users/sung/Desktop/dbt/core/dbt/include/global_project",
      "path": "macros/adapters/apply_grants.sql",
      "original_file_path": "macros/adapters/apply_grants.sql",
      "name": "support_multiple_grantees_per_dcl_statement",
      "macro_sql": "{% macro support_multiple_grantees_per_dcl_statement() %}\n    {{ return(adapter.dispatch('support_multiple_grantees_per_dcl_statement', 'dbt')()) }}\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": [
          "macro.dbt.default__support_multiple_grantees_per_dcl_statement"
        ]
      },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1665426349.8556101,
      "supported_languages": null
    },
    "macro.dbt.default__support_multiple_grantees_per_dcl_statement": {
      "unique_id": "macro.dbt.default__support_multiple_grantees_per_dcl_statement",
      "package_name": "dbt",
      "root_path": "/Users/sung/Desktop/dbt/core/dbt/include/global_project",
      "path": "macros/adapters/apply_grants.sql",
      "original_file_path": "macros/adapters/apply_grants.sql",
      "name": "default__support_multiple_grantees_per_dcl_statement",
      "macro_sql": "\n\n{%- macro default__support_multiple_grantees_per_dcl_statement() -%}\n    {{ return(True) }}\n{%- endmacro -%}\n\n\n",
      "resource_type": "macro",
      "tags": [],
      "depends_on": { "macros": [] },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1665426349.855882,
      "supported_languages": null
    },
    "macro.dbt.should_revoke": {
      "unique_id": "macro.dbt.should_revoke",
      "package_name": "dbt",
      "root_path": "/Users/sung/Desktop/dbt/core/dbt/include/global_project",
      "path": "macros/adapters/apply_grants.sql",
      "original_file_path": "macros/adapters/apply_grants.sql",
      "name": "should_revoke",
      "macro_sql": "{% macro should_revoke(existing_relation, full_refresh_mode=True) %}\n\n    {% if not existing_relation %}\n        {#-- The table doesn't already exist, so no grants to copy over --#}\n        {{ return(False) }}\n    {% elif full_refresh_mode %}\n        {#-- The object is being REPLACED -- whether grants are copied over depends on the value of user config --#}\n        {{ return(copy_grants()) }}\n    {% else %}\n        {#-- The table is being merged/upserted/inserted -- grants will be carried over --#}\n        {{ return(True) }}\n    {% endif %}\n\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": { "macros": ["macro.dbt.copy_grants"] },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1665426349.8567622,
      "supported_languages": null
    },
    "macro.dbt.get_show_grant_sql": {
      "unique_id": "macro.dbt.get_show_grant_sql",
      "package_name": "dbt",
      "root_path": "/Users/sung/Desktop/dbt/core/dbt/include/global_project",
      "path": "macros/adapters/apply_grants.sql",
      "original_file_path": "macros/adapters/apply_grants.sql",
      "name": "get_show_grant_sql",
      "macro_sql": "{% macro get_show_grant_sql(relation) %}\n    {{ return(adapter.dispatch(\"get_show_grant_sql\", \"dbt\")(relation)) }}\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": { "macros": ["macro.dbt.default__get_show_grant_sql"] },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1665426349.857292,
      "supported_languages": null
    },
    "macro.dbt.default__get_show_grant_sql": {
      "unique_id": "macro.dbt.default__get_show_grant_sql",
      "package_name": "dbt",
      "root_path": "/Users/sung/Desktop/dbt/core/dbt/include/global_project",
      "path": "macros/adapters/apply_grants.sql",
      "original_file_path": "macros/adapters/apply_grants.sql",
      "name": "default__get_show_grant_sql",
      "macro_sql": "{% macro default__get_show_grant_sql(relation) %}\n    show grants on {{ relation }}\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": { "macros": [] },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1665426349.857547,
      "supported_languages": null
    },
    "macro.dbt.get_grant_sql": {
      "unique_id": "macro.dbt.get_grant_sql",
      "package_name": "dbt",
      "root_path": "/Users/sung/Desktop/dbt/core/dbt/include/global_project",
      "path": "macros/adapters/apply_grants.sql",
      "original_file_path": "macros/adapters/apply_grants.sql",
      "name": "get_grant_sql",
      "macro_sql": "{% macro get_grant_sql(relation, privilege, grantees) %}\n    {{ return(adapter.dispatch('get_grant_sql', 'dbt')(relation, privilege, grantees)) }}\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": { "macros": ["macro.dbt.default__get_grant_sql"] },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1665426349.858155,
      "supported_languages": null
    },
    "macro.dbt.default__get_grant_sql": {
      "unique_id": "macro.dbt.default__get_grant_sql",
      "package_name": "dbt",
      "root_path": "/Users/sung/Desktop/dbt/core/dbt/include/global_project",
      "path": "macros/adapters/apply_grants.sql",
      "original_file_path": "macros/adapters/apply_grants.sql",
      "name": "default__get_grant_sql",
      "macro_sql": "\n\n{%- macro default__get_grant_sql(relation, privilege, grantees) -%}\n    grant {{ privilege }} on {{ relation }} to {{ grantees | join(', ') }}\n{%- endmacro -%}\n\n\n",
      "resource_type": "macro",
      "tags": [],
      "depends_on": { "macros": [] },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1665426349.8586419,
      "supported_languages": null
    },
    "macro.dbt.get_revoke_sql": {
      "unique_id": "macro.dbt.get_revoke_sql",
      "package_name": "dbt",
      "root_path": "/Users/sung/Desktop/dbt/core/dbt/include/global_project",
      "path": "macros/adapters/apply_grants.sql",
      "original_file_path": "macros/adapters/apply_grants.sql",
      "name": "get_revoke_sql",
      "macro_sql": "{% macro get_revoke_sql(relation, privilege, grantees) %}\n    {{ return(adapter.dispatch('get_revoke_sql', 'dbt')(relation, privilege, grantees)) }}\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": { "macros": ["macro.dbt.default__get_revoke_sql"] },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1665426349.859336,
      "supported_languages": null
    },
    "macro.dbt.default__get_revoke_sql": {
      "unique_id": "macro.dbt.default__get_revoke_sql",
      "package_name": "dbt",
      "root_path": "/Users/sung/Desktop/dbt/core/dbt/include/global_project",
      "path": "macros/adapters/apply_grants.sql",
      "original_file_path": "macros/adapters/apply_grants.sql",
      "name": "default__get_revoke_sql",
      "macro_sql": "\n\n{%- macro default__get_revoke_sql(relation, privilege, grantees) -%}\n    revoke {{ privilege }} on {{ relation }} from {{ grantees | join(', ') }}\n{%- endmacro -%}\n\n\n",
      "resource_type": "macro",
      "tags": [],
      "depends_on": { "macros": [] },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1665426349.860241,
      "supported_languages": null
    },
    "macro.dbt.get_dcl_statement_list": {
      "unique_id": "macro.dbt.get_dcl_statement_list",
      "package_name": "dbt",
      "root_path": "/Users/sung/Desktop/dbt/core/dbt/include/global_project",
      "path": "macros/adapters/apply_grants.sql",
      "original_file_path": "macros/adapters/apply_grants.sql",
      "name": "get_dcl_statement_list",
      "macro_sql": "{% macro get_dcl_statement_list(relation, grant_config, get_dcl_macro) %}\n    {{ return(adapter.dispatch('get_dcl_statement_list', 'dbt')(relation, grant_config, get_dcl_macro)) }}\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": { "macros": ["macro.dbt.default__get_dcl_statement_list"] },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1665426349.8610728,
      "supported_languages": null
    },
    "macro.dbt.default__get_dcl_statement_list": {
      "unique_id": "macro.dbt.default__get_dcl_statement_list",
      "package_name": "dbt",
      "root_path": "/Users/sung/Desktop/dbt/core/dbt/include/global_project",
      "path": "macros/adapters/apply_grants.sql",
      "original_file_path": "macros/adapters/apply_grants.sql",
      "name": "default__get_dcl_statement_list",
      "macro_sql": "\n\n{%- macro default__get_dcl_statement_list(relation, grant_config, get_dcl_macro) -%}\n    {#\n      -- Unpack grant_config into specific privileges and the set of users who need them granted/revoked.\n      -- Depending on whether this database supports multiple grantees per statement, pass in the list of\n      -- all grantees per privilege, or (if not) template one statement per privilege-grantee pair.\n      -- `get_dcl_macro` will be either `get_grant_sql` or `get_revoke_sql`\n    #}\n    {%- set dcl_statements = [] -%}\n    {%- for privilege, grantees in grant_config.items() %}\n        {%- if support_multiple_grantees_per_dcl_statement() and grantees -%}\n          {%- set dcl = get_dcl_macro(relation, privilege, grantees) -%}\n          {%- do dcl_statements.append(dcl) -%}\n        {%- else -%}\n          {%- for grantee in grantees -%}\n              {% set dcl = get_dcl_macro(relation, privilege, [grantee]) %}\n              {%- do dcl_statements.append(dcl) -%}\n          {% endfor -%}\n        {%- endif -%}\n    {%- endfor -%}\n    {{ return(dcl_statements) }}\n{%- endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": ["macro.dbt.support_multiple_grantees_per_dcl_statement"]
      },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1665426349.863263,
      "supported_languages": null
    },
    "macro.dbt.call_dcl_statements": {
      "unique_id": "macro.dbt.call_dcl_statements",
      "package_name": "dbt",
      "root_path": "/Users/sung/Desktop/dbt/core/dbt/include/global_project",
      "path": "macros/adapters/apply_grants.sql",
      "original_file_path": "macros/adapters/apply_grants.sql",
      "name": "call_dcl_statements",
      "macro_sql": "{% macro call_dcl_statements(dcl_statement_list) %}\n    {{ return(adapter.dispatch(\"call_dcl_statements\", \"dbt\")(dcl_statement_list)) }}\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": { "macros": ["macro.dbt.default__call_dcl_statements"] },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1665426349.863803,
      "supported_languages": null
    },
    "macro.dbt.default__call_dcl_statements": {
      "unique_id": "macro.dbt.default__call_dcl_statements",
      "package_name": "dbt",
      "root_path": "/Users/sung/Desktop/dbt/core/dbt/include/global_project",
      "path": "macros/adapters/apply_grants.sql",
      "original_file_path": "macros/adapters/apply_grants.sql",
      "name": "default__call_dcl_statements",
      "macro_sql": "{% macro default__call_dcl_statements(dcl_statement_list) %}\n    {#\n      -- By default, supply all grant + revoke statements in a single semicolon-separated block,\n      -- so that they're all processed together.\n\n      -- Some databases do not support this. Those adapters will need to override this macro\n      -- to run each statement individually.\n    #}\n    {% call statement('grants') %}\n        {% for dcl_statement in dcl_statement_list %}\n            {{ dcl_statement }};\n        {% endfor %}\n    {% endcall %}\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": { "macros": ["macro.dbt.statement"] },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1665426349.864414,
      "supported_languages": null
    },
    "macro.dbt.apply_grants": {
      "unique_id": "macro.dbt.apply_grants",
      "package_name": "dbt",
      "root_path": "/Users/sung/Desktop/dbt/core/dbt/include/global_project",
      "path": "macros/adapters/apply_grants.sql",
      "original_file_path": "macros/adapters/apply_grants.sql",
      "name": "apply_grants",
      "macro_sql": "{% macro apply_grants(relation, grant_config, should_revoke) %}\n    {{ return(adapter.dispatch(\"apply_grants\", \"dbt\")(relation, grant_config, should_revoke)) }}\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": { "macros": ["macro.dbt.default__apply_grants"] },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1665426349.864956,
      "supported_languages": null
    },
    "macro.dbt.default__apply_grants": {
      "unique_id": "macro.dbt.default__apply_grants",
      "package_name": "dbt",
      "root_path": "/Users/sung/Desktop/dbt/core/dbt/include/global_project",
      "path": "macros/adapters/apply_grants.sql",
      "original_file_path": "macros/adapters/apply_grants.sql",
      "name": "default__apply_grants",
      "macro_sql": "{% macro default__apply_grants(relation, grant_config, should_revoke=True) %}\n    {#-- If grant_config is {} or None, this is a no-op --#}\n    {% if grant_config %}\n        {% if should_revoke %}\n            {#-- We think previous grants may have carried over --#}\n            {#-- Show current grants and calculate diffs --#}\n            {% set current_grants_table = run_query(get_show_grant_sql(relation)) %}\n            {% set current_grants_dict = adapter.standardize_grants_dict(current_grants_table) %}\n            {% set needs_granting = diff_of_two_dicts(grant_config, current_grants_dict) %}\n            {% set needs_revoking = diff_of_two_dicts(current_grants_dict, grant_config) %}\n            {% if not (needs_granting or needs_revoking) %}\n                {{ log('On ' ~ relation ~': All grants are in place, no revocation or granting needed.')}}\n            {% endif %}\n        {% else %}\n            {#-- We don't think there's any chance of previous grants having carried over. --#}\n            {#-- Jump straight to granting what the user has configured. --#}\n            {% set needs_revoking = {} %}\n            {% set needs_granting = grant_config %}\n        {% endif %}\n        {% if needs_granting or needs_revoking %}\n            {% set revoke_statement_list = get_dcl_statement_list(relation, needs_revoking, get_revoke_sql) %}\n            {% set grant_statement_list = get_dcl_statement_list(relation, needs_granting, get_grant_sql) %}\n            {% set dcl_statement_list = revoke_statement_list + grant_statement_list %}\n            {% if dcl_statement_list %}\n                {{ call_dcl_statements(dcl_statement_list) }}\n            {% endif %}\n        {% endif %}\n    {% endif %}\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": [
          "macro.dbt.run_query",
          "macro.dbt.get_show_grant_sql",
          "macro.dbt.get_dcl_statement_list",
          "macro.dbt.call_dcl_statements"
        ]
      },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1665426349.867696,
      "supported_languages": null
    },
    "macro.dbt.alter_column_comment": {
      "unique_id": "macro.dbt.alter_column_comment",
      "package_name": "dbt",
      "root_path": "/Users/sung/Desktop/dbt/core/dbt/include/global_project",
      "path": "macros/adapters/persist_docs.sql",
      "original_file_path": "macros/adapters/persist_docs.sql",
      "name": "alter_column_comment",
      "macro_sql": "{% macro alter_column_comment(relation, column_dict) -%}\n  {{ return(adapter.dispatch('alter_column_comment', 'dbt')(relation, column_dict)) }}\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": ["macro.dbt_snowflake.snowflake__alter_column_comment"]
      },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1665426349.8693929,
      "supported_languages": null
    },
    "macro.dbt.default__alter_column_comment": {
      "unique_id": "macro.dbt.default__alter_column_comment",
      "package_name": "dbt",
      "root_path": "/Users/sung/Desktop/dbt/core/dbt/include/global_project",
      "path": "macros/adapters/persist_docs.sql",
      "original_file_path": "macros/adapters/persist_docs.sql",
      "name": "default__alter_column_comment",
      "macro_sql": "{% macro default__alter_column_comment(relation, column_dict) -%}\n  {{ exceptions.raise_not_implemented(\n    'alter_column_comment macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": { "macros": [] },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1665426349.86983,
      "supported_languages": null
    },
    "macro.dbt.alter_relation_comment": {
      "unique_id": "macro.dbt.alter_relation_comment",
      "package_name": "dbt",
      "root_path": "/Users/sung/Desktop/dbt/core/dbt/include/global_project",
      "path": "macros/adapters/persist_docs.sql",
      "original_file_path": "macros/adapters/persist_docs.sql",
      "name": "alter_relation_comment",
      "macro_sql": "{% macro alter_relation_comment(relation, relation_comment) -%}\n  {{ return(adapter.dispatch('alter_relation_comment', 'dbt')(relation, relation_comment)) }}\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": ["macro.dbt_snowflake.snowflake__alter_relation_comment"]
      },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1665426349.870304,
      "supported_languages": null
    },
    "macro.dbt.default__alter_relation_comment": {
      "unique_id": "macro.dbt.default__alter_relation_comment",
      "package_name": "dbt",
      "root_path": "/Users/sung/Desktop/dbt/core/dbt/include/global_project",
      "path": "macros/adapters/persist_docs.sql",
      "original_file_path": "macros/adapters/persist_docs.sql",
      "name": "default__alter_relation_comment",
      "macro_sql": "{% macro default__alter_relation_comment(relation, relation_comment) -%}\n  {{ exceptions.raise_not_implemented(\n    'alter_relation_comment macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": { "macros": [] },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1665426349.870694,
      "supported_languages": null
    },
    "macro.dbt.persist_docs": {
      "unique_id": "macro.dbt.persist_docs",
      "package_name": "dbt",
      "root_path": "/Users/sung/Desktop/dbt/core/dbt/include/global_project",
      "path": "macros/adapters/persist_docs.sql",
      "original_file_path": "macros/adapters/persist_docs.sql",
      "name": "persist_docs",
      "macro_sql": "{% macro persist_docs(relation, model, for_relation=true, for_columns=true) -%}\n  {{ return(adapter.dispatch('persist_docs', 'dbt')(relation, model, for_relation, for_columns)) }}\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": { "macros": ["macro.dbt.default__persist_docs"] },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1665426349.87131,
      "supported_languages": null
    },
    "macro.dbt.default__persist_docs": {
      "unique_id": "macro.dbt.default__persist_docs",
      "package_name": "dbt",
      "root_path": "/Users/sung/Desktop/dbt/core/dbt/include/global_project",
      "path": "macros/adapters/persist_docs.sql",
      "original_file_path": "macros/adapters/persist_docs.sql",
      "name": "default__persist_docs",
      "macro_sql": "{% macro default__persist_docs(relation, model, for_relation, for_columns) -%}\n  {% if for_relation and config.persist_relation_docs() and model.description %}\n    {% do run_query(alter_relation_comment(relation, model.description)) %}\n  {% endif %}\n\n  {% if for_columns and config.persist_column_docs() and model.columns %}\n    {% do run_query(alter_column_comment(relation, model.columns)) %}\n  {% endif %}\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": [
          "macro.dbt.run_query",
          "macro.dbt.alter_relation_comment",
          "macro.dbt.alter_column_comment"
        ]
      },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1665426349.87259,
      "supported_languages": null
    },
    "macro.dbt.get_catalog": {
      "unique_id": "macro.dbt.get_catalog",
      "package_name": "dbt",
      "root_path": "/Users/sung/Desktop/dbt/core/dbt/include/global_project",
      "path": "macros/adapters/metadata.sql",
      "original_file_path": "macros/adapters/metadata.sql",
      "name": "get_catalog",
      "macro_sql": "{% macro get_catalog(information_schema, schemas) -%}\n  {{ return(adapter.dispatch('get_catalog', 'dbt')(information_schema, schemas)) }}\n{%- endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": ["macro.dbt_snowflake.snowflake__get_catalog"]
      },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1665426349.876085,
      "supported_languages": null
    },
    "macro.dbt.default__get_catalog": {
      "unique_id": "macro.dbt.default__get_catalog",
      "package_name": "dbt",
      "root_path": "/Users/sung/Desktop/dbt/core/dbt/include/global_project",
      "path": "macros/adapters/metadata.sql",
      "original_file_path": "macros/adapters/metadata.sql",
      "name": "default__get_catalog",
      "macro_sql": "{% macro default__get_catalog(information_schema, schemas) -%}\n\n  {% set typename = adapter.type() %}\n  {% set msg -%}\n    get_catalog not implemented for {{ typename }}\n  {%- endset %}\n\n  {{ exceptions.raise_compiler_error(msg) }}\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": { "macros": [] },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1665426349.877033,
      "supported_languages": null
    },
    "macro.dbt.information_schema_name": {
      "unique_id": "macro.dbt.information_schema_name",
      "package_name": "dbt",
      "root_path": "/Users/sung/Desktop/dbt/core/dbt/include/global_project",
      "path": "macros/adapters/metadata.sql",
      "original_file_path": "macros/adapters/metadata.sql",
      "name": "information_schema_name",
      "macro_sql": "{% macro information_schema_name(database) %}\n  {{ return(adapter.dispatch('information_schema_name', 'dbt')(database)) }}\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": ["macro.dbt.default__information_schema_name"]
      },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1665426349.877834,
      "supported_languages": null
    },
    "macro.dbt.default__information_schema_name": {
      "unique_id": "macro.dbt.default__information_schema_name",
      "package_name": "dbt",
      "root_path": "/Users/sung/Desktop/dbt/core/dbt/include/global_project",
      "path": "macros/adapters/metadata.sql",
      "original_file_path": "macros/adapters/metadata.sql",
      "name": "default__information_schema_name",
      "macro_sql": "{% macro default__information_schema_name(database) -%}\n  {%- if database -%}\n    {{ database }}.INFORMATION_SCHEMA\n  {%- else -%}\n    INFORMATION_SCHEMA\n  {%- endif -%}\n{%- endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": { "macros": [] },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1665426349.878314,
      "supported_languages": null
    },
    "macro.dbt.list_schemas": {
      "unique_id": "macro.dbt.list_schemas",
      "package_name": "dbt",
      "root_path": "/Users/sung/Desktop/dbt/core/dbt/include/global_project",
      "path": "macros/adapters/metadata.sql",
      "original_file_path": "macros/adapters/metadata.sql",
      "name": "list_schemas",
      "macro_sql": "{% macro list_schemas(database) -%}\n  {{ return(adapter.dispatch('list_schemas', 'dbt')(database)) }}\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": ["macro.dbt_snowflake.snowflake__list_schemas"]
      },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1665426349.878756,
      "supported_languages": null
    },
    "macro.dbt.default__list_schemas": {
      "unique_id": "macro.dbt.default__list_schemas",
      "package_name": "dbt",
      "root_path": "/Users/sung/Desktop/dbt/core/dbt/include/global_project",
      "path": "macros/adapters/metadata.sql",
      "original_file_path": "macros/adapters/metadata.sql",
      "name": "default__list_schemas",
      "macro_sql": "{% macro default__list_schemas(database) -%}\n  {% set sql %}\n    select distinct schema_name\n    from {{ information_schema_name(database) }}.SCHEMATA\n    where catalog_name ilike '{{ database }}'\n  {% endset %}\n  {{ return(run_query(sql)) }}\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": ["macro.dbt.information_schema_name", "macro.dbt.run_query"]
      },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1665426349.879455,
      "supported_languages": null
    },
    "macro.dbt.check_schema_exists": {
      "unique_id": "macro.dbt.check_schema_exists",
      "package_name": "dbt",
      "root_path": "/Users/sung/Desktop/dbt/core/dbt/include/global_project",
      "path": "macros/adapters/metadata.sql",
      "original_file_path": "macros/adapters/metadata.sql",
      "name": "check_schema_exists",
      "macro_sql": "{% macro check_schema_exists(information_schema, schema) -%}\n  {{ return(adapter.dispatch('check_schema_exists', 'dbt')(information_schema, schema)) }}\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": ["macro.dbt_snowflake.snowflake__check_schema_exists"]
      },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1665426349.879971,
      "supported_languages": null
    },
    "macro.dbt.default__check_schema_exists": {
      "unique_id": "macro.dbt.default__check_schema_exists",
      "package_name": "dbt",
      "root_path": "/Users/sung/Desktop/dbt/core/dbt/include/global_project",
      "path": "macros/adapters/metadata.sql",
      "original_file_path": "macros/adapters/metadata.sql",
      "name": "default__check_schema_exists",
      "macro_sql": "{% macro default__check_schema_exists(information_schema, schema) -%}\n  {% set sql -%}\n        select count(*)\n        from {{ information_schema.replace(information_schema_view='SCHEMATA') }}\n        where catalog_name='{{ information_schema.database }}'\n          and schema_name='{{ schema }}'\n  {%- endset %}\n  {{ return(run_query(sql)) }}\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": ["macro.dbt_utils.replace", "macro.dbt.run_query"]
      },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1665426349.88096,
      "supported_languages": null
    },
    "macro.dbt.list_relations_without_caching": {
      "unique_id": "macro.dbt.list_relations_without_caching",
      "package_name": "dbt",
      "root_path": "/Users/sung/Desktop/dbt/core/dbt/include/global_project",
      "path": "macros/adapters/metadata.sql",
      "original_file_path": "macros/adapters/metadata.sql",
      "name": "list_relations_without_caching",
      "macro_sql": "{% macro list_relations_without_caching(schema_relation) %}\n  {{ return(adapter.dispatch('list_relations_without_caching', 'dbt')(schema_relation)) }}\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": [
          "macro.dbt_snowflake.snowflake__list_relations_without_caching"
        ]
      },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1665426349.881431,
      "supported_languages": null
    },
    "macro.dbt.default__list_relations_without_caching": {
      "unique_id": "macro.dbt.default__list_relations_without_caching",
      "package_name": "dbt",
      "root_path": "/Users/sung/Desktop/dbt/core/dbt/include/global_project",
      "path": "macros/adapters/metadata.sql",
      "original_file_path": "macros/adapters/metadata.sql",
      "name": "default__list_relations_without_caching",
      "macro_sql": "{% macro default__list_relations_without_caching(schema_relation) %}\n  {{ exceptions.raise_not_implemented(\n    'list_relations_without_caching macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": { "macros": [] },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1665426349.881821,
      "supported_languages": null
    },
    "macro.dbt.get_columns_in_relation": {
      "unique_id": "macro.dbt.get_columns_in_relation",
      "package_name": "dbt",
      "root_path": "/Users/sung/Desktop/dbt/core/dbt/include/global_project",
      "path": "macros/adapters/columns.sql",
      "original_file_path": "macros/adapters/columns.sql",
      "name": "get_columns_in_relation",
      "macro_sql": "{% macro get_columns_in_relation(relation) -%}\n  {{ return(adapter.dispatch('get_columns_in_relation', 'dbt')(relation)) }}\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": ["macro.dbt_snowflake.snowflake__get_columns_in_relation"]
      },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1665426349.8853061,
      "supported_languages": null
    },
    "macro.dbt.default__get_columns_in_relation": {
      "unique_id": "macro.dbt.default__get_columns_in_relation",
      "package_name": "dbt",
      "root_path": "/Users/sung/Desktop/dbt/core/dbt/include/global_project",
      "path": "macros/adapters/columns.sql",
      "original_file_path": "macros/adapters/columns.sql",
      "name": "default__get_columns_in_relation",
      "macro_sql": "{% macro default__get_columns_in_relation(relation) -%}\n  {{ exceptions.raise_not_implemented(\n    'get_columns_in_relation macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": { "macros": [] },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1665426349.8857348,
      "supported_languages": null
    },
    "macro.dbt.sql_convert_columns_in_relation": {
      "unique_id": "macro.dbt.sql_convert_columns_in_relation",
      "package_name": "dbt",
      "root_path": "/Users/sung/Desktop/dbt/core/dbt/include/global_project",
      "path": "macros/adapters/columns.sql",
      "original_file_path": "macros/adapters/columns.sql",
      "name": "sql_convert_columns_in_relation",
      "macro_sql": "{% macro sql_convert_columns_in_relation(table) -%}\n  {% set columns = [] %}\n  {% for row in table %}\n    {% do columns.append(api.Column(*row)) %}\n  {% endfor %}\n  {{ return(columns) }}\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": { "macros": [] },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1665426349.886519,
      "supported_languages": null
    },
    "macro.dbt.get_columns_in_query": {
      "unique_id": "macro.dbt.get_columns_in_query",
      "package_name": "dbt",
      "root_path": "/Users/sung/Desktop/dbt/core/dbt/include/global_project",
      "path": "macros/adapters/columns.sql",
      "original_file_path": "macros/adapters/columns.sql",
      "name": "get_columns_in_query",
      "macro_sql": "{% macro get_columns_in_query(select_sql) -%}\n  {{ return(adapter.dispatch('get_columns_in_query', 'dbt')(select_sql)) }}\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": { "macros": ["macro.dbt.default__get_columns_in_query"] },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1665426349.887363,
      "supported_languages": null
    },
    "macro.dbt.default__get_columns_in_query": {
      "unique_id": "macro.dbt.default__get_columns_in_query",
      "package_name": "dbt",
      "root_path": "/Users/sung/Desktop/dbt/core/dbt/include/global_project",
      "path": "macros/adapters/columns.sql",
      "original_file_path": "macros/adapters/columns.sql",
      "name": "default__get_columns_in_query",
      "macro_sql": "{% macro default__get_columns_in_query(select_sql) %}\n    {% call statement('get_columns_in_query', fetch_result=True, auto_begin=False) -%}\n        select * from (\n            {{ select_sql }}\n        ) as __dbt_sbq\n        where false\n        limit 0\n    {% endcall %}\n\n    {{ return(load_result('get_columns_in_query').table.columns | map(attribute='name') | list) }}\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": { "macros": ["macro.dbt.statement"] },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1665426349.888194,
      "supported_languages": null
    },
    "macro.dbt.alter_column_type": {
      "unique_id": "macro.dbt.alter_column_type",
      "package_name": "dbt",
      "root_path": "/Users/sung/Desktop/dbt/core/dbt/include/global_project",
      "path": "macros/adapters/columns.sql",
      "original_file_path": "macros/adapters/columns.sql",
      "name": "alter_column_type",
      "macro_sql": "{% macro alter_column_type(relation, column_name, new_column_type) -%}\n  {{ return(adapter.dispatch('alter_column_type', 'dbt')(relation, column_name, new_column_type)) }}\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": ["macro.dbt_snowflake.snowflake__alter_column_type"]
      },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1665426349.8887239,
      "supported_languages": null
    },
    "macro.dbt.default__alter_column_type": {
      "unique_id": "macro.dbt.default__alter_column_type",
      "package_name": "dbt",
      "root_path": "/Users/sung/Desktop/dbt/core/dbt/include/global_project",
      "path": "macros/adapters/columns.sql",
      "original_file_path": "macros/adapters/columns.sql",
      "name": "default__alter_column_type",
      "macro_sql": "{% macro default__alter_column_type(relation, column_name, new_column_type) -%}\n  {#\n    1. Create a new column (w/ temp name and correct type)\n    2. Copy data over to it\n    3. Drop the existing column (cascade!)\n    4. Rename the new column to existing column\n  #}\n  {%- set tmp_column = column_name + \"__dbt_alter\" -%}\n\n  {% call statement('alter_column_type') %}\n    alter table {{ relation }} add column {{ adapter.quote(tmp_column) }} {{ new_column_type }};\n    update {{ relation }} set {{ adapter.quote(tmp_column) }} = {{ adapter.quote(column_name) }};\n    alter table {{ relation }} drop column {{ adapter.quote(column_name) }} cascade;\n    alter table {{ relation }} rename column {{ adapter.quote(tmp_column) }} to {{ adapter.quote(column_name) }}\n  {% endcall %}\n\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": { "macros": ["macro.dbt.statement"] },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1665426349.890284,
      "supported_languages": null
    },
    "macro.dbt.alter_relation_add_remove_columns": {
      "unique_id": "macro.dbt.alter_relation_add_remove_columns",
      "package_name": "dbt",
      "root_path": "/Users/sung/Desktop/dbt/core/dbt/include/global_project",
      "path": "macros/adapters/columns.sql",
      "original_file_path": "macros/adapters/columns.sql",
      "name": "alter_relation_add_remove_columns",
      "macro_sql": "{% macro alter_relation_add_remove_columns(relation, add_columns = none, remove_columns = none) -%}\n  {{ return(adapter.dispatch('alter_relation_add_remove_columns', 'dbt')(relation, add_columns, remove_columns)) }}\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": [
          "macro.dbt_snowflake.snowflake__alter_relation_add_remove_columns"
        ]
      },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1665426349.891026,
      "supported_languages": null
    },
    "macro.dbt.default__alter_relation_add_remove_columns": {
      "unique_id": "macro.dbt.default__alter_relation_add_remove_columns",
      "package_name": "dbt",
      "root_path": "/Users/sung/Desktop/dbt/core/dbt/include/global_project",
      "path": "macros/adapters/columns.sql",
      "original_file_path": "macros/adapters/columns.sql",
      "name": "default__alter_relation_add_remove_columns",
      "macro_sql": "{% macro default__alter_relation_add_remove_columns(relation, add_columns, remove_columns) %}\n\n  {% if add_columns is none %}\n    {% set add_columns = [] %}\n  {% endif %}\n  {% if remove_columns is none %}\n    {% set remove_columns = [] %}\n  {% endif %}\n\n  {% set sql -%}\n\n     alter {{ relation.type }} {{ relation }}\n\n            {% for column in add_columns %}\n               add column {{ column.name }} {{ column.data_type }}{{ ',' if not loop.last }}\n            {% endfor %}{{ ',' if add_columns and remove_columns }}\n\n            {% for column in remove_columns %}\n                drop column {{ column.name }}{{ ',' if not loop.last }}\n            {% endfor %}\n\n  {%- endset -%}\n\n  {% do run_query(sql) %}\n\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": { "macros": ["macro.dbt.run_query"] },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1665426349.893116,
      "supported_languages": null
    },
    "macro.dbt.build_ref_function": {
      "unique_id": "macro.dbt.build_ref_function",
      "package_name": "dbt",
      "root_path": "/Users/sung/Desktop/dbt/core/dbt/include/global_project",
      "path": "macros/python_model/python.sql",
      "original_file_path": "macros/python_model/python.sql",
      "name": "build_ref_function",
      "macro_sql": "{% macro build_ref_function(model) %}\n\n    {%- set ref_dict = {} -%}\n    {%- for _ref in model.refs -%}\n        {%- set resolved = ref(*_ref) -%}\n        {%- do ref_dict.update({_ref | join(\".\"): resolved.quote(database=False, schema=False, identifier=False) | string}) -%}\n    {%- endfor -%}\n\ndef ref(*args,dbt_load_df_function):\n    refs = {{ ref_dict | tojson }}\n    key = \".\".join(args)\n    return dbt_load_df_function(refs[key])\n\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": { "macros": [] },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1665426349.8967118,
      "supported_languages": null
    },
    "macro.dbt.build_source_function": {
      "unique_id": "macro.dbt.build_source_function",
      "package_name": "dbt",
      "root_path": "/Users/sung/Desktop/dbt/core/dbt/include/global_project",
      "path": "macros/python_model/python.sql",
      "original_file_path": "macros/python_model/python.sql",
      "name": "build_source_function",
      "macro_sql": "{% macro build_source_function(model) %}\n\n    {%- set source_dict = {} -%}\n    {%- for _source in model.sources -%}\n        {%- set resolved = source(*_source) -%}\n        {%- do source_dict.update({_source | join(\".\"): resolved.quote(database=False, schema=False, identifier=False) | string}) -%}\n    {%- endfor -%}\n\ndef source(*args, dbt_load_df_function):\n    sources = {{ source_dict | tojson }}\n    key = \".\".join(args)\n    return dbt_load_df_function(sources[key])\n\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": { "macros": [] },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1665426349.8981068,
      "supported_languages": null
    },
    "macro.dbt.build_config_dict": {
      "unique_id": "macro.dbt.build_config_dict",
      "package_name": "dbt",
      "root_path": "/Users/sung/Desktop/dbt/core/dbt/include/global_project",
      "path": "macros/python_model/python.sql",
      "original_file_path": "macros/python_model/python.sql",
      "name": "build_config_dict",
      "macro_sql": "{% macro build_config_dict(model) %}\n    {%- set config_dict = {} -%}\n    {%- for key in model.config.config_keys_used -%}\n        {# weird type testing with enum, would be much easier to write this logic in Python! #}\n        {%- if key == 'language' -%}\n          {%- set value = 'python' -%}\n        {%- endif -%}\n        {%- set value = model.config[key] -%}\n        {%- do config_dict.update({key: value}) -%}\n    {%- endfor -%}\nconfig_dict = {{ config_dict }}\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": { "macros": [] },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1665426349.899432,
      "supported_languages": null
    },
    "macro.dbt.py_script_postfix": {
      "unique_id": "macro.dbt.py_script_postfix",
      "package_name": "dbt",
      "root_path": "/Users/sung/Desktop/dbt/core/dbt/include/global_project",
      "path": "macros/python_model/python.sql",
      "original_file_path": "macros/python_model/python.sql",
      "name": "py_script_postfix",
      "macro_sql": "{% macro py_script_postfix(model) %}\n# This part is user provided model code\n# you will need to copy the next section to run the code\n# COMMAND ----------\n# this part is dbt logic for get ref work, do not modify\n\n{{ build_ref_function(model ) }}\n{{ build_source_function(model ) }}\n{{ build_config_dict(model) }}\n\nclass config:\n    def __init__(self, *args, **kwargs):\n        pass\n\n    @staticmethod\n    def get(key, default=None):\n        return config_dict.get(key, default)\n\nclass this:\n    \"\"\"dbt.this() or dbt.this.identifier\"\"\"\n    database = '{{ this.database }}'\n    schema = '{{ this.schema }}'\n    identifier = '{{ this.identifier }}'\n    def __repr__(self):\n        return '{{ this }}'\n\n\nclass dbtObj:\n    def __init__(self, load_df_function) -> None:\n        self.source = lambda *args: source(*args, dbt_load_df_function=load_df_function)\n        self.ref = lambda *args: ref(*args, dbt_load_df_function=load_df_function)\n        self.config = config\n        self.this = this()\n        self.is_incremental = {{ is_incremental() }}\n\n# COMMAND ----------\n{{py_script_comment()}}\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": [
          "macro.dbt.build_ref_function",
          "macro.dbt.build_source_function",
          "macro.dbt.build_config_dict",
          "macro.dbt.is_incremental",
          "macro.dbt.py_script_comment"
        ]
      },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1665426349.900525,
      "supported_languages": null
    },
    "macro.dbt.py_script_comment": {
      "unique_id": "macro.dbt.py_script_comment",
      "package_name": "dbt",
      "root_path": "/Users/sung/Desktop/dbt/core/dbt/include/global_project",
      "path": "macros/python_model/python.sql",
      "original_file_path": "macros/python_model/python.sql",
      "name": "py_script_comment",
      "macro_sql": "{%macro py_script_comment()%}\n{%endmacro%}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": { "macros": [] },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1665426349.9007602,
      "supported_languages": null
    },
    "macro.dbt.test_unique": {
      "unique_id": "macro.dbt.test_unique",
      "package_name": "dbt",
      "root_path": "/Users/sung/Desktop/dbt/core/dbt/include/global_project",
      "path": "tests/generic/builtin.sql",
      "original_file_path": "tests/generic/builtin.sql",
      "name": "test_unique",
      "macro_sql": "{% test unique(model, column_name) %}\n    {% set macro = adapter.dispatch('test_unique', 'dbt') %}\n    {{ macro(model, column_name) }}\n{% endtest %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": { "macros": ["macro.dbt.default__test_unique"] },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1665426349.902229,
      "supported_languages": null
    },
    "macro.dbt.test_not_null": {
      "unique_id": "macro.dbt.test_not_null",
      "package_name": "dbt",
      "root_path": "/Users/sung/Desktop/dbt/core/dbt/include/global_project",
      "path": "tests/generic/builtin.sql",
      "original_file_path": "tests/generic/builtin.sql",
      "name": "test_not_null",
      "macro_sql": "{% test not_null(model, column_name) %}\n    {% set macro = adapter.dispatch('test_not_null', 'dbt') %}\n    {{ macro(model, column_name) }}\n{% endtest %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": { "macros": ["macro.dbt.default__test_not_null"] },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1665426349.902965,
      "supported_languages": null
    },
    "macro.dbt.test_accepted_values": {
      "unique_id": "macro.dbt.test_accepted_values",
      "package_name": "dbt",
      "root_path": "/Users/sung/Desktop/dbt/core/dbt/include/global_project",
      "path": "tests/generic/builtin.sql",
      "original_file_path": "tests/generic/builtin.sql",
      "name": "test_accepted_values",
      "macro_sql": "{% test accepted_values(model, column_name, values, quote=True) %}\n    {% set macro = adapter.dispatch('test_accepted_values', 'dbt') %}\n    {{ macro(model, column_name, values, quote) }}\n{% endtest %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": { "macros": ["macro.dbt.default__test_accepted_values"] },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1665426349.903952,
      "supported_languages": null
    },
    "macro.dbt.test_relationships": {
      "unique_id": "macro.dbt.test_relationships",
      "package_name": "dbt",
      "root_path": "/Users/sung/Desktop/dbt/core/dbt/include/global_project",
      "path": "tests/generic/builtin.sql",
      "original_file_path": "tests/generic/builtin.sql",
      "name": "test_relationships",
      "macro_sql": "{% test relationships(model, column_name, to, field) %}\n    {% set macro = adapter.dispatch('test_relationships', 'dbt') %}\n    {{ macro(model, column_name, to, field) }}\n{% endtest %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": { "macros": ["macro.dbt.default__test_relationships"] },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1665426349.90495,
      "supported_languages": null
    },
    "macro.dbt_utils.except": {
      "unique_id": "macro.dbt_utils.except",
      "package_name": "dbt_utils",
      "root_path": "/Users/sung/Desktop/dbt/dbt_env/dbt_packages/dbt_utils",
      "path": "macros/cross_db_utils/except.sql",
      "original_file_path": "macros/cross_db_utils/except.sql",
      "name": "except",
      "macro_sql": "{% macro except() %}\n  {{ return(adapter.dispatch('except', 'dbt_utils')()) }}\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": { "macros": ["macro.dbt_utils.default__except"] },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1665426349.905924,
      "supported_languages": null
    },
    "macro.dbt_utils.default__except": {
      "unique_id": "macro.dbt_utils.default__except",
      "package_name": "dbt_utils",
      "root_path": "/Users/sung/Desktop/dbt/dbt_env/dbt_packages/dbt_utils",
      "path": "macros/cross_db_utils/except.sql",
      "original_file_path": "macros/cross_db_utils/except.sql",
      "name": "default__except",
      "macro_sql": "{% macro default__except() %}\n\n    except\n\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": { "macros": [] },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1665426349.906132,
      "supported_languages": null
    },
    "macro.dbt_utils.bigquery__except": {
      "unique_id": "macro.dbt_utils.bigquery__except",
      "package_name": "dbt_utils",
      "root_path": "/Users/sung/Desktop/dbt/dbt_env/dbt_packages/dbt_utils",
      "path": "macros/cross_db_utils/except.sql",
      "original_file_path": "macros/cross_db_utils/except.sql",
      "name": "bigquery__except",
      "macro_sql": "{% macro bigquery__except() %}\n\n    except distinct\n\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": { "macros": [] },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1665426349.906312,
      "supported_languages": null
    },
    "macro.dbt_utils.replace": {
      "unique_id": "macro.dbt_utils.replace",
      "package_name": "dbt_utils",
      "root_path": "/Users/sung/Desktop/dbt/dbt_env/dbt_packages/dbt_utils",
      "path": "macros/cross_db_utils/replace.sql",
      "original_file_path": "macros/cross_db_utils/replace.sql",
      "name": "replace",
      "macro_sql": "{% macro replace(field, old_chars, new_chars) -%}\n    {{ return(adapter.dispatch('replace', 'dbt_utils') (field, old_chars, new_chars)) }}\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": { "macros": ["macro.dbt_utils.default__replace"] },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1665426349.907316,
      "supported_languages": null
    },
    "macro.dbt_utils.default__replace": {
      "unique_id": "macro.dbt_utils.default__replace",
      "package_name": "dbt_utils",
      "root_path": "/Users/sung/Desktop/dbt/dbt_env/dbt_packages/dbt_utils",
      "path": "macros/cross_db_utils/replace.sql",
      "original_file_path": "macros/cross_db_utils/replace.sql",
      "name": "default__replace",
      "macro_sql": "{% macro default__replace(field, old_chars, new_chars) %}\n\n    replace(\n        {{ field }},\n        {{ old_chars }},\n        {{ new_chars }}\n    )\n    \n\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": { "macros": [] },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1665426349.9077702,
      "supported_languages": null
    },
    "macro.dbt_utils.concat": {
      "unique_id": "macro.dbt_utils.concat",
      "package_name": "dbt_utils",
      "root_path": "/Users/sung/Desktop/dbt/dbt_env/dbt_packages/dbt_utils",
      "path": "macros/cross_db_utils/concat.sql",
      "original_file_path": "macros/cross_db_utils/concat.sql",
      "name": "concat",
      "macro_sql": "{% macro concat(fields) -%}\n  {{ return(adapter.dispatch('concat', 'dbt_utils')(fields)) }}\n{%- endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": { "macros": ["macro.dbt_utils.default__concat"] },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1665426349.908687,
      "supported_languages": null
    },
    "macro.dbt_utils.default__concat": {
      "unique_id": "macro.dbt_utils.default__concat",
      "package_name": "dbt_utils",
      "root_path": "/Users/sung/Desktop/dbt/dbt_env/dbt_packages/dbt_utils",
      "path": "macros/cross_db_utils/concat.sql",
      "original_file_path": "macros/cross_db_utils/concat.sql",
      "name": "default__concat",
      "macro_sql": "{% macro default__concat(fields) -%}\n    {{ fields|join(' || ') }}\n{%- endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": { "macros": [] },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1665426349.909028,
      "supported_languages": null
    },
    "macro.dbt_utils.type_string": {
      "unique_id": "macro.dbt_utils.type_string",
      "package_name": "dbt_utils",
      "root_path": "/Users/sung/Desktop/dbt/dbt_env/dbt_packages/dbt_utils",
      "path": "macros/cross_db_utils/datatypes.sql",
      "original_file_path": "macros/cross_db_utils/datatypes.sql",
      "name": "type_string",
      "macro_sql": "\n\n{%- macro type_string() -%}\n  {{ return(adapter.dispatch('type_string', 'dbt_utils')()) }}\n{%- endmacro -%}\n\n",
      "resource_type": "macro",
      "tags": [],
      "depends_on": { "macros": ["macro.dbt_utils.snowflake__type_string"] },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1665426349.911199,
      "supported_languages": null
    },
    "macro.dbt_utils.default__type_string": {
      "unique_id": "macro.dbt_utils.default__type_string",
      "package_name": "dbt_utils",
      "root_path": "/Users/sung/Desktop/dbt/dbt_env/dbt_packages/dbt_utils",
      "path": "macros/cross_db_utils/datatypes.sql",
      "original_file_path": "macros/cross_db_utils/datatypes.sql",
      "name": "default__type_string",
      "macro_sql": "{% macro default__type_string() %}\n    string\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": { "macros": [] },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1665426349.911455,
      "supported_languages": null
    },
    "macro.dbt_utils.redshift__type_string": {
      "unique_id": "macro.dbt_utils.redshift__type_string",
      "package_name": "dbt_utils",
      "root_path": "/Users/sung/Desktop/dbt/dbt_env/dbt_packages/dbt_utils",
      "path": "macros/cross_db_utils/datatypes.sql",
      "original_file_path": "macros/cross_db_utils/datatypes.sql",
      "name": "redshift__type_string",
      "macro_sql": "\n\n{%- macro redshift__type_string() -%}\n    varchar\n{%- endmacro -%}\n\n",
      "resource_type": "macro",
      "tags": [],
      "depends_on": { "macros": [] },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1665426349.911851,
      "supported_languages": null
    },
    "macro.dbt_utils.postgres__type_string": {
      "unique_id": "macro.dbt_utils.postgres__type_string",
      "package_name": "dbt_utils",
      "root_path": "/Users/sung/Desktop/dbt/dbt_env/dbt_packages/dbt_utils",
      "path": "macros/cross_db_utils/datatypes.sql",
      "original_file_path": "macros/cross_db_utils/datatypes.sql",
      "name": "postgres__type_string",
      "macro_sql": "{% macro postgres__type_string() %}\n    varchar\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": { "macros": [] },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1665426349.9120388,
      "supported_languages": null
    },
    "macro.dbt_utils.snowflake__type_string": {
      "unique_id": "macro.dbt_utils.snowflake__type_string",
      "package_name": "dbt_utils",
      "root_path": "/Users/sung/Desktop/dbt/dbt_env/dbt_packages/dbt_utils",
      "path": "macros/cross_db_utils/datatypes.sql",
      "original_file_path": "macros/cross_db_utils/datatypes.sql",
      "name": "snowflake__type_string",
      "macro_sql": "{% macro snowflake__type_string() %}\n    varchar\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": { "macros": [] },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1665426349.9122171,
      "supported_languages": null
    },
    "macro.dbt_utils.type_timestamp": {
      "unique_id": "macro.dbt_utils.type_timestamp",
      "package_name": "dbt_utils",
      "root_path": "/Users/sung/Desktop/dbt/dbt_env/dbt_packages/dbt_utils",
      "path": "macros/cross_db_utils/datatypes.sql",
      "original_file_path": "macros/cross_db_utils/datatypes.sql",
      "name": "type_timestamp",
      "macro_sql": "\n\n{%- macro type_timestamp() -%}\n  {{ return(adapter.dispatch('type_timestamp', 'dbt_utils')()) }}\n{%- endmacro -%}\n\n",
      "resource_type": "macro",
      "tags": [],
      "depends_on": { "macros": ["macro.dbt_utils.snowflake__type_timestamp"] },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1665426349.9126039,
      "supported_languages": null
    },
    "macro.dbt_utils.default__type_timestamp": {
      "unique_id": "macro.dbt_utils.default__type_timestamp",
      "package_name": "dbt_utils",
      "root_path": "/Users/sung/Desktop/dbt/dbt_env/dbt_packages/dbt_utils",
      "path": "macros/cross_db_utils/datatypes.sql",
      "original_file_path": "macros/cross_db_utils/datatypes.sql",
      "name": "default__type_timestamp",
      "macro_sql": "{% macro default__type_timestamp() %}\n    timestamp\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": { "macros": [] },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1665426349.912789,
      "supported_languages": null
    },
    "macro.dbt_utils.snowflake__type_timestamp": {
      "unique_id": "macro.dbt_utils.snowflake__type_timestamp",
      "package_name": "dbt_utils",
      "root_path": "/Users/sung/Desktop/dbt/dbt_env/dbt_packages/dbt_utils",
      "path": "macros/cross_db_utils/datatypes.sql",
      "original_file_path": "macros/cross_db_utils/datatypes.sql",
      "name": "snowflake__type_timestamp",
      "macro_sql": "{% macro snowflake__type_timestamp() %}\n    timestamp_ntz\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": { "macros": [] },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1665426349.912967,
      "supported_languages": null
    },
    "macro.dbt_utils.type_float": {
      "unique_id": "macro.dbt_utils.type_float",
      "package_name": "dbt_utils",
      "root_path": "/Users/sung/Desktop/dbt/dbt_env/dbt_packages/dbt_utils",
      "path": "macros/cross_db_utils/datatypes.sql",
      "original_file_path": "macros/cross_db_utils/datatypes.sql",
      "name": "type_float",
      "macro_sql": "\n\n{%- macro type_float() -%}\n  {{ return(adapter.dispatch('type_float', 'dbt_utils')()) }}\n{%- endmacro -%}\n\n",
      "resource_type": "macro",
      "tags": [],
      "depends_on": { "macros": ["macro.dbt_utils.default__type_float"] },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1665426349.913517,
      "supported_languages": null
    },
    "macro.dbt_utils.default__type_float": {
      "unique_id": "macro.dbt_utils.default__type_float",
      "package_name": "dbt_utils",
      "root_path": "/Users/sung/Desktop/dbt/dbt_env/dbt_packages/dbt_utils",
      "path": "macros/cross_db_utils/datatypes.sql",
      "original_file_path": "macros/cross_db_utils/datatypes.sql",
      "name": "default__type_float",
      "macro_sql": "{% macro default__type_float() %}\n    float\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": { "macros": [] },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1665426349.9137092,
      "supported_languages": null
    },
    "macro.dbt_utils.bigquery__type_float": {
      "unique_id": "macro.dbt_utils.bigquery__type_float",
      "package_name": "dbt_utils",
      "root_path": "/Users/sung/Desktop/dbt/dbt_env/dbt_packages/dbt_utils",
      "path": "macros/cross_db_utils/datatypes.sql",
      "original_file_path": "macros/cross_db_utils/datatypes.sql",
      "name": "bigquery__type_float",
      "macro_sql": "{% macro bigquery__type_float() %}\n    float64\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": { "macros": [] },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1665426349.91391,
      "supported_languages": null
    },
    "macro.dbt_utils.type_numeric": {
      "unique_id": "macro.dbt_utils.type_numeric",
      "package_name": "dbt_utils",
      "root_path": "/Users/sung/Desktop/dbt/dbt_env/dbt_packages/dbt_utils",
      "path": "macros/cross_db_utils/datatypes.sql",
      "original_file_path": "macros/cross_db_utils/datatypes.sql",
      "name": "type_numeric",
      "macro_sql": "\n\n{%- macro type_numeric() -%}\n  {{ return(adapter.dispatch('type_numeric', 'dbt_utils')()) }}\n{%- endmacro -%}\n\n",
      "resource_type": "macro",
      "tags": [],
      "depends_on": { "macros": ["macro.dbt_utils.default__type_numeric"] },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1665426349.914283,
      "supported_languages": null
    },
    "macro.dbt_utils.default__type_numeric": {
      "unique_id": "macro.dbt_utils.default__type_numeric",
      "package_name": "dbt_utils",
      "root_path": "/Users/sung/Desktop/dbt/dbt_env/dbt_packages/dbt_utils",
      "path": "macros/cross_db_utils/datatypes.sql",
      "original_file_path": "macros/cross_db_utils/datatypes.sql",
      "name": "default__type_numeric",
      "macro_sql": "{% macro default__type_numeric() %}\n    numeric(28, 6)\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": { "macros": [] },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1665426349.914458,
      "supported_languages": null
    },
    "macro.dbt_utils.bigquery__type_numeric": {
      "unique_id": "macro.dbt_utils.bigquery__type_numeric",
      "package_name": "dbt_utils",
      "root_path": "/Users/sung/Desktop/dbt/dbt_env/dbt_packages/dbt_utils",
      "path": "macros/cross_db_utils/datatypes.sql",
      "original_file_path": "macros/cross_db_utils/datatypes.sql",
      "name": "bigquery__type_numeric",
      "macro_sql": "{% macro bigquery__type_numeric() %}\n    numeric\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": { "macros": [] },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1665426349.914627,
      "supported_languages": null
    },
    "macro.dbt_utils.type_bigint": {
      "unique_id": "macro.dbt_utils.type_bigint",
      "package_name": "dbt_utils",
      "root_path": "/Users/sung/Desktop/dbt/dbt_env/dbt_packages/dbt_utils",
      "path": "macros/cross_db_utils/datatypes.sql",
      "original_file_path": "macros/cross_db_utils/datatypes.sql",
      "name": "type_bigint",
      "macro_sql": "\n\n{%- macro type_bigint() -%}\n  {{ return(adapter.dispatch('type_bigint', 'dbt_utils')()) }}\n{%- endmacro -%}\n\n",
      "resource_type": "macro",
      "tags": [],
      "depends_on": { "macros": ["macro.dbt_utils.default__type_bigint"] },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1665426349.9149928,
      "supported_languages": null
    },
    "macro.dbt_utils.default__type_bigint": {
      "unique_id": "macro.dbt_utils.default__type_bigint",
      "package_name": "dbt_utils",
      "root_path": "/Users/sung/Desktop/dbt/dbt_env/dbt_packages/dbt_utils",
      "path": "macros/cross_db_utils/datatypes.sql",
      "original_file_path": "macros/cross_db_utils/datatypes.sql",
      "name": "default__type_bigint",
      "macro_sql": "{% macro default__type_bigint() %}\n    bigint\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": { "macros": [] },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1665426349.915165,
      "supported_languages": null
    },
    "macro.dbt_utils.bigquery__type_bigint": {
      "unique_id": "macro.dbt_utils.bigquery__type_bigint",
      "package_name": "dbt_utils",
      "root_path": "/Users/sung/Desktop/dbt/dbt_env/dbt_packages/dbt_utils",
      "path": "macros/cross_db_utils/datatypes.sql",
      "original_file_path": "macros/cross_db_utils/datatypes.sql",
      "name": "bigquery__type_bigint",
      "macro_sql": "{% macro bigquery__type_bigint() %}\n    int64\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": { "macros": [] },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1665426349.915334,
      "supported_languages": null
    },
    "macro.dbt_utils.type_int": {
      "unique_id": "macro.dbt_utils.type_int",
      "package_name": "dbt_utils",
      "root_path": "/Users/sung/Desktop/dbt/dbt_env/dbt_packages/dbt_utils",
      "path": "macros/cross_db_utils/datatypes.sql",
      "original_file_path": "macros/cross_db_utils/datatypes.sql",
      "name": "type_int",
      "macro_sql": "\n\n{%- macro type_int() -%}\n  {{ return(adapter.dispatch('type_int', 'dbt_utils')()) }}\n{%- endmacro -%}\n\n",
      "resource_type": "macro",
      "tags": [],
      "depends_on": { "macros": ["macro.dbt_utils.default__type_int"] },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1665426349.915751,
      "supported_languages": null
    },
    "macro.dbt_utils.default__type_int": {
      "unique_id": "macro.dbt_utils.default__type_int",
      "package_name": "dbt_utils",
      "root_path": "/Users/sung/Desktop/dbt/dbt_env/dbt_packages/dbt_utils",
      "path": "macros/cross_db_utils/datatypes.sql",
      "original_file_path": "macros/cross_db_utils/datatypes.sql",
      "name": "default__type_int",
      "macro_sql": "{% macro default__type_int() %}\n    int\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": { "macros": [] },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1665426349.916055,
      "supported_languages": null
    },
    "macro.dbt_utils.bigquery__type_int": {
      "unique_id": "macro.dbt_utils.bigquery__type_int",
      "package_name": "dbt_utils",
      "root_path": "/Users/sung/Desktop/dbt/dbt_env/dbt_packages/dbt_utils",
      "path": "macros/cross_db_utils/datatypes.sql",
      "original_file_path": "macros/cross_db_utils/datatypes.sql",
      "name": "bigquery__type_int",
      "macro_sql": "{% macro bigquery__type_int() %}\n    int64\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": { "macros": [] },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1665426349.91628,
      "supported_languages": null
    },
    "macro.dbt_utils._is_relation": {
      "unique_id": "macro.dbt_utils._is_relation",
      "package_name": "dbt_utils",
      "root_path": "/Users/sung/Desktop/dbt/dbt_env/dbt_packages/dbt_utils",
      "path": "macros/cross_db_utils/_is_relation.sql",
      "original_file_path": "macros/cross_db_utils/_is_relation.sql",
      "name": "_is_relation",
      "macro_sql": "{% macro _is_relation(obj, macro) %}\n    {%- if not (obj is mapping and obj.get('metadata', {}).get('type', '').endswith('Relation')) -%}\n        {%- do exceptions.raise_compiler_error(\"Macro \" ~ macro ~ \" expected a Relation but received the value: \" ~ obj) -%}\n    {%- endif -%}\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": { "macros": [] },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1665426349.917995,
      "supported_languages": null
    },
    "macro.dbt_utils.length": {
      "unique_id": "macro.dbt_utils.length",
      "package_name": "dbt_utils",
      "root_path": "/Users/sung/Desktop/dbt/dbt_env/dbt_packages/dbt_utils",
      "path": "macros/cross_db_utils/length.sql",
      "original_file_path": "macros/cross_db_utils/length.sql",
      "name": "length",
      "macro_sql": "{% macro length(expression) -%}\n    {{ return(adapter.dispatch('length', 'dbt_utils') (expression)) }}\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": { "macros": ["macro.dbt_utils.default__length"] },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1665426349.919039,
      "supported_languages": null
    },
    "macro.dbt_utils.default__length": {
      "unique_id": "macro.dbt_utils.default__length",
      "package_name": "dbt_utils",
      "root_path": "/Users/sung/Desktop/dbt/dbt_env/dbt_packages/dbt_utils",
      "path": "macros/cross_db_utils/length.sql",
      "original_file_path": "macros/cross_db_utils/length.sql",
      "name": "default__length",
      "macro_sql": "{% macro default__length(expression) %}\n    \n    length(\n        {{ expression }}\n    )\n    \n{%- endmacro -%}\n\n\n",
      "resource_type": "macro",
      "tags": [],
      "depends_on": { "macros": [] },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1665426349.919328,
      "supported_languages": null
    },
    "macro.dbt_utils.redshift__length": {
      "unique_id": "macro.dbt_utils.redshift__length",
      "package_name": "dbt_utils",
      "root_path": "/Users/sung/Desktop/dbt/dbt_env/dbt_packages/dbt_utils",
      "path": "macros/cross_db_utils/length.sql",
      "original_file_path": "macros/cross_db_utils/length.sql",
      "name": "redshift__length",
      "macro_sql": "{% macro redshift__length(expression) %}\n\n    len(\n        {{ expression }}\n    )\n    \n{%- endmacro -%}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": { "macros": [] },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1665426349.919588,
      "supported_languages": null
    },
    "macro.dbt_utils.dateadd": {
      "unique_id": "macro.dbt_utils.dateadd",
      "package_name": "dbt_utils",
      "root_path": "/Users/sung/Desktop/dbt/dbt_env/dbt_packages/dbt_utils",
      "path": "macros/cross_db_utils/dateadd.sql",
      "original_file_path": "macros/cross_db_utils/dateadd.sql",
      "name": "dateadd",
      "macro_sql": "{% macro dateadd(datepart, interval, from_date_or_timestamp) %}\n  {{ return(adapter.dispatch('dateadd', 'dbt_utils')(datepart, interval, from_date_or_timestamp)) }}\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": { "macros": ["macro.dbt_utils.default__dateadd"] },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1665426349.921173,
      "supported_languages": null
    },
    "macro.dbt_utils.default__dateadd": {
      "unique_id": "macro.dbt_utils.default__dateadd",
      "package_name": "dbt_utils",
      "root_path": "/Users/sung/Desktop/dbt/dbt_env/dbt_packages/dbt_utils",
      "path": "macros/cross_db_utils/dateadd.sql",
      "original_file_path": "macros/cross_db_utils/dateadd.sql",
      "name": "default__dateadd",
      "macro_sql": "{% macro default__dateadd(datepart, interval, from_date_or_timestamp) %}\n\n    dateadd(\n        {{ datepart }},\n        {{ interval }},\n        {{ from_date_or_timestamp }}\n        )\n\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": { "macros": [] },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1665426349.921581,
      "supported_languages": null
    },
    "macro.dbt_utils.bigquery__dateadd": {
      "unique_id": "macro.dbt_utils.bigquery__dateadd",
      "package_name": "dbt_utils",
      "root_path": "/Users/sung/Desktop/dbt/dbt_env/dbt_packages/dbt_utils",
      "path": "macros/cross_db_utils/dateadd.sql",
      "original_file_path": "macros/cross_db_utils/dateadd.sql",
      "name": "bigquery__dateadd",
      "macro_sql": "{% macro bigquery__dateadd(datepart, interval, from_date_or_timestamp) %}\n\n        datetime_add(\n            cast( {{ from_date_or_timestamp }} as datetime),\n        interval {{ interval }} {{ datepart }}\n        )\n\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": { "macros": [] },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1665426349.9224231,
      "supported_languages": null
    },
    "macro.dbt_utils.postgres__dateadd": {
      "unique_id": "macro.dbt_utils.postgres__dateadd",
      "package_name": "dbt_utils",
      "root_path": "/Users/sung/Desktop/dbt/dbt_env/dbt_packages/dbt_utils",
      "path": "macros/cross_db_utils/dateadd.sql",
      "original_file_path": "macros/cross_db_utils/dateadd.sql",
      "name": "postgres__dateadd",
      "macro_sql": "{% macro postgres__dateadd(datepart, interval, from_date_or_timestamp) %}\n\n    {{ from_date_or_timestamp }} + ((interval '1 {{ datepart }}') * ({{ interval }}))\n\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": { "macros": [] },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1665426349.922909,
      "supported_languages": null
    },
    "macro.dbt_utils.redshift__dateadd": {
      "unique_id": "macro.dbt_utils.redshift__dateadd",
      "package_name": "dbt_utils",
      "root_path": "/Users/sung/Desktop/dbt/dbt_env/dbt_packages/dbt_utils",
      "path": "macros/cross_db_utils/dateadd.sql",
      "original_file_path": "macros/cross_db_utils/dateadd.sql",
      "name": "redshift__dateadd",
      "macro_sql": "{% macro redshift__dateadd(datepart, interval, from_date_or_timestamp) %}\n\n    {{ return(dbt_utils.default__dateadd(datepart, interval, from_date_or_timestamp)) }}\n\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": { "macros": ["macro.dbt_utils.default__dateadd"] },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1665426349.923386,
      "supported_languages": null
    },
    "macro.dbt_utils.intersect": {
      "unique_id": "macro.dbt_utils.intersect",
      "package_name": "dbt_utils",
      "root_path": "/Users/sung/Desktop/dbt/dbt_env/dbt_packages/dbt_utils",
      "path": "macros/cross_db_utils/intersect.sql",
      "original_file_path": "macros/cross_db_utils/intersect.sql",
      "name": "intersect",
      "macro_sql": "{% macro intersect() %}\n  {{ return(adapter.dispatch('intersect', 'dbt_utils')()) }}\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": { "macros": ["macro.dbt_utils.default__intersect"] },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1665426349.9243698,
      "supported_languages": null
    },
    "macro.dbt_utils.default__intersect": {
      "unique_id": "macro.dbt_utils.default__intersect",
      "package_name": "dbt_utils",
      "root_path": "/Users/sung/Desktop/dbt/dbt_env/dbt_packages/dbt_utils",
      "path": "macros/cross_db_utils/intersect.sql",
      "original_file_path": "macros/cross_db_utils/intersect.sql",
      "name": "default__intersect",
      "macro_sql": "{% macro default__intersect() %}\n\n    intersect\n\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": { "macros": [] },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1665426349.9246862,
      "supported_languages": null
    },
    "macro.dbt_utils.bigquery__intersect": {
      "unique_id": "macro.dbt_utils.bigquery__intersect",
      "package_name": "dbt_utils",
      "root_path": "/Users/sung/Desktop/dbt/dbt_env/dbt_packages/dbt_utils",
      "path": "macros/cross_db_utils/intersect.sql",
      "original_file_path": "macros/cross_db_utils/intersect.sql",
      "name": "bigquery__intersect",
      "macro_sql": "{% macro bigquery__intersect() %}\n\n    intersect distinct\n\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": { "macros": [] },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1665426349.9249291,
      "supported_languages": null
    },
    "macro.dbt_utils.right": {
      "unique_id": "macro.dbt_utils.right",
      "package_name": "dbt_utils",
      "root_path": "/Users/sung/Desktop/dbt/dbt_env/dbt_packages/dbt_utils",
      "path": "macros/cross_db_utils/right.sql",
      "original_file_path": "macros/cross_db_utils/right.sql",
      "name": "right",
      "macro_sql": "{% macro right(string_text, length_expression) -%}\n    {{ return(adapter.dispatch('right', 'dbt_utils') (string_text, length_expression)) }}\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": { "macros": ["macro.dbt_utils.snowflake__right"] },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1665426349.926396,
      "supported_languages": null
    },
    "macro.dbt_utils.default__right": {
      "unique_id": "macro.dbt_utils.default__right",
      "package_name": "dbt_utils",
      "root_path": "/Users/sung/Desktop/dbt/dbt_env/dbt_packages/dbt_utils",
      "path": "macros/cross_db_utils/right.sql",
      "original_file_path": "macros/cross_db_utils/right.sql",
      "name": "default__right",
      "macro_sql": "{% macro default__right(string_text, length_expression) %}\n\n    right(\n        {{ string_text }},\n        {{ length_expression }}\n    )\n    \n{%- endmacro -%}\n\n",
      "resource_type": "macro",
      "tags": [],
      "depends_on": { "macros": [] },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1665426349.926733,
      "supported_languages": null
    },
    "macro.dbt_utils.bigquery__right": {
      "unique_id": "macro.dbt_utils.bigquery__right",
      "package_name": "dbt_utils",
      "root_path": "/Users/sung/Desktop/dbt/dbt_env/dbt_packages/dbt_utils",
      "path": "macros/cross_db_utils/right.sql",
      "original_file_path": "macros/cross_db_utils/right.sql",
      "name": "bigquery__right",
      "macro_sql": "{% macro bigquery__right(string_text, length_expression) %}\n\n    case when {{ length_expression }} = 0 \n        then ''\n    else \n        substr(\n            {{ string_text }},\n            -1 * ({{ length_expression }})\n        )\n    end\n\n{%- endmacro -%}\n\n",
      "resource_type": "macro",
      "tags": [],
      "depends_on": { "macros": [] },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1665426349.927114,
      "supported_languages": null
    },
    "macro.dbt_utils.snowflake__right": {
      "unique_id": "macro.dbt_utils.snowflake__right",
      "package_name": "dbt_utils",
      "root_path": "/Users/sung/Desktop/dbt/dbt_env/dbt_packages/dbt_utils",
      "path": "macros/cross_db_utils/right.sql",
      "original_file_path": "macros/cross_db_utils/right.sql",
      "name": "snowflake__right",
      "macro_sql": "{% macro snowflake__right(string_text, length_expression) %}\n\n    case when {{ length_expression }} = 0 \n        then ''\n    else \n        right(\n            {{ string_text }},\n            {{ length_expression }}\n        )\n    end\n\n{%- endmacro -%}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": { "macros": [] },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1665426349.927561,
      "supported_languages": null
    },
    "macro.dbt_utils.datediff": {
      "unique_id": "macro.dbt_utils.datediff",
      "package_name": "dbt_utils",
      "root_path": "/Users/sung/Desktop/dbt/dbt_env/dbt_packages/dbt_utils",
      "path": "macros/cross_db_utils/datediff.sql",
      "original_file_path": "macros/cross_db_utils/datediff.sql",
      "name": "datediff",
      "macro_sql": "{% macro datediff(first_date, second_date, datepart) %}\n  {{ return(adapter.dispatch('datediff', 'dbt_utils')(first_date, second_date, datepart)) }}\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": { "macros": ["macro.dbt_utils.default__datediff"] },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1665426349.932831,
      "supported_languages": null
    },
    "macro.dbt_utils.default__datediff": {
      "unique_id": "macro.dbt_utils.default__datediff",
      "package_name": "dbt_utils",
      "root_path": "/Users/sung/Desktop/dbt/dbt_env/dbt_packages/dbt_utils",
      "path": "macros/cross_db_utils/datediff.sql",
      "original_file_path": "macros/cross_db_utils/datediff.sql",
      "name": "default__datediff",
      "macro_sql": "{% macro default__datediff(first_date, second_date, datepart) %}\n\n    datediff(\n        {{ datepart }},\n        {{ first_date }},\n        {{ second_date }}\n        )\n\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": { "macros": [] },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1665426349.933249,
      "supported_languages": null
    },
    "macro.dbt_utils.bigquery__datediff": {
      "unique_id": "macro.dbt_utils.bigquery__datediff",
      "package_name": "dbt_utils",
      "root_path": "/Users/sung/Desktop/dbt/dbt_env/dbt_packages/dbt_utils",
      "path": "macros/cross_db_utils/datediff.sql",
      "original_file_path": "macros/cross_db_utils/datediff.sql",
      "name": "bigquery__datediff",
      "macro_sql": "{% macro bigquery__datediff(first_date, second_date, datepart) %}\n\n    datetime_diff(\n        cast({{second_date}} as datetime),\n        cast({{first_date}} as datetime),\n        {{datepart}}\n    )\n\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": { "macros": [] },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1665426349.933632,
      "supported_languages": null
    },
    "macro.dbt_utils.postgres__datediff": {
      "unique_id": "macro.dbt_utils.postgres__datediff",
      "package_name": "dbt_utils",
      "root_path": "/Users/sung/Desktop/dbt/dbt_env/dbt_packages/dbt_utils",
      "path": "macros/cross_db_utils/datediff.sql",
      "original_file_path": "macros/cross_db_utils/datediff.sql",
      "name": "postgres__datediff",
      "macro_sql": "{% macro postgres__datediff(first_date, second_date, datepart) %}\n\n    {% if datepart == 'year' %}\n        (date_part('year', ({{second_date}})::date) - date_part('year', ({{first_date}})::date))\n    {% elif datepart == 'quarter' %}\n        ({{ dbt_utils.datediff(first_date, second_date, 'year') }} * 4 + date_part('quarter', ({{second_date}})::date) - date_part('quarter', ({{first_date}})::date))\n    {% elif datepart == 'month' %}\n        ({{ dbt_utils.datediff(first_date, second_date, 'year') }} * 12 + date_part('month', ({{second_date}})::date) - date_part('month', ({{first_date}})::date))\n    {% elif datepart == 'day' %}\n        (({{second_date}})::date - ({{first_date}})::date)\n    {% elif datepart == 'week' %}\n        ({{ dbt_utils.datediff(first_date, second_date, 'day') }} / 7 + case\n            when date_part('dow', ({{first_date}})::timestamp) <= date_part('dow', ({{second_date}})::timestamp) then\n                case when {{first_date}} <= {{second_date}} then 0 else -1 end\n            else\n                case when {{first_date}} <= {{second_date}} then 1 else 0 end\n        end)\n    {% elif datepart == 'hour' %}\n        ({{ dbt_utils.datediff(first_date, second_date, 'day') }} * 24 + date_part('hour', ({{second_date}})::timestamp) - date_part('hour', ({{first_date}})::timestamp))\n    {% elif datepart == 'minute' %}\n        ({{ dbt_utils.datediff(first_date, second_date, 'hour') }} * 60 + date_part('minute', ({{second_date}})::timestamp) - date_part('minute', ({{first_date}})::timestamp))\n    {% elif datepart == 'second' %}\n        ({{ dbt_utils.datediff(first_date, second_date, 'minute') }} * 60 + floor(date_part('second', ({{second_date}})::timestamp)) - floor(date_part('second', ({{first_date}})::timestamp)))\n    {% elif datepart == 'millisecond' %}\n        ({{ dbt_utils.datediff(first_date, second_date, 'minute') }} * 60000 + floor(date_part('millisecond', ({{second_date}})::timestamp)) - floor(date_part('millisecond', ({{first_date}})::timestamp)))\n    {% elif datepart == 'microsecond' %}\n        ({{ dbt_utils.datediff(first_date, second_date, 'minute') }} * 60000000 + floor(date_part('microsecond', ({{second_date}})::timestamp)) - floor(date_part('microsecond', ({{first_date}})::timestamp)))\n    {% else %}\n        {{ exceptions.raise_compiler_error(\"Unsupported datepart for macro datediff in postgres: {!r}\".format(datepart)) }}\n    {% endif %}\n\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": { "macros": ["macro.dbt_utils.datediff"] },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1665426349.938117,
      "supported_languages": null
    },
    "macro.dbt_utils.redshift__datediff": {
      "unique_id": "macro.dbt_utils.redshift__datediff",
      "package_name": "dbt_utils",
      "root_path": "/Users/sung/Desktop/dbt/dbt_env/dbt_packages/dbt_utils",
      "path": "macros/cross_db_utils/datediff.sql",
      "original_file_path": "macros/cross_db_utils/datediff.sql",
      "name": "redshift__datediff",
      "macro_sql": "{% macro redshift__datediff(first_date, second_date, datepart) %}\n\n    {{ return(dbt_utils.default__datediff(first_date, second_date, datepart)) }}\n\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": { "macros": ["macro.dbt_utils.default__datediff"] },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1665426349.938686,
      "supported_languages": null
    },
    "macro.dbt_utils.safe_cast": {
      "unique_id": "macro.dbt_utils.safe_cast",
      "package_name": "dbt_utils",
      "root_path": "/Users/sung/Desktop/dbt/dbt_env/dbt_packages/dbt_utils",
      "path": "macros/cross_db_utils/safe_cast.sql",
      "original_file_path": "macros/cross_db_utils/safe_cast.sql",
      "name": "safe_cast",
      "macro_sql": "{% macro safe_cast(field, type) %}\n  {{ return(adapter.dispatch('safe_cast', 'dbt_utils') (field, type)) }}\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": { "macros": ["macro.dbt_utils.snowflake__safe_cast"] },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1665426349.940049,
      "supported_languages": null
    },
    "macro.dbt_utils.default__safe_cast": {
      "unique_id": "macro.dbt_utils.default__safe_cast",
      "package_name": "dbt_utils",
      "root_path": "/Users/sung/Desktop/dbt/dbt_env/dbt_packages/dbt_utils",
      "path": "macros/cross_db_utils/safe_cast.sql",
      "original_file_path": "macros/cross_db_utils/safe_cast.sql",
      "name": "default__safe_cast",
      "macro_sql": "{% macro default__safe_cast(field, type) %}\n    {# most databases don't support this function yet\n    so we just need to use cast #}\n    cast({{field}} as {{type}})\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": { "macros": [] },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1665426349.940541,
      "supported_languages": null
    },
    "macro.dbt_utils.snowflake__safe_cast": {
      "unique_id": "macro.dbt_utils.snowflake__safe_cast",
      "package_name": "dbt_utils",
      "root_path": "/Users/sung/Desktop/dbt/dbt_env/dbt_packages/dbt_utils",
      "path": "macros/cross_db_utils/safe_cast.sql",
      "original_file_path": "macros/cross_db_utils/safe_cast.sql",
      "name": "snowflake__safe_cast",
      "macro_sql": "{% macro snowflake__safe_cast(field, type) %}\n    try_cast({{field}} as {{type}})\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": { "macros": [] },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1665426349.940896,
      "supported_languages": null
    },
    "macro.dbt_utils.bigquery__safe_cast": {
      "unique_id": "macro.dbt_utils.bigquery__safe_cast",
      "package_name": "dbt_utils",
      "root_path": "/Users/sung/Desktop/dbt/dbt_env/dbt_packages/dbt_utils",
      "path": "macros/cross_db_utils/safe_cast.sql",
      "original_file_path": "macros/cross_db_utils/safe_cast.sql",
      "name": "bigquery__safe_cast",
      "macro_sql": "{% macro bigquery__safe_cast(field, type) %}\n    safe_cast({{field}} as {{type}})\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": { "macros": [] },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1665426349.941198,
      "supported_languages": null
    },
    "macro.dbt_utils.hash": {
      "unique_id": "macro.dbt_utils.hash",
      "package_name": "dbt_utils",
      "root_path": "/Users/sung/Desktop/dbt/dbt_env/dbt_packages/dbt_utils",
      "path": "macros/cross_db_utils/hash.sql",
      "original_file_path": "macros/cross_db_utils/hash.sql",
      "name": "hash",
      "macro_sql": "{% macro hash(field) -%}\n  {{ return(adapter.dispatch('hash', 'dbt_utils') (field)) }}\n{%- endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": { "macros": ["macro.dbt_utils.default__hash"] },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1665426349.942219,
      "supported_languages": null
    },
    "macro.dbt_utils.default__hash": {
      "unique_id": "macro.dbt_utils.default__hash",
      "package_name": "dbt_utils",
      "root_path": "/Users/sung/Desktop/dbt/dbt_env/dbt_packages/dbt_utils",
      "path": "macros/cross_db_utils/hash.sql",
      "original_file_path": "macros/cross_db_utils/hash.sql",
      "name": "default__hash",
      "macro_sql": "{% macro default__hash(field) -%}\n    md5(cast({{field}} as {{dbt_utils.type_string()}}))\n{%- endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": { "macros": ["macro.dbt_utils.type_string"] },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1665426349.942587,
      "supported_languages": null
    },
    "macro.dbt_utils.bigquery__hash": {
      "unique_id": "macro.dbt_utils.bigquery__hash",
      "package_name": "dbt_utils",
      "root_path": "/Users/sung/Desktop/dbt/dbt_env/dbt_packages/dbt_utils",
      "path": "macros/cross_db_utils/hash.sql",
      "original_file_path": "macros/cross_db_utils/hash.sql",
      "name": "bigquery__hash",
      "macro_sql": "{% macro bigquery__hash(field) -%}\n    to_hex({{dbt_utils.default__hash(field)}})\n{%- endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": { "macros": ["macro.dbt_utils.default__hash"] },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1665426349.9429052,
      "supported_languages": null
    },
    "macro.dbt_utils.cast_bool_to_text": {
      "unique_id": "macro.dbt_utils.cast_bool_to_text",
      "package_name": "dbt_utils",
      "root_path": "/Users/sung/Desktop/dbt/dbt_env/dbt_packages/dbt_utils",
      "path": "macros/cross_db_utils/cast_bool_to_text.sql",
      "original_file_path": "macros/cross_db_utils/cast_bool_to_text.sql",
      "name": "cast_bool_to_text",
      "macro_sql": "{% macro cast_bool_to_text(field) %}\n  {{ adapter.dispatch('cast_bool_to_text', 'dbt_utils') (field) }}\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": ["macro.dbt_utils.default__cast_bool_to_text"]
      },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1665426349.9438999,
      "supported_languages": null
    },
    "macro.dbt_utils.default__cast_bool_to_text": {
      "unique_id": "macro.dbt_utils.default__cast_bool_to_text",
      "package_name": "dbt_utils",
      "root_path": "/Users/sung/Desktop/dbt/dbt_env/dbt_packages/dbt_utils",
      "path": "macros/cross_db_utils/cast_bool_to_text.sql",
      "original_file_path": "macros/cross_db_utils/cast_bool_to_text.sql",
      "name": "default__cast_bool_to_text",
      "macro_sql": "{% macro default__cast_bool_to_text(field) %}\n    cast({{ field }} as {{ dbt_utils.type_string() }})\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": { "macros": ["macro.dbt_utils.type_string"] },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1665426349.9443269,
      "supported_languages": null
    },
    "macro.dbt_utils.redshift__cast_bool_to_text": {
      "unique_id": "macro.dbt_utils.redshift__cast_bool_to_text",
      "package_name": "dbt_utils",
      "root_path": "/Users/sung/Desktop/dbt/dbt_env/dbt_packages/dbt_utils",
      "path": "macros/cross_db_utils/cast_bool_to_text.sql",
      "original_file_path": "macros/cross_db_utils/cast_bool_to_text.sql",
      "name": "redshift__cast_bool_to_text",
      "macro_sql": "{% macro redshift__cast_bool_to_text(field) %}\n    case\n        when {{ field }} is true then 'true'\n        when {{ field }} is false then 'false'\n    end::text\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": { "macros": [] },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1665426349.944745,
      "supported_languages": null
    },
    "macro.dbt_utils.identifier": {
      "unique_id": "macro.dbt_utils.identifier",
      "package_name": "dbt_utils",
      "root_path": "/Users/sung/Desktop/dbt/dbt_env/dbt_packages/dbt_utils",
      "path": "macros/cross_db_utils/identifier.sql",
      "original_file_path": "macros/cross_db_utils/identifier.sql",
      "name": "identifier",
      "macro_sql": "{% macro identifier(value) %}\t\n  {%- set error_message = '\n    Warning: the `identifier` macro is no longer supported and will be deprecated in a future release of dbt-utils. \\\n    Use `adapter.quote` instead. The {}.{} model triggered this warning. \\\n    '.format(model.package_name, model.name) -%}\n  {%- do exceptions.warn(error_message) -%}\n  {{ return(adapter.dispatch('identifier', 'dbt_utils') (value)) }}\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": { "macros": ["macro.dbt_utils.default__identifier"] },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1665426349.946282,
      "supported_languages": null
    },
    "macro.dbt_utils.default__identifier": {
      "unique_id": "macro.dbt_utils.default__identifier",
      "package_name": "dbt_utils",
      "root_path": "/Users/sung/Desktop/dbt/dbt_env/dbt_packages/dbt_utils",
      "path": "macros/cross_db_utils/identifier.sql",
      "original_file_path": "macros/cross_db_utils/identifier.sql",
      "name": "default__identifier",
      "macro_sql": "{% macro default__identifier(value) -%}\t\n    \"{{ value }}\"\t\n{%- endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": { "macros": [] },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1665426349.94656,
      "supported_languages": null
    },
    "macro.dbt_utils.bigquery__identifier": {
      "unique_id": "macro.dbt_utils.bigquery__identifier",
      "package_name": "dbt_utils",
      "root_path": "/Users/sung/Desktop/dbt/dbt_env/dbt_packages/dbt_utils",
      "path": "macros/cross_db_utils/identifier.sql",
      "original_file_path": "macros/cross_db_utils/identifier.sql",
      "name": "bigquery__identifier",
      "macro_sql": "{% macro bigquery__identifier(value) -%}\t\n    `{{ value }}`\t\n{%- endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": { "macros": [] },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1665426349.946827,
      "supported_languages": null
    },
    "macro.dbt_utils.position": {
      "unique_id": "macro.dbt_utils.position",
      "package_name": "dbt_utils",
      "root_path": "/Users/sung/Desktop/dbt/dbt_env/dbt_packages/dbt_utils",
      "path": "macros/cross_db_utils/position.sql",
      "original_file_path": "macros/cross_db_utils/position.sql",
      "name": "position",
      "macro_sql": "{% macro position(substring_text, string_text) -%}\n    {{ return(adapter.dispatch('position', 'dbt_utils') (substring_text, string_text)) }}\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": { "macros": ["macro.dbt_utils.default__position"] },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1665426349.9480371,
      "supported_languages": null
    },
    "macro.dbt_utils.default__position": {
      "unique_id": "macro.dbt_utils.default__position",
      "package_name": "dbt_utils",
      "root_path": "/Users/sung/Desktop/dbt/dbt_env/dbt_packages/dbt_utils",
      "path": "macros/cross_db_utils/position.sql",
      "original_file_path": "macros/cross_db_utils/position.sql",
      "name": "default__position",
      "macro_sql": "{% macro default__position(substring_text, string_text) %}\n\n    position(\n        {{ substring_text }} in {{ string_text }}\n    )\n    \n{%- endmacro -%}\n\n",
      "resource_type": "macro",
      "tags": [],
      "depends_on": { "macros": [] },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1665426349.94841,
      "supported_languages": null
    },
    "macro.dbt_utils.bigquery__position": {
      "unique_id": "macro.dbt_utils.bigquery__position",
      "package_name": "dbt_utils",
      "root_path": "/Users/sung/Desktop/dbt/dbt_env/dbt_packages/dbt_utils",
      "path": "macros/cross_db_utils/position.sql",
      "original_file_path": "macros/cross_db_utils/position.sql",
      "name": "bigquery__position",
      "macro_sql": "{% macro bigquery__position(substring_text, string_text) %}\n\n    strpos(\n        {{ string_text }},\n        {{ substring_text }}\n        \n    )\n    \n{%- endmacro -%}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": { "macros": [] },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1665426349.948769,
      "supported_languages": null
    },
    "macro.dbt_utils.string_literal": {
      "unique_id": "macro.dbt_utils.string_literal",
      "package_name": "dbt_utils",
      "root_path": "/Users/sung/Desktop/dbt/dbt_env/dbt_packages/dbt_utils",
      "path": "macros/cross_db_utils/literal.sql",
      "original_file_path": "macros/cross_db_utils/literal.sql",
      "name": "string_literal",
      "macro_sql": "{%- macro string_literal(value) -%}\n  {{ return(adapter.dispatch('string_literal', 'dbt_utils') (value)) }}\n{%- endmacro -%}\n\n",
      "resource_type": "macro",
      "tags": [],
      "depends_on": { "macros": ["macro.dbt_utils.default__string_literal"] },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1665426349.949734,
      "supported_languages": null
    },
    "macro.dbt_utils.default__string_literal": {
      "unique_id": "macro.dbt_utils.default__string_literal",
      "package_name": "dbt_utils",
      "root_path": "/Users/sung/Desktop/dbt/dbt_env/dbt_packages/dbt_utils",
      "path": "macros/cross_db_utils/literal.sql",
      "original_file_path": "macros/cross_db_utils/literal.sql",
      "name": "default__string_literal",
      "macro_sql": "{% macro default__string_literal(value) -%}\n    '{{ value }}'\n{%- endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": { "macros": [] },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1665426349.9500139,
      "supported_languages": null
    },
    "macro.dbt_utils.current_timestamp": {
      "unique_id": "macro.dbt_utils.current_timestamp",
      "package_name": "dbt_utils",
      "root_path": "/Users/sung/Desktop/dbt/dbt_env/dbt_packages/dbt_utils",
      "path": "macros/cross_db_utils/current_timestamp.sql",
      "original_file_path": "macros/cross_db_utils/current_timestamp.sql",
      "name": "current_timestamp",
      "macro_sql": "{% macro current_timestamp() -%}\n  {{ return(adapter.dispatch('current_timestamp', 'dbt_utils')()) }}\n{%- endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": ["macro.dbt_utils.default__current_timestamp"]
      },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1665426349.951652,
      "supported_languages": null
    },
    "macro.dbt_utils.default__current_timestamp": {
      "unique_id": "macro.dbt_utils.default__current_timestamp",
      "package_name": "dbt_utils",
      "root_path": "/Users/sung/Desktop/dbt/dbt_env/dbt_packages/dbt_utils",
      "path": "macros/cross_db_utils/current_timestamp.sql",
      "original_file_path": "macros/cross_db_utils/current_timestamp.sql",
      "name": "default__current_timestamp",
      "macro_sql": "{% macro default__current_timestamp() %}\n    current_timestamp::{{dbt_utils.type_timestamp()}}\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": { "macros": ["macro.dbt_utils.type_timestamp"] },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1665426349.951932,
      "supported_languages": null
    },
    "macro.dbt_utils.redshift__current_timestamp": {
      "unique_id": "macro.dbt_utils.redshift__current_timestamp",
      "package_name": "dbt_utils",
      "root_path": "/Users/sung/Desktop/dbt/dbt_env/dbt_packages/dbt_utils",
      "path": "macros/cross_db_utils/current_timestamp.sql",
      "original_file_path": "macros/cross_db_utils/current_timestamp.sql",
      "name": "redshift__current_timestamp",
      "macro_sql": "{% macro redshift__current_timestamp() %}\n    getdate()\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": { "macros": [] },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1665426349.952109,
      "supported_languages": null
    },
    "macro.dbt_utils.bigquery__current_timestamp": {
      "unique_id": "macro.dbt_utils.bigquery__current_timestamp",
      "package_name": "dbt_utils",
      "root_path": "/Users/sung/Desktop/dbt/dbt_env/dbt_packages/dbt_utils",
      "path": "macros/cross_db_utils/current_timestamp.sql",
      "original_file_path": "macros/cross_db_utils/current_timestamp.sql",
      "name": "bigquery__current_timestamp",
      "macro_sql": "{% macro bigquery__current_timestamp() %}\n    current_timestamp\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": { "macros": [] },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1665426349.952281,
      "supported_languages": null
    },
    "macro.dbt_utils.current_timestamp_in_utc": {
      "unique_id": "macro.dbt_utils.current_timestamp_in_utc",
      "package_name": "dbt_utils",
      "root_path": "/Users/sung/Desktop/dbt/dbt_env/dbt_packages/dbt_utils",
      "path": "macros/cross_db_utils/current_timestamp.sql",
      "original_file_path": "macros/cross_db_utils/current_timestamp.sql",
      "name": "current_timestamp_in_utc",
      "macro_sql": "{% macro current_timestamp_in_utc() -%}\n  {{ return(adapter.dispatch('current_timestamp_in_utc', 'dbt_utils')()) }}\n{%- endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": ["macro.dbt_utils.snowflake__current_timestamp_in_utc"]
      },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1665426349.952822,
      "supported_languages": null
    },
    "macro.dbt_utils.default__current_timestamp_in_utc": {
      "unique_id": "macro.dbt_utils.default__current_timestamp_in_utc",
      "package_name": "dbt_utils",
      "root_path": "/Users/sung/Desktop/dbt/dbt_env/dbt_packages/dbt_utils",
      "path": "macros/cross_db_utils/current_timestamp.sql",
      "original_file_path": "macros/cross_db_utils/current_timestamp.sql",
      "name": "default__current_timestamp_in_utc",
      "macro_sql": "{% macro default__current_timestamp_in_utc() %}\n    {{dbt_utils.current_timestamp()}}\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": { "macros": ["macro.dbt_utils.current_timestamp"] },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1665426349.953086,
      "supported_languages": null
    },
    "macro.dbt_utils.snowflake__current_timestamp_in_utc": {
      "unique_id": "macro.dbt_utils.snowflake__current_timestamp_in_utc",
      "package_name": "dbt_utils",
      "root_path": "/Users/sung/Desktop/dbt/dbt_env/dbt_packages/dbt_utils",
      "path": "macros/cross_db_utils/current_timestamp.sql",
      "original_file_path": "macros/cross_db_utils/current_timestamp.sql",
      "name": "snowflake__current_timestamp_in_utc",
      "macro_sql": "{% macro snowflake__current_timestamp_in_utc() %}\n    convert_timezone('UTC', {{dbt_utils.current_timestamp()}})::{{dbt_utils.type_timestamp()}}\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": [
          "macro.dbt_utils.current_timestamp",
          "macro.dbt_utils.type_timestamp"
        ]
      },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1665426349.95352,
      "supported_languages": null
    },
    "macro.dbt_utils.postgres__current_timestamp_in_utc": {
      "unique_id": "macro.dbt_utils.postgres__current_timestamp_in_utc",
      "package_name": "dbt_utils",
      "root_path": "/Users/sung/Desktop/dbt/dbt_env/dbt_packages/dbt_utils",
      "path": "macros/cross_db_utils/current_timestamp.sql",
      "original_file_path": "macros/cross_db_utils/current_timestamp.sql",
      "name": "postgres__current_timestamp_in_utc",
      "macro_sql": "{% macro postgres__current_timestamp_in_utc() %}\n    (current_timestamp at time zone 'utc')::{{dbt_utils.type_timestamp()}}\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": { "macros": ["macro.dbt_utils.type_timestamp"] },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1665426349.9539452,
      "supported_languages": null
    },
    "macro.dbt_utils.redshift__current_timestamp_in_utc": {
      "unique_id": "macro.dbt_utils.redshift__current_timestamp_in_utc",
      "package_name": "dbt_utils",
      "root_path": "/Users/sung/Desktop/dbt/dbt_env/dbt_packages/dbt_utils",
      "path": "macros/cross_db_utils/current_timestamp.sql",
      "original_file_path": "macros/cross_db_utils/current_timestamp.sql",
      "name": "redshift__current_timestamp_in_utc",
      "macro_sql": "{% macro redshift__current_timestamp_in_utc() %}\n    {{ return(dbt_utils.default__current_timestamp_in_utc()) }}\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": ["macro.dbt_utils.default__current_timestamp_in_utc"]
      },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1665426349.954297,
      "supported_languages": null
    },
    "macro.dbt_utils.width_bucket": {
      "unique_id": "macro.dbt_utils.width_bucket",
      "package_name": "dbt_utils",
      "root_path": "/Users/sung/Desktop/dbt/dbt_env/dbt_packages/dbt_utils",
      "path": "macros/cross_db_utils/width_bucket.sql",
      "original_file_path": "macros/cross_db_utils/width_bucket.sql",
      "name": "width_bucket",
      "macro_sql": "{% macro width_bucket(expr, min_value, max_value, num_buckets) %}\n  {{ return(adapter.dispatch('width_bucket', 'dbt_utils') (expr, min_value, max_value, num_buckets)) }}\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": { "macros": ["macro.dbt_utils.snowflake__width_bucket"] },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1665426349.957972,
      "supported_languages": null
    },
    "macro.dbt_utils.default__width_bucket": {
      "unique_id": "macro.dbt_utils.default__width_bucket",
      "package_name": "dbt_utils",
      "root_path": "/Users/sung/Desktop/dbt/dbt_env/dbt_packages/dbt_utils",
      "path": "macros/cross_db_utils/width_bucket.sql",
      "original_file_path": "macros/cross_db_utils/width_bucket.sql",
      "name": "default__width_bucket",
      "macro_sql": "{% macro default__width_bucket(expr, min_value, max_value, num_buckets) -%}\n\n    {% set bin_size -%}\n    (( {{ max_value }} - {{ min_value }} ) / {{ num_buckets }} )\n    {%- endset %}\n    (\n        -- to break ties when the amount is eaxtly at the bucket egde\n        case\n            when\n                mod(\n                    {{ dbt_utils.safe_cast(expr, dbt_utils.type_numeric() ) }},\n                    {{ dbt_utils.safe_cast(bin_size, dbt_utils.type_numeric() ) }}\n                ) = 0\n            then 1\n            else 0\n        end\n    ) +\n      -- Anything over max_value goes the N+1 bucket\n    least(\n        ceil(\n            ({{ expr }} - {{ min_value }})/{{ bin_size }}\n        ),\n        {{ num_buckets }} + 1\n    )\n{%- endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": ["macro.dbt_utils.safe_cast", "macro.dbt_utils.type_numeric"]
      },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1665426349.959577,
      "supported_languages": null
    },
    "macro.dbt_utils.redshift__width_bucket": {
      "unique_id": "macro.dbt_utils.redshift__width_bucket",
      "package_name": "dbt_utils",
      "root_path": "/Users/sung/Desktop/dbt/dbt_env/dbt_packages/dbt_utils",
      "path": "macros/cross_db_utils/width_bucket.sql",
      "original_file_path": "macros/cross_db_utils/width_bucket.sql",
      "name": "redshift__width_bucket",
      "macro_sql": "{% macro redshift__width_bucket(expr, min_value, max_value, num_buckets) -%}\n\n    {% set bin_size -%}\n    (( {{ max_value }} - {{ min_value }} ) / {{ num_buckets }} )\n    {%- endset %}\n    (\n        -- to break ties when the amount is exactly at the bucket edge\n        case\n            when\n                {{ dbt_utils.safe_cast(expr, dbt_utils.type_numeric() ) }} %\n                {{ dbt_utils.safe_cast(bin_size, dbt_utils.type_numeric() ) }}\n                 = 0\n            then 1\n            else 0\n        end\n    ) +\n      -- Anything over max_value goes the N+1 bucket\n    least(\n        ceil(\n            ({{ expr }} - {{ min_value }})/{{ bin_size }}\n        ),\n        {{ num_buckets }} + 1\n    )\n{%- endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": ["macro.dbt_utils.safe_cast", "macro.dbt_utils.type_numeric"]
      },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1665426349.961068,
      "supported_languages": null
    },
    "macro.dbt_utils.snowflake__width_bucket": {
      "unique_id": "macro.dbt_utils.snowflake__width_bucket",
      "package_name": "dbt_utils",
      "root_path": "/Users/sung/Desktop/dbt/dbt_env/dbt_packages/dbt_utils",
      "path": "macros/cross_db_utils/width_bucket.sql",
      "original_file_path": "macros/cross_db_utils/width_bucket.sql",
      "name": "snowflake__width_bucket",
      "macro_sql": "{% macro snowflake__width_bucket(expr, min_value, max_value, num_buckets) %}\n    width_bucket({{ expr }}, {{ min_value }}, {{ max_value }}, {{ num_buckets }} )\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": { "macros": [] },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1665426349.9615989,
      "supported_languages": null
    },
    "macro.dbt_utils.last_day": {
      "unique_id": "macro.dbt_utils.last_day",
      "package_name": "dbt_utils",
      "root_path": "/Users/sung/Desktop/dbt/dbt_env/dbt_packages/dbt_utils",
      "path": "macros/cross_db_utils/last_day.sql",
      "original_file_path": "macros/cross_db_utils/last_day.sql",
      "name": "last_day",
      "macro_sql": "{% macro last_day(date, datepart) %}\n  {{ return(adapter.dispatch('last_day', 'dbt_utils') (date, datepart)) }}\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": { "macros": ["macro.dbt_utils.default__last_day"] },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1665426349.9633331,
      "supported_languages": null
    },
    "macro.dbt_utils.default_last_day": {
      "unique_id": "macro.dbt_utils.default_last_day",
      "package_name": "dbt_utils",
      "root_path": "/Users/sung/Desktop/dbt/dbt_env/dbt_packages/dbt_utils",
      "path": "macros/cross_db_utils/last_day.sql",
      "original_file_path": "macros/cross_db_utils/last_day.sql",
      "name": "default_last_day",
      "macro_sql": "\n\n\n{%- macro default_last_day(date, datepart) -%}\n    cast(\n        {{dbt_utils.dateadd('day', '-1',\n        dbt_utils.dateadd(datepart, '1', dbt_utils.date_trunc(datepart, date))\n        )}}\n        as date)\n{%- endmacro -%}\n\n\n",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": ["macro.dbt_utils.dateadd", "macro.dbt_utils.date_trunc"]
      },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1665426349.96397,
      "supported_languages": null
    },
    "macro.dbt_utils.default__last_day": {
      "unique_id": "macro.dbt_utils.default__last_day",
      "package_name": "dbt_utils",
      "root_path": "/Users/sung/Desktop/dbt/dbt_env/dbt_packages/dbt_utils",
      "path": "macros/cross_db_utils/last_day.sql",
      "original_file_path": "macros/cross_db_utils/last_day.sql",
      "name": "default__last_day",
      "macro_sql": "{% macro default__last_day(date, datepart) -%}\n    {{dbt_utils.default_last_day(date, datepart)}}\n{%- endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": { "macros": ["macro.dbt_utils.default_last_day"] },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1665426349.964315,
      "supported_languages": null
    },
    "macro.dbt_utils.postgres__last_day": {
      "unique_id": "macro.dbt_utils.postgres__last_day",
      "package_name": "dbt_utils",
      "root_path": "/Users/sung/Desktop/dbt/dbt_env/dbt_packages/dbt_utils",
      "path": "macros/cross_db_utils/last_day.sql",
      "original_file_path": "macros/cross_db_utils/last_day.sql",
      "name": "postgres__last_day",
      "macro_sql": "{% macro postgres__last_day(date, datepart) -%}\n\n    {%- if datepart == 'quarter' -%}\n    -- postgres dateadd does not support quarter interval.\n    cast(\n        {{dbt_utils.dateadd('day', '-1',\n        dbt_utils.dateadd('month', '3', dbt_utils.date_trunc(datepart, date))\n        )}}\n        as date)\n    {%- else -%}\n    {{dbt_utils.default_last_day(date, datepart)}}\n    {%- endif -%}\n\n{%- endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": [
          "macro.dbt_utils.dateadd",
          "macro.dbt_utils.date_trunc",
          "macro.dbt_utils.default_last_day"
        ]
      },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1665426349.96525,
      "supported_languages": null
    },
    "macro.dbt_utils.redshift__last_day": {
      "unique_id": "macro.dbt_utils.redshift__last_day",
      "package_name": "dbt_utils",
      "root_path": "/Users/sung/Desktop/dbt/dbt_env/dbt_packages/dbt_utils",
      "path": "macros/cross_db_utils/last_day.sql",
      "original_file_path": "macros/cross_db_utils/last_day.sql",
      "name": "redshift__last_day",
      "macro_sql": "{% macro redshift__last_day(date, datepart) %}\n\n    {{ return(dbt_utils.default__last_day(date, datepart)) }}\n\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": { "macros": ["macro.dbt_utils.default__last_day"] },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1665426349.9656901,
      "supported_languages": null
    },
    "macro.dbt_utils.split_part": {
      "unique_id": "macro.dbt_utils.split_part",
      "package_name": "dbt_utils",
      "root_path": "/Users/sung/Desktop/dbt/dbt_env/dbt_packages/dbt_utils",
      "path": "macros/cross_db_utils/split_part.sql",
      "original_file_path": "macros/cross_db_utils/split_part.sql",
      "name": "split_part",
      "macro_sql": "{% macro split_part(string_text, delimiter_text, part_number) %}\n  {{ return(adapter.dispatch('split_part', 'dbt_utils') (string_text, delimiter_text, part_number)) }}\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": { "macros": ["macro.dbt_utils.default__split_part"] },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1665426349.966937,
      "supported_languages": null
    },
    "macro.dbt_utils.default__split_part": {
      "unique_id": "macro.dbt_utils.default__split_part",
      "package_name": "dbt_utils",
      "root_path": "/Users/sung/Desktop/dbt/dbt_env/dbt_packages/dbt_utils",
      "path": "macros/cross_db_utils/split_part.sql",
      "original_file_path": "macros/cross_db_utils/split_part.sql",
      "name": "default__split_part",
      "macro_sql": "{% macro default__split_part(string_text, delimiter_text, part_number) %}\n\n    split_part(\n        {{ string_text }},\n        {{ delimiter_text }},\n        {{ part_number }}\n        )\n\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": { "macros": [] },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1665426349.9673972,
      "supported_languages": null
    },
    "macro.dbt_utils.bigquery__split_part": {
      "unique_id": "macro.dbt_utils.bigquery__split_part",
      "package_name": "dbt_utils",
      "root_path": "/Users/sung/Desktop/dbt/dbt_env/dbt_packages/dbt_utils",
      "path": "macros/cross_db_utils/split_part.sql",
      "original_file_path": "macros/cross_db_utils/split_part.sql",
      "name": "bigquery__split_part",
      "macro_sql": "{% macro bigquery__split_part(string_text, delimiter_text, part_number) %}\n\n    split(\n        {{ string_text }},\n        {{ delimiter_text }}\n        )[safe_offset({{ part_number - 1 }})]\n\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": { "macros": [] },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1665426349.9678102,
      "supported_languages": null
    },
    "macro.dbt_utils.date_trunc": {
      "unique_id": "macro.dbt_utils.date_trunc",
      "package_name": "dbt_utils",
      "root_path": "/Users/sung/Desktop/dbt/dbt_env/dbt_packages/dbt_utils",
      "path": "macros/cross_db_utils/date_trunc.sql",
      "original_file_path": "macros/cross_db_utils/date_trunc.sql",
      "name": "date_trunc",
      "macro_sql": "{% macro date_trunc(datepart, date) -%}\n  {{ return(adapter.dispatch('date_trunc', 'dbt_utils') (datepart, date)) }}\n{%- endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": { "macros": ["macro.dbt_utils.default__date_trunc"] },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1665426349.968776,
      "supported_languages": null
    },
    "macro.dbt_utils.default__date_trunc": {
      "unique_id": "macro.dbt_utils.default__date_trunc",
      "package_name": "dbt_utils",
      "root_path": "/Users/sung/Desktop/dbt/dbt_env/dbt_packages/dbt_utils",
      "path": "macros/cross_db_utils/date_trunc.sql",
      "original_file_path": "macros/cross_db_utils/date_trunc.sql",
      "name": "default__date_trunc",
      "macro_sql": "{% macro default__date_trunc(datepart, date) %}\n    date_trunc('{{datepart}}', {{date}})\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": { "macros": [] },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1665426349.9690838,
      "supported_languages": null
    },
    "macro.dbt_utils.bigquery__date_trunc": {
      "unique_id": "macro.dbt_utils.bigquery__date_trunc",
      "package_name": "dbt_utils",
      "root_path": "/Users/sung/Desktop/dbt/dbt_env/dbt_packages/dbt_utils",
      "path": "macros/cross_db_utils/date_trunc.sql",
      "original_file_path": "macros/cross_db_utils/date_trunc.sql",
      "name": "bigquery__date_trunc",
      "macro_sql": "{% macro bigquery__date_trunc(datepart, date) %}\n    timestamp_trunc(\n        cast({{date}} as timestamp),\n        {{datepart}}\n    )\n\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": { "macros": [] },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1665426349.9694521,
      "supported_languages": null
    },
    "macro.dbt_utils._is_ephemeral": {
      "unique_id": "macro.dbt_utils._is_ephemeral",
      "package_name": "dbt_utils",
      "root_path": "/Users/sung/Desktop/dbt/dbt_env/dbt_packages/dbt_utils",
      "path": "macros/cross_db_utils/_is_ephemeral.sql",
      "original_file_path": "macros/cross_db_utils/_is_ephemeral.sql",
      "name": "_is_ephemeral",
      "macro_sql": "{% macro _is_ephemeral(obj, macro) %}\n    {%- if obj.is_cte -%}\n        {% set ephemeral_prefix = api.Relation.add_ephemeral_prefix('') %}\n        {% if obj.name.startswith(ephemeral_prefix) %}\n            {% set model_name = obj.name[(ephemeral_prefix|length):] %}\n        {% else %}\n            {% set model_name = obj.name %}\n        {%- endif -%}\n        {% set error_message %}\nThe `{{ macro }}` macro cannot be used with ephemeral models, as it relies on the information schema.\n\n`{{ model_name }}` is an ephemeral model. Consider making it a view or table instead.\n        {% endset %}\n        {%- do exceptions.raise_compiler_error(error_message) -%}\n    {%- endif -%}\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": { "macros": [] },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1665426349.971452,
      "supported_languages": null
    },
    "macro.dbt_utils.get_period_boundaries": {
      "unique_id": "macro.dbt_utils.get_period_boundaries",
      "package_name": "dbt_utils",
      "root_path": "/Users/sung/Desktop/dbt/dbt_env/dbt_packages/dbt_utils",
      "path": "macros/materializations/insert_by_period_materialization.sql",
      "original_file_path": "macros/materializations/insert_by_period_materialization.sql",
      "name": "get_period_boundaries",
      "macro_sql": "{% macro get_period_boundaries(target_schema, target_table, timestamp_field, start_date, stop_date, period) -%}\n    {{ return(adapter.dispatch('get_period_boundaries', 'dbt_utils')(target_schema, target_table, timestamp_field, start_date, stop_date, period)) }}\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": ["macro.dbt_utils.default__get_period_boundaries"]
      },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1665426349.9829278,
      "supported_languages": null
    },
    "macro.dbt_utils.default__get_period_boundaries": {
      "unique_id": "macro.dbt_utils.default__get_period_boundaries",
      "package_name": "dbt_utils",
      "root_path": "/Users/sung/Desktop/dbt/dbt_env/dbt_packages/dbt_utils",
      "path": "macros/materializations/insert_by_period_materialization.sql",
      "original_file_path": "macros/materializations/insert_by_period_materialization.sql",
      "name": "default__get_period_boundaries",
      "macro_sql": "{% macro default__get_period_boundaries(target_schema, target_table, timestamp_field, start_date, stop_date, period) -%}\n\n  {% call statement('period_boundaries', fetch_result=True) -%}\n    with data as (\n      select\n          coalesce(max(\"{{timestamp_field}}\"), '{{start_date}}')::timestamp as start_timestamp,\n          coalesce(\n            {{dbt_utils.dateadd('millisecond',\n                                -1,\n                                \"nullif('\" ~ stop_date ~ \"','')::timestamp\")}},\n            {{dbt_utils.current_timestamp()}}\n          ) as stop_timestamp\n      from \"{{target_schema}}\".\"{{target_table}}\"\n    )\n\n    select\n      start_timestamp,\n      stop_timestamp,\n      {{dbt_utils.datediff('start_timestamp',\n                           'stop_timestamp',\n                           period)}}  + 1 as num_periods\n    from data\n  {%- endcall %}\n\n{%- endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": [
          "macro.dbt.statement",
          "macro.dbt_utils.dateadd",
          "macro.dbt_utils.current_timestamp",
          "macro.dbt_utils.datediff"
        ]
      },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1665426349.984352,
      "supported_languages": null
    },
    "macro.dbt_utils.get_period_sql": {
      "unique_id": "macro.dbt_utils.get_period_sql",
      "package_name": "dbt_utils",
      "root_path": "/Users/sung/Desktop/dbt/dbt_env/dbt_packages/dbt_utils",
      "path": "macros/materializations/insert_by_period_materialization.sql",
      "original_file_path": "macros/materializations/insert_by_period_materialization.sql",
      "name": "get_period_sql",
      "macro_sql": "{% macro get_period_sql(target_cols_csv, sql, timestamp_field, period, start_timestamp, stop_timestamp, offset) -%}\n    {{ return(adapter.dispatch('get_period_sql', 'dbt_utils')(target_cols_csv, sql, timestamp_field, period, start_timestamp, stop_timestamp, offset)) }}\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": { "macros": ["macro.dbt_utils.default__get_period_sql"] },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1665426349.9851038,
      "supported_languages": null
    },
    "macro.dbt_utils.default__get_period_sql": {
      "unique_id": "macro.dbt_utils.default__get_period_sql",
      "package_name": "dbt_utils",
      "root_path": "/Users/sung/Desktop/dbt/dbt_env/dbt_packages/dbt_utils",
      "path": "macros/materializations/insert_by_period_materialization.sql",
      "original_file_path": "macros/materializations/insert_by_period_materialization.sql",
      "name": "default__get_period_sql",
      "macro_sql": "{% macro default__get_period_sql(target_cols_csv, sql, timestamp_field, period, start_timestamp, stop_timestamp, offset) -%}\n\n  {%- set period_filter -%}\n    (\"{{timestamp_field}}\" >  '{{start_timestamp}}'::timestamp + interval '{{offset}} {{period}}' and\n     \"{{timestamp_field}}\" <= '{{start_timestamp}}'::timestamp + interval '{{offset}} {{period}}' + interval '1 {{period}}' and\n     \"{{timestamp_field}}\" <  '{{stop_timestamp}}'::timestamp)\n  {%- endset -%}\n\n  {%- set filtered_sql = sql | replace(\"__PERIOD_FILTER__\", period_filter) -%}\n\n  select\n    {{target_cols_csv}}\n  from (\n    {{filtered_sql}}\n  )\n\n{%- endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": { "macros": [] },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1665426349.98627,
      "supported_languages": null
    },
    "macro.dbt_utils.materialization_insert_by_period_default": {
      "unique_id": "macro.dbt_utils.materialization_insert_by_period_default",
      "package_name": "dbt_utils",
      "root_path": "/Users/sung/Desktop/dbt/dbt_env/dbt_packages/dbt_utils",
      "path": "macros/materializations/insert_by_period_materialization.sql",
      "original_file_path": "macros/materializations/insert_by_period_materialization.sql",
      "name": "materialization_insert_by_period_default",
      "macro_sql": "{% materialization insert_by_period, default -%}\n  {%- set timestamp_field = config.require('timestamp_field') -%}\n  {%- set start_date = config.require('start_date') -%}\n  {%- set stop_date = config.get('stop_date') or '' -%}}\n  {%- set period = config.get('period') or 'week' -%}\n\n  {%- if sql.find('__PERIOD_FILTER__') == -1 -%}\n    {%- set error_message -%}\n      Model '{{ model.unique_id }}' does not include the required string '__PERIOD_FILTER__' in its sql\n    {%- endset -%}\n    {{ exceptions.raise_compiler_error(error_message) }}\n  {%- endif -%}\n\n  {%- set identifier = model['name'] -%}\n\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n  {%- set target_relation = api.Relation.create(identifier=identifier, schema=schema, type='table') -%}\n\n  {%- set non_destructive_mode = (flags.NON_DESTRUCTIVE == True) -%}\n  {%- set full_refresh_mode = (flags.FULL_REFRESH == True) -%}\n\n  {%- set exists_as_table = (old_relation is not none and old_relation.is_table) -%}\n  {%- set exists_not_as_table = (old_relation is not none and not old_relation.is_table) -%}\n\n  {%- set should_truncate = (non_destructive_mode and full_refresh_mode and exists_as_table) -%}\n  {%- set should_drop = (not should_truncate and (full_refresh_mode or exists_not_as_table)) -%}\n  {%- set force_create = (flags.FULL_REFRESH and not flags.NON_DESTRUCTIVE) -%}\n\n  -- setup\n  {% if old_relation is none -%}\n    -- noop\n  {%- elif should_truncate -%}\n    {{adapter.truncate_relation(old_relation)}}\n  {%- elif should_drop -%}\n    {{adapter.drop_relation(old_relation)}}\n    {%- set old_relation = none -%}\n  {%- endif %}\n\n  {{run_hooks(pre_hooks, inside_transaction=False)}}\n\n  -- `begin` happens here, so `commit` after it to finish the transaction\n  {{run_hooks(pre_hooks, inside_transaction=True)}}\n  {% call statement() -%}\n    begin; -- make extra sure we've closed out the transaction\n    commit;\n  {%- endcall %}\n\n  -- build model\n  {% if force_create or old_relation is none -%}\n    {# Create an empty target table -#}\n    {% call statement('main') -%}\n      {%- set empty_sql = sql | replace(\"__PERIOD_FILTER__\", 'false') -%}\n      {{create_table_as(False, target_relation, empty_sql)}}\n    {%- endcall %}\n  {%- endif %}\n\n  {% set _ = dbt_utils.get_period_boundaries(schema,\n                                              identifier,\n                                              timestamp_field,\n                                              start_date,\n                                              stop_date,\n                                              period) %}\n  {%- set start_timestamp = load_result('period_boundaries')['data'][0][0] | string -%}\n  {%- set stop_timestamp = load_result('period_boundaries')['data'][0][1] | string -%}\n  {%- set num_periods = load_result('period_boundaries')['data'][0][2] | int -%}\n\n  {% set target_columns = adapter.get_columns_in_relation(target_relation) %}\n  {%- set target_cols_csv = target_columns | map(attribute='quoted') | join(', ') -%}\n  {%- set loop_vars = {'sum_rows_inserted': 0} -%}\n\n  -- commit each period as a separate transaction\n  {% for i in range(num_periods) -%}\n    {%- set msg = \"Running for \" ~ period ~ \" \" ~ (i + 1) ~ \" of \" ~ (num_periods) -%}\n    {{ dbt_utils.log_info(msg) }}\n\n    {%- set tmp_identifier = model['name'] ~ '__dbt_incremental_period' ~ i ~ '_tmp' -%}\n    {%- set tmp_relation = api.Relation.create(identifier=tmp_identifier,\n                                               schema=schema, type='table') -%}\n    {% call statement() -%}\n      {% set tmp_table_sql = dbt_utils.get_period_sql(target_cols_csv,\n                                                       sql,\n                                                       timestamp_field,\n                                                       period,\n                                                       start_timestamp,\n                                                       stop_timestamp,\n                                                       i) %}\n      {{dbt.create_table_as(True, tmp_relation, tmp_table_sql)}}\n    {%- endcall %}\n\n    {{adapter.expand_target_column_types(from_relation=tmp_relation,\n                                         to_relation=target_relation)}}\n    {%- set name = 'main-' ~ i -%}\n    {% call statement(name, fetch_result=True) -%}\n      insert into {{target_relation}} ({{target_cols_csv}})\n      (\n          select\n              {{target_cols_csv}}\n          from {{tmp_relation.include(schema=False)}}\n      );\n    {%- endcall %}\n    {% set result = load_result('main-' ~ i) %}\n    {% if 'response' in result.keys() %} {# added in v0.19.0 #}\n        {% set rows_inserted = result['response']['rows_affected'] %}\n    {% else %} {# older versions #}\n        {% set rows_inserted = result['status'].split(\" \")[2] | int %}\n    {% endif %}\n    \n    {%- set sum_rows_inserted = loop_vars['sum_rows_inserted'] + rows_inserted -%}\n    {%- if loop_vars.update({'sum_rows_inserted': sum_rows_inserted}) %} {% endif -%}\n\n    {%- set msg = \"Ran for \" ~ period ~ \" \" ~ (i + 1) ~ \" of \" ~ (num_periods) ~ \"; \" ~ rows_inserted ~ \" records inserted\" -%}\n    {{ dbt_utils.log_info(msg) }}\n\n  {%- endfor %}\n\n  {% call statement() -%}\n    begin;\n  {%- endcall %}\n\n  {{run_hooks(post_hooks, inside_transaction=True)}}\n\n  {% call statement() -%}\n    commit;\n  {%- endcall %}\n\n  {{run_hooks(post_hooks, inside_transaction=False)}}\n\n  {%- set status_string = \"INSERT \" ~ loop_vars['sum_rows_inserted'] -%}\n\n  {% call noop_statement('main', status_string) -%}\n    -- no-op\n  {%- endcall %}\n\n  -- Return the relations created in this materialization\n  {{ return({'relations': [target_relation]}) }}  \n\n{%- endmaterialization %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": [
          "macro.dbt.run_hooks",
          "macro.dbt.statement",
          "macro.dbt.create_table_as",
          "macro.dbt_utils.get_period_boundaries",
          "macro.dbt_utils.log_info",
          "macro.dbt_utils.get_period_sql",
          "macro.dbt.noop_statement"
        ]
      },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1665426350.000791,
      "supported_languages": ["sql"]
    },
    "macro.dbt_utils.get_url_host": {
      "unique_id": "macro.dbt_utils.get_url_host",
      "package_name": "dbt_utils",
      "root_path": "/Users/sung/Desktop/dbt/dbt_env/dbt_packages/dbt_utils",
      "path": "macros/web/get_url_host.sql",
      "original_file_path": "macros/web/get_url_host.sql",
      "name": "get_url_host",
      "macro_sql": "{% macro get_url_host(field) -%}\n    {{ return(adapter.dispatch('get_url_host', 'dbt_utils')(field)) }}\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": { "macros": ["macro.dbt_utils.default__get_url_host"] },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1665426350.00235,
      "supported_languages": null
    },
    "macro.dbt_utils.default__get_url_host": {
      "unique_id": "macro.dbt_utils.default__get_url_host",
      "package_name": "dbt_utils",
      "root_path": "/Users/sung/Desktop/dbt/dbt_env/dbt_packages/dbt_utils",
      "path": "macros/web/get_url_host.sql",
      "original_file_path": "macros/web/get_url_host.sql",
      "name": "default__get_url_host",
      "macro_sql": "{% macro default__get_url_host(field) -%}\n\n{%- set parsed =\n    dbt_utils.split_part(\n        dbt_utils.split_part(\n            dbt_utils.replace(\n                dbt_utils.replace(\n                    dbt_utils.replace(field, \"'android-app://'\", \"''\"\n                    ), \"'http://'\", \"''\"\n                ), \"'https://'\", \"''\"\n            ), \"'/'\", 1\n        ), \"'?'\", 1\n    )\n\n-%}\n\n\n    {{ dbt_utils.safe_cast(\n        parsed,\n        dbt_utils.type_string()\n        )}}\n\n{%- endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": [
          "macro.dbt_utils.split_part",
          "macro.dbt_utils.replace",
          "macro.dbt_utils.safe_cast",
          "macro.dbt_utils.type_string"
        ]
      },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1665426350.003979,
      "supported_languages": null
    },
    "macro.dbt_utils.get_url_path": {
      "unique_id": "macro.dbt_utils.get_url_path",
      "package_name": "dbt_utils",
      "root_path": "/Users/sung/Desktop/dbt/dbt_env/dbt_packages/dbt_utils",
      "path": "macros/web/get_url_path.sql",
      "original_file_path": "macros/web/get_url_path.sql",
      "name": "get_url_path",
      "macro_sql": "{% macro get_url_path(field) -%}\n    {{ return(adapter.dispatch('get_url_path', 'dbt_utils')(field)) }}\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": { "macros": ["macro.dbt_utils.default__get_url_path"] },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1665426350.005624,
      "supported_languages": null
    },
    "macro.dbt_utils.default__get_url_path": {
      "unique_id": "macro.dbt_utils.default__get_url_path",
      "package_name": "dbt_utils",
      "root_path": "/Users/sung/Desktop/dbt/dbt_env/dbt_packages/dbt_utils",
      "path": "macros/web/get_url_path.sql",
      "original_file_path": "macros/web/get_url_path.sql",
      "name": "default__get_url_path",
      "macro_sql": "{% macro default__get_url_path(field) -%}\n\n    {%- set stripped_url = \n        dbt_utils.replace(\n            dbt_utils.replace(field, \"'http://'\", \"''\"), \"'https://'\", \"''\")\n    -%}\n\n    {%- set first_slash_pos -%}\n        coalesce(\n            nullif({{dbt_utils.position(\"'/'\", stripped_url)}}, 0),\n            {{dbt_utils.position(\"'?'\", stripped_url)}} - 1\n            )\n    {%- endset -%}\n\n    {%- set parsed_path =\n        dbt_utils.split_part(\n            dbt_utils.right(\n                stripped_url, \n                dbt_utils.length(stripped_url) ~ \"-\" ~ first_slash_pos\n                ), \n            \"'?'\", 1\n            )\n    -%}\n\n    {{ dbt_utils.safe_cast(\n        parsed_path,\n        dbt_utils.type_string()\n    )}}\n    \n{%- endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": [
          "macro.dbt_utils.replace",
          "macro.dbt_utils.position",
          "macro.dbt_utils.split_part",
          "macro.dbt_utils.right",
          "macro.dbt_utils.length",
          "macro.dbt_utils.safe_cast",
          "macro.dbt_utils.type_string"
        ]
      },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1665426350.0072331,
      "supported_languages": null
    },
    "macro.dbt_utils.get_url_parameter": {
      "unique_id": "macro.dbt_utils.get_url_parameter",
      "package_name": "dbt_utils",
      "root_path": "/Users/sung/Desktop/dbt/dbt_env/dbt_packages/dbt_utils",
      "path": "macros/web/get_url_parameter.sql",
      "original_file_path": "macros/web/get_url_parameter.sql",
      "name": "get_url_parameter",
      "macro_sql": "{% macro get_url_parameter(field, url_parameter) -%}\n    {{ return(adapter.dispatch('get_url_parameter', 'dbt_utils')(field, url_parameter)) }}\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": ["macro.dbt_utils.default__get_url_parameter"]
      },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1665426350.008404,
      "supported_languages": null
    },
    "macro.dbt_utils.default__get_url_parameter": {
      "unique_id": "macro.dbt_utils.default__get_url_parameter",
      "package_name": "dbt_utils",
      "root_path": "/Users/sung/Desktop/dbt/dbt_env/dbt_packages/dbt_utils",
      "path": "macros/web/get_url_parameter.sql",
      "original_file_path": "macros/web/get_url_parameter.sql",
      "name": "default__get_url_parameter",
      "macro_sql": "{% macro default__get_url_parameter(field, url_parameter) -%}\n\n{%- set formatted_url_parameter = \"'\" + url_parameter + \"='\" -%}\n\n{%- set split = dbt_utils.split_part(dbt_utils.split_part(field, formatted_url_parameter, 2), \"'&'\", 1) -%}\n\nnullif({{ split }},'')\n\n{%- endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": { "macros": ["macro.dbt_utils.split_part"] },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1665426350.009217,
      "supported_languages": null
    },
    "macro.dbt_utils.pretty_log_format": {
      "unique_id": "macro.dbt_utils.pretty_log_format",
      "package_name": "dbt_utils",
      "root_path": "/Users/sung/Desktop/dbt/dbt_env/dbt_packages/dbt_utils",
      "path": "macros/jinja_helpers/pretty_log_format.sql",
      "original_file_path": "macros/jinja_helpers/pretty_log_format.sql",
      "name": "pretty_log_format",
      "macro_sql": "{% macro pretty_log_format(message) %}\n    {{ return(adapter.dispatch('pretty_log_format', 'dbt_utils')(message)) }}\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": ["macro.dbt_utils.default__pretty_log_format"]
      },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1665426350.0105972,
      "supported_languages": null
    },
    "macro.dbt_utils.default__pretty_log_format": {
      "unique_id": "macro.dbt_utils.default__pretty_log_format",
      "package_name": "dbt_utils",
      "root_path": "/Users/sung/Desktop/dbt/dbt_env/dbt_packages/dbt_utils",
      "path": "macros/jinja_helpers/pretty_log_format.sql",
      "original_file_path": "macros/jinja_helpers/pretty_log_format.sql",
      "name": "default__pretty_log_format",
      "macro_sql": "{% macro default__pretty_log_format(message) %}\n    {{ return( dbt_utils.pretty_time() ~ ' + ' ~ message) }}\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": { "macros": ["macro.dbt_utils.pretty_time"] },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1665426350.01105,
      "supported_languages": null
    },
    "macro.dbt_utils.pretty_time": {
      "unique_id": "macro.dbt_utils.pretty_time",
      "package_name": "dbt_utils",
      "root_path": "/Users/sung/Desktop/dbt/dbt_env/dbt_packages/dbt_utils",
      "path": "macros/jinja_helpers/pretty_time.sql",
      "original_file_path": "macros/jinja_helpers/pretty_time.sql",
      "name": "pretty_time",
      "macro_sql": "{% macro pretty_time(format='%H:%M:%S') %}\n    {{ return(adapter.dispatch('pretty_time', 'dbt_utils')(format)) }}\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": { "macros": ["macro.dbt_utils.default__pretty_time"] },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1665426350.012036,
      "supported_languages": null
    },
    "macro.dbt_utils.default__pretty_time": {
      "unique_id": "macro.dbt_utils.default__pretty_time",
      "package_name": "dbt_utils",
      "root_path": "/Users/sung/Desktop/dbt/dbt_env/dbt_packages/dbt_utils",
      "path": "macros/jinja_helpers/pretty_time.sql",
      "original_file_path": "macros/jinja_helpers/pretty_time.sql",
      "name": "default__pretty_time",
      "macro_sql": "{% macro default__pretty_time(format='%H:%M:%S') %}\n    {{ return(modules.datetime.datetime.now().strftime(format)) }}\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": { "macros": [] },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1665426350.0124958,
      "supported_languages": null
    },
    "macro.dbt_utils.log_info": {
      "unique_id": "macro.dbt_utils.log_info",
      "package_name": "dbt_utils",
      "root_path": "/Users/sung/Desktop/dbt/dbt_env/dbt_packages/dbt_utils",
      "path": "macros/jinja_helpers/log_info.sql",
      "original_file_path": "macros/jinja_helpers/log_info.sql",
      "name": "log_info",
      "macro_sql": "{% macro log_info(message) %}\n    {{ return(adapter.dispatch('log_info', 'dbt_utils')(message)) }}\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": { "macros": ["macro.dbt_utils.default__log_info"] },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1665426350.013303,
      "supported_languages": null
    },
    "macro.dbt_utils.default__log_info": {
      "unique_id": "macro.dbt_utils.default__log_info",
      "package_name": "dbt_utils",
      "root_path": "/Users/sung/Desktop/dbt/dbt_env/dbt_packages/dbt_utils",
      "path": "macros/jinja_helpers/log_info.sql",
      "original_file_path": "macros/jinja_helpers/log_info.sql",
      "name": "default__log_info",
      "macro_sql": "{% macro default__log_info(message) %}\n    {{ log(dbt_utils.pretty_log_format(message), info=True) }}\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": { "macros": ["macro.dbt_utils.pretty_log_format"] },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1665426350.01371,
      "supported_languages": null
    },
    "macro.dbt_utils.slugify": {
      "unique_id": "macro.dbt_utils.slugify",
      "package_name": "dbt_utils",
      "root_path": "/Users/sung/Desktop/dbt/dbt_env/dbt_packages/dbt_utils",
      "path": "macros/jinja_helpers/slugify.sql",
      "original_file_path": "macros/jinja_helpers/slugify.sql",
      "name": "slugify",
      "macro_sql": "{% macro slugify(string) %}\n\n{#- Lower case the string -#}\n{% set string = string | lower %}\n{#- Replace spaces and dashes with underscores -#}\n{% set string = modules.re.sub('[ -]+', '_', string) %}\n{#- Only take letters, numbers, and underscores -#}\n{% set string = modules.re.sub('[^a-z0-9_]+', '', string) %}\n\n{{ return(string) }}\n\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": { "macros": [] },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1665426350.014942,
      "supported_languages": null
    },
    "macro.dbt_utils.test_fewer_rows_than": {
      "unique_id": "macro.dbt_utils.test_fewer_rows_than",
      "package_name": "dbt_utils",
      "root_path": "/Users/sung/Desktop/dbt/dbt_env/dbt_packages/dbt_utils",
      "path": "macros/schema_tests/fewer_rows_than.sql",
      "original_file_path": "macros/schema_tests/fewer_rows_than.sql",
      "name": "test_fewer_rows_than",
      "macro_sql": "{% test fewer_rows_than(model, compare_model) %}\n  {{ return(adapter.dispatch('test_fewer_rows_than', 'dbt_utils')(model, compare_model)) }}\n{% endtest %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": ["macro.dbt_utils.default__test_fewer_rows_than"]
      },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1665426350.0161228,
      "supported_languages": null
    },
    "macro.dbt_utils.default__test_fewer_rows_than": {
      "unique_id": "macro.dbt_utils.default__test_fewer_rows_than",
      "package_name": "dbt_utils",
      "root_path": "/Users/sung/Desktop/dbt/dbt_env/dbt_packages/dbt_utils",
      "path": "macros/schema_tests/fewer_rows_than.sql",
      "original_file_path": "macros/schema_tests/fewer_rows_than.sql",
      "name": "default__test_fewer_rows_than",
      "macro_sql": "{% macro default__test_fewer_rows_than(model, compare_model) %}\n\n{{ config(fail_calc = 'coalesce(row_count_delta, 0)') }}\n\nwith a as (\n\n    select count(*) as count_our_model from {{ model }}\n\n),\nb as (\n\n    select count(*) as count_comparison_model from {{ compare_model }}\n\n),\ncounts as (\n\n    select\n        count_our_model,\n        count_comparison_model\n    from a\n    cross join b\n\n),\nfinal as (\n\n    select *,\n        case\n            -- fail the test if we have more rows than the reference model and return the row count delta\n            when count_our_model > count_comparison_model then (count_our_model - count_comparison_model)\n            -- fail the test if they are the same number\n            when count_our_model = count_comparison_model then 1\n            -- pass the test if the delta is positive (i.e. return the number 0)\n            else 0\n    end as row_count_delta\n    from counts\n\n)\n\nselect * from final\n\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": { "macros": [] },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1665426350.016635,
      "supported_languages": null
    },
    "macro.dbt_utils.test_equal_rowcount": {
      "unique_id": "macro.dbt_utils.test_equal_rowcount",
      "package_name": "dbt_utils",
      "root_path": "/Users/sung/Desktop/dbt/dbt_env/dbt_packages/dbt_utils",
      "path": "macros/schema_tests/equal_rowcount.sql",
      "original_file_path": "macros/schema_tests/equal_rowcount.sql",
      "name": "test_equal_rowcount",
      "macro_sql": "{% test equal_rowcount(model, compare_model) %}\n  {{ return(adapter.dispatch('test_equal_rowcount', 'dbt_utils')(model, compare_model)) }}\n{% endtest %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": ["macro.dbt_utils.default__test_equal_rowcount"]
      },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1665426350.017609,
      "supported_languages": null
    },
    "macro.dbt_utils.default__test_equal_rowcount": {
      "unique_id": "macro.dbt_utils.default__test_equal_rowcount",
      "package_name": "dbt_utils",
      "root_path": "/Users/sung/Desktop/dbt/dbt_env/dbt_packages/dbt_utils",
      "path": "macros/schema_tests/equal_rowcount.sql",
      "original_file_path": "macros/schema_tests/equal_rowcount.sql",
      "name": "default__test_equal_rowcount",
      "macro_sql": "{% macro default__test_equal_rowcount(model, compare_model) %}\n\n{#-- Needs to be set at parse time, before we return '' below --#}\n{{ config(fail_calc = 'coalesce(diff_count, 0)') }}\n\n{#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\n{%- if not execute -%}\n    {{ return('') }}\n{% endif %}\n\nwith a as (\n\n    select count(*) as count_a from {{ model }}\n\n),\nb as (\n\n    select count(*) as count_b from {{ compare_model }}\n\n),\nfinal as (\n\n    select\n        count_a,\n        count_b,\n        abs(count_a - count_b) as diff_count\n    from a\n    cross join b\n\n)\n\nselect * from final\n\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": { "macros": [] },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1665426350.0182998,
      "supported_languages": null
    },
    "macro.dbt_utils.test_relationships_where": {
      "unique_id": "macro.dbt_utils.test_relationships_where",
      "package_name": "dbt_utils",
      "root_path": "/Users/sung/Desktop/dbt/dbt_env/dbt_packages/dbt_utils",
      "path": "macros/schema_tests/relationships_where.sql",
      "original_file_path": "macros/schema_tests/relationships_where.sql",
      "name": "test_relationships_where",
      "macro_sql": "{% test relationships_where(model, column_name, to, field, from_condition=\"1=1\", to_condition=\"1=1\") %}\n  {{ return(adapter.dispatch('test_relationships_where', 'dbt_utils')(model, column_name, to, field, from_condition, to_condition)) }}\n{% endtest %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": ["macro.dbt_utils.default__test_relationships_where"]
      },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1665426350.019809,
      "supported_languages": null
    },
    "macro.dbt_utils.default__test_relationships_where": {
      "unique_id": "macro.dbt_utils.default__test_relationships_where",
      "package_name": "dbt_utils",
      "root_path": "/Users/sung/Desktop/dbt/dbt_env/dbt_packages/dbt_utils",
      "path": "macros/schema_tests/relationships_where.sql",
      "original_file_path": "macros/schema_tests/relationships_where.sql",
      "name": "default__test_relationships_where",
      "macro_sql": "{% macro default__test_relationships_where(model, column_name, to, field, from_condition=\"1=1\", to_condition=\"1=1\") %}\n\n{# T-SQL has no boolean data type so we use 1=1 which returns TRUE #}\n{# ref https://stackoverflow.com/a/7170753/3842610 #}\n\nwith left_table as (\n\n  select\n    {{column_name}} as id\n\n  from {{model}}\n\n  where {{column_name}} is not null\n    and {{from_condition}}\n\n),\n\nright_table as (\n\n  select\n    {{field}} as id\n\n  from {{to}}\n\n  where {{field}} is not null\n    and {{to_condition}}\n\n),\n\nexceptions as (\n\n  select\n    left_table.id,\n    right_table.id as right_id\n\n  from left_table\n\n  left join right_table\n         on left_table.id = right_table.id\n\n  where right_table.id is null\n\n)\n\nselect * from exceptions\n\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": { "macros": [] },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1665426350.020637,
      "supported_languages": null
    },
    "macro.dbt_utils.test_recency": {
      "unique_id": "macro.dbt_utils.test_recency",
      "package_name": "dbt_utils",
      "root_path": "/Users/sung/Desktop/dbt/dbt_env/dbt_packages/dbt_utils",
      "path": "macros/schema_tests/recency.sql",
      "original_file_path": "macros/schema_tests/recency.sql",
      "name": "test_recency",
      "macro_sql": "{% test recency(model, field, datepart, interval) %}\n  {{ return(adapter.dispatch('test_recency', 'dbt_utils')(model, field, datepart, interval)) }}\n{% endtest %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": { "macros": ["macro.dbt_utils.default__test_recency"] },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1665426350.02173,
      "supported_languages": null
    },
    "macro.dbt_utils.default__test_recency": {
      "unique_id": "macro.dbt_utils.default__test_recency",
      "package_name": "dbt_utils",
      "root_path": "/Users/sung/Desktop/dbt/dbt_env/dbt_packages/dbt_utils",
      "path": "macros/schema_tests/recency.sql",
      "original_file_path": "macros/schema_tests/recency.sql",
      "name": "default__test_recency",
      "macro_sql": "{% macro default__test_recency(model, field, datepart, interval) %}\n\n{% set threshold = dbt_utils.dateadd(datepart, interval * -1, dbt_utils.current_timestamp()) %}\n\nwith recency as (\n\n    select max({{field}}) as most_recent\n    from {{ model }}\n\n)\n\nselect\n\n    most_recent,\n    {{ threshold }} as threshold\n\nfrom recency\nwhere most_recent < {{ threshold }}\n\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": [
          "macro.dbt_utils.dateadd",
          "macro.dbt_utils.current_timestamp"
        ]
      },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1665426350.0226948,
      "supported_languages": null
    },
    "macro.dbt_utils.test_not_constant": {
      "unique_id": "macro.dbt_utils.test_not_constant",
      "package_name": "dbt_utils",
      "root_path": "/Users/sung/Desktop/dbt/dbt_env/dbt_packages/dbt_utils",
      "path": "macros/schema_tests/not_constant.sql",
      "original_file_path": "macros/schema_tests/not_constant.sql",
      "name": "test_not_constant",
      "macro_sql": "{% test not_constant(model, column_name) %}\n  {{ return(adapter.dispatch('test_not_constant', 'dbt_utils')(model, column_name)) }}\n{% endtest %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": ["macro.dbt_utils.default__test_not_constant"]
      },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1665426350.0236201,
      "supported_languages": null
    },
    "macro.dbt_utils.default__test_not_constant": {
      "unique_id": "macro.dbt_utils.default__test_not_constant",
      "package_name": "dbt_utils",
      "root_path": "/Users/sung/Desktop/dbt/dbt_env/dbt_packages/dbt_utils",
      "path": "macros/schema_tests/not_constant.sql",
      "original_file_path": "macros/schema_tests/not_constant.sql",
      "name": "default__test_not_constant",
      "macro_sql": "{% macro default__test_not_constant(model, column_name) %}\n\n\nselect\n    {# In TSQL, subquery aggregate columns need aliases #}\n    {# thus: a filler col name, 'filler_column' #}\n    count(distinct {{ column_name }}) as filler_column\n\nfrom {{ model }}\n\nhaving count(distinct {{ column_name }}) = 1\n\n\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": { "macros": [] },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1665426350.024092,
      "supported_languages": null
    },
    "macro.dbt_utils.test_accepted_range": {
      "unique_id": "macro.dbt_utils.test_accepted_range",
      "package_name": "dbt_utils",
      "root_path": "/Users/sung/Desktop/dbt/dbt_env/dbt_packages/dbt_utils",
      "path": "macros/schema_tests/accepted_range.sql",
      "original_file_path": "macros/schema_tests/accepted_range.sql",
      "name": "test_accepted_range",
      "macro_sql": "{% test accepted_range(model, column_name, min_value=none, max_value=none, inclusive=true) %}\n  {{ return(adapter.dispatch('test_accepted_range', 'dbt_utils')(model, column_name, min_value, max_value, inclusive)) }}\n{% endtest %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": ["macro.dbt_utils.default__test_accepted_range"]
      },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1665426350.02597,
      "supported_languages": null
    },
    "macro.dbt_utils.default__test_accepted_range": {
      "unique_id": "macro.dbt_utils.default__test_accepted_range",
      "package_name": "dbt_utils",
      "root_path": "/Users/sung/Desktop/dbt/dbt_env/dbt_packages/dbt_utils",
      "path": "macros/schema_tests/accepted_range.sql",
      "original_file_path": "macros/schema_tests/accepted_range.sql",
      "name": "default__test_accepted_range",
      "macro_sql": "{% macro default__test_accepted_range(model, column_name, min_value=none, max_value=none, inclusive=true) %}\n\nwith meet_condition as(\n  select *\n  from {{ model }}\n),\n\nvalidation_errors as (\n  select *\n  from meet_condition\n  where\n    -- never true, defaults to an empty result set. Exists to ensure any combo of the `or` clauses below succeeds\n    1 = 2\n\n  {%- if min_value is not none %}\n    -- records with a value >= min_value are permitted. The `not` flips this to find records that don't meet the rule.\n    or not {{ column_name }} > {{- \"=\" if inclusive }} {{ min_value }}\n  {%- endif %}\n\n  {%- if max_value is not none %}\n    -- records with a value <= max_value are permitted. The `not` flips this to find records that don't meet the rule.\n    or not {{ column_name }} < {{- \"=\" if inclusive }} {{ max_value }}\n  {%- endif %}\n)\n\nselect *\nfrom validation_errors\n\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": { "macros": [] },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1665426350.0275571,
      "supported_languages": null
    },
    "macro.dbt_utils.test_not_accepted_values": {
      "unique_id": "macro.dbt_utils.test_not_accepted_values",
      "package_name": "dbt_utils",
      "root_path": "/Users/sung/Desktop/dbt/dbt_env/dbt_packages/dbt_utils",
      "path": "macros/schema_tests/not_accepted_values.sql",
      "original_file_path": "macros/schema_tests/not_accepted_values.sql",
      "name": "test_not_accepted_values",
      "macro_sql": "{% test not_accepted_values(model, column_name, values, quote=True) %}\n  {{ return(adapter.dispatch('test_not_accepted_values', 'dbt_utils')(model, column_name, values, quote)) }}\n{% endtest %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": ["macro.dbt_utils.default__test_not_accepted_values"]
      },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1665426350.029234,
      "supported_languages": null
    },
    "macro.dbt_utils.default__test_not_accepted_values": {
      "unique_id": "macro.dbt_utils.default__test_not_accepted_values",
      "package_name": "dbt_utils",
      "root_path": "/Users/sung/Desktop/dbt/dbt_env/dbt_packages/dbt_utils",
      "path": "macros/schema_tests/not_accepted_values.sql",
      "original_file_path": "macros/schema_tests/not_accepted_values.sql",
      "name": "default__test_not_accepted_values",
      "macro_sql": "{% macro default__test_not_accepted_values(model, column_name, values, quote=True) %}\nwith all_values as (\n\n    select distinct\n        {{ column_name }} as value_field\n\n    from {{ model }}\n\n),\n\nvalidation_errors as (\n\n    select\n        value_field\n\n    from all_values\n    where value_field in (\n        {% for value in values -%}\n            {% if quote -%}\n            '{{ value }}'\n            {%- else -%}\n            {{ value }}\n            {%- endif -%}\n            {%- if not loop.last -%},{%- endif %}\n        {%- endfor %}\n        )\n\n)\n\nselect *\nfrom validation_errors\n\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": { "macros": [] },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1665426350.030438,
      "supported_languages": null
    },
    "macro.dbt_utils.test_unique_where": {
      "unique_id": "macro.dbt_utils.test_unique_where",
      "package_name": "dbt_utils",
      "root_path": "/Users/sung/Desktop/dbt/dbt_env/dbt_packages/dbt_utils",
      "path": "macros/schema_tests/test_unique_where.sql",
      "original_file_path": "macros/schema_tests/test_unique_where.sql",
      "name": "test_unique_where",
      "macro_sql": "{% test unique_where(model, column_name) %}\r\n  {%- set deprecation_warning = '\r\n    Warning: `dbt_utils.unique_where` is no longer supported.\r\n    Starting in dbt v0.20.0, the built-in `unique` test supports a `where` config.\r\n    ' -%}\r\n  {%- do exceptions.warn(deprecation_warning) -%}\r\n  {{ return(adapter.dispatch('test_unique_where', 'dbt_utils')(model, column_name)) }}\r\n{% endtest %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": ["macro.dbt_utils.default__test_unique_where"]
      },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1665426350.031876,
      "supported_languages": null
    },
    "macro.dbt_utils.default__test_unique_where": {
      "unique_id": "macro.dbt_utils.default__test_unique_where",
      "package_name": "dbt_utils",
      "root_path": "/Users/sung/Desktop/dbt/dbt_env/dbt_packages/dbt_utils",
      "path": "macros/schema_tests/test_unique_where.sql",
      "original_file_path": "macros/schema_tests/test_unique_where.sql",
      "name": "default__test_unique_where",
      "macro_sql": "{% macro default__test_unique_where(model, column_name) %}\r\n  {{ return(test_unique(model, column_name)) }}\r\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": { "macros": ["macro.dbt.test_unique"] },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1665426350.032583,
      "supported_languages": null
    },
    "macro.dbt_utils.test_at_least_one": {
      "unique_id": "macro.dbt_utils.test_at_least_one",
      "package_name": "dbt_utils",
      "root_path": "/Users/sung/Desktop/dbt/dbt_env/dbt_packages/dbt_utils",
      "path": "macros/schema_tests/at_least_one.sql",
      "original_file_path": "macros/schema_tests/at_least_one.sql",
      "name": "test_at_least_one",
      "macro_sql": "{% test at_least_one(model, column_name) %}\n  {{ return(adapter.dispatch('test_at_least_one', 'dbt_utils')(model, column_name)) }}\n{% endtest %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": ["macro.dbt_utils.default__test_at_least_one"]
      },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1665426350.0337229,
      "supported_languages": null
    },
    "macro.dbt_utils.default__test_at_least_one": {
      "unique_id": "macro.dbt_utils.default__test_at_least_one",
      "package_name": "dbt_utils",
      "root_path": "/Users/sung/Desktop/dbt/dbt_env/dbt_packages/dbt_utils",
      "path": "macros/schema_tests/at_least_one.sql",
      "original_file_path": "macros/schema_tests/at_least_one.sql",
      "name": "default__test_at_least_one",
      "macro_sql": "{% macro default__test_at_least_one(model, column_name) %}\n\nselect *\nfrom (\n    select\n        {# In TSQL, subquery aggregate columns need aliases #}\n        {# thus: a filler col name, 'filler_column' #}\n      count({{ column_name }}) as filler_column\n\n    from {{ model }}\n\n    having count({{ column_name }}) = 0\n\n) validation_errors\n\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": { "macros": [] },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1665426350.034154,
      "supported_languages": null
    },
    "macro.dbt_utils.test_unique_combination_of_columns": {
      "unique_id": "macro.dbt_utils.test_unique_combination_of_columns",
      "package_name": "dbt_utils",
      "root_path": "/Users/sung/Desktop/dbt/dbt_env/dbt_packages/dbt_utils",
      "path": "macros/schema_tests/unique_combination_of_columns.sql",
      "original_file_path": "macros/schema_tests/unique_combination_of_columns.sql",
      "name": "test_unique_combination_of_columns",
      "macro_sql": "{% test unique_combination_of_columns(model, combination_of_columns, quote_columns=false) %}\n  {{ return(adapter.dispatch('test_unique_combination_of_columns', 'dbt_utils')(model, combination_of_columns, quote_columns)) }}\n{% endtest %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": [
          "macro.dbt_utils.default__test_unique_combination_of_columns"
        ]
      },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1665426350.035601,
      "supported_languages": null
    },
    "macro.dbt_utils.default__test_unique_combination_of_columns": {
      "unique_id": "macro.dbt_utils.default__test_unique_combination_of_columns",
      "package_name": "dbt_utils",
      "root_path": "/Users/sung/Desktop/dbt/dbt_env/dbt_packages/dbt_utils",
      "path": "macros/schema_tests/unique_combination_of_columns.sql",
      "original_file_path": "macros/schema_tests/unique_combination_of_columns.sql",
      "name": "default__test_unique_combination_of_columns",
      "macro_sql": "{% macro default__test_unique_combination_of_columns(model, combination_of_columns, quote_columns=false) %}\n\n{% if not quote_columns %}\n    {%- set column_list=combination_of_columns %}\n{% elif quote_columns %}\n    {%- set column_list=[] %}\n        {% for column in combination_of_columns -%}\n            {% set column_list = column_list.append( adapter.quote(column) ) %}\n        {%- endfor %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\n        \"`quote_columns` argument for unique_combination_of_columns test must be one of [True, False] Got: '\" ~ quote ~\"'.'\"\n    ) }}\n{% endif %}\n\n{%- set columns_csv=column_list | join(', ') %}\n\n\nwith validation_errors as (\n\n    select\n        {{ columns_csv }}\n    from {{ model }}\n    group by {{ columns_csv }}\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": { "macros": [] },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1665426350.037195,
      "supported_languages": null
    },
    "macro.dbt_utils.test_cardinality_equality": {
      "unique_id": "macro.dbt_utils.test_cardinality_equality",
      "package_name": "dbt_utils",
      "root_path": "/Users/sung/Desktop/dbt/dbt_env/dbt_packages/dbt_utils",
      "path": "macros/schema_tests/cardinality_equality.sql",
      "original_file_path": "macros/schema_tests/cardinality_equality.sql",
      "name": "test_cardinality_equality",
      "macro_sql": "{% test cardinality_equality(model, column_name, to, field) %}\n    {{ return(adapter.dispatch('test_cardinality_equality', 'dbt_utils')(model, column_name, to, field)) }}\n{% endtest %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": ["macro.dbt_utils.default__test_cardinality_equality"]
      },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1665426350.038932,
      "supported_languages": null
    },
    "macro.dbt_utils.default__test_cardinality_equality": {
      "unique_id": "macro.dbt_utils.default__test_cardinality_equality",
      "package_name": "dbt_utils",
      "root_path": "/Users/sung/Desktop/dbt/dbt_env/dbt_packages/dbt_utils",
      "path": "macros/schema_tests/cardinality_equality.sql",
      "original_file_path": "macros/schema_tests/cardinality_equality.sql",
      "name": "default__test_cardinality_equality",
      "macro_sql": "{% macro default__test_cardinality_equality(model, column_name, to, field) %}\n\n{# T-SQL does not let you use numbers as aliases for columns #}\n{# Thus, no \"GROUP BY 1\" #}\n\nwith table_a as (\nselect\n  {{ column_name }},\n  count(*) as num_rows\nfrom {{ model }}\ngroup by {{ column_name }}\n),\n\ntable_b as (\nselect\n  {{ field }},\n  count(*) as num_rows\nfrom {{ to }}\ngroup by {{ field }}\n),\n\nexcept_a as (\n  select *\n  from table_a\n  {{ dbt_utils.except() }}\n  select *\n  from table_b\n),\n\nexcept_b as (\n  select *\n  from table_b\n  {{ dbt_utils.except() }}\n  select *\n  from table_a\n),\n\nunioned as (\n  select *\n  from except_a\n  union all\n  select *\n  from except_b\n)\n\nselect *\nfrom unioned\n\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": { "macros": ["macro.dbt_utils.except"] },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1665426350.039765,
      "supported_languages": null
    },
    "macro.dbt_utils.test_expression_is_true": {
      "unique_id": "macro.dbt_utils.test_expression_is_true",
      "package_name": "dbt_utils",
      "root_path": "/Users/sung/Desktop/dbt/dbt_env/dbt_packages/dbt_utils",
      "path": "macros/schema_tests/expression_is_true.sql",
      "original_file_path": "macros/schema_tests/expression_is_true.sql",
      "name": "test_expression_is_true",
      "macro_sql": "{% test expression_is_true(model, expression, column_name=None, condition='1=1') %}\n{# T-SQL has no boolean data type so we use 1=1 which returns TRUE #}\n{# ref https://stackoverflow.com/a/7170753/3842610 #}\n  {{ return(adapter.dispatch('test_expression_is_true', 'dbt_utils')(model, expression, column_name, condition)) }}\n{% endtest %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": ["macro.dbt_utils.default__test_expression_is_true"]
      },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1665426350.041496,
      "supported_languages": null
    },
    "macro.dbt_utils.default__test_expression_is_true": {
      "unique_id": "macro.dbt_utils.default__test_expression_is_true",
      "package_name": "dbt_utils",
      "root_path": "/Users/sung/Desktop/dbt/dbt_env/dbt_packages/dbt_utils",
      "path": "macros/schema_tests/expression_is_true.sql",
      "original_file_path": "macros/schema_tests/expression_is_true.sql",
      "name": "default__test_expression_is_true",
      "macro_sql": "{% macro default__test_expression_is_true(model, expression, column_name, condition) %}\n\nwith meet_condition as (\n    select * from {{ model }} where {{ condition }}\n)\n\nselect\n    *\nfrom meet_condition\n{% if column_name is none %}\nwhere not({{ expression }})\n{%- else %}\nwhere not({{ column_name }} {{ expression }})\n{%- endif %}\n\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": { "macros": [] },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1665426350.042382,
      "supported_languages": null
    },
    "macro.dbt_utils.test_not_null_proportion": {
      "unique_id": "macro.dbt_utils.test_not_null_proportion",
      "package_name": "dbt_utils",
      "root_path": "/Users/sung/Desktop/dbt/dbt_env/dbt_packages/dbt_utils",
      "path": "macros/schema_tests/not_null_proportion.sql",
      "original_file_path": "macros/schema_tests/not_null_proportion.sql",
      "name": "test_not_null_proportion",
      "macro_sql": "{% macro test_not_null_proportion(model) %}\n  {{ return(adapter.dispatch('test_not_null_proportion', 'dbt_utils')(model, **kwargs)) }}\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": ["macro.dbt_utils.default__test_not_null_proportion"]
      },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1665426350.0440571,
      "supported_languages": null
    },
    "macro.dbt_utils.default__test_not_null_proportion": {
      "unique_id": "macro.dbt_utils.default__test_not_null_proportion",
      "package_name": "dbt_utils",
      "root_path": "/Users/sung/Desktop/dbt/dbt_env/dbt_packages/dbt_utils",
      "path": "macros/schema_tests/not_null_proportion.sql",
      "original_file_path": "macros/schema_tests/not_null_proportion.sql",
      "name": "default__test_not_null_proportion",
      "macro_sql": "{% macro default__test_not_null_proportion(model) %}\n\n{% set column_name = kwargs.get('column_name', kwargs.get('arg')) %}\n{% set at_least = kwargs.get('at_least', kwargs.get('arg')) %}\n{% set at_most = kwargs.get('at_most', kwargs.get('arg', 1)) %}\n\nwith validation as (\n  select\n    sum(case when {{ column_name }} is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion\n  from {{ model }}\n),\nvalidation_errors as (\n  select\n    not_null_proportion\n  from validation\n  where not_null_proportion < {{ at_least }} or not_null_proportion > {{ at_most }}\n)\nselect\n  *\nfrom validation_errors\n\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": { "macros": [] },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1665426350.045388,
      "supported_languages": null
    },
    "macro.dbt_utils.test_sequential_values": {
      "unique_id": "macro.dbt_utils.test_sequential_values",
      "package_name": "dbt_utils",
      "root_path": "/Users/sung/Desktop/dbt/dbt_env/dbt_packages/dbt_utils",
      "path": "macros/schema_tests/sequential_values.sql",
      "original_file_path": "macros/schema_tests/sequential_values.sql",
      "name": "test_sequential_values",
      "macro_sql": "{% test sequential_values(model, column_name, interval=1, datepart=None) %}\n\n  {{ return(adapter.dispatch('test_sequential_values', 'dbt_utils')(model, column_name, interval, datepart)) }}\n\n{% endtest %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": ["macro.dbt_utils.default__test_sequential_values"]
      },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1665426350.047134,
      "supported_languages": null
    },
    "macro.dbt_utils.default__test_sequential_values": {
      "unique_id": "macro.dbt_utils.default__test_sequential_values",
      "package_name": "dbt_utils",
      "root_path": "/Users/sung/Desktop/dbt/dbt_env/dbt_packages/dbt_utils",
      "path": "macros/schema_tests/sequential_values.sql",
      "original_file_path": "macros/schema_tests/sequential_values.sql",
      "name": "default__test_sequential_values",
      "macro_sql": "{% macro default__test_sequential_values(model, column_name, interval=1, datepart=None) %}\n\nwith windowed as (\n\n    select\n        {{ column_name }},\n        lag({{ column_name }}) over (\n            order by {{ column_name }}\n        ) as previous_{{ column_name }}\n    from {{ model }}\n),\n\nvalidation_errors as (\n    select\n        *\n    from windowed\n    {% if datepart %}\n    where not(cast({{ column_name }} as {{ dbt_utils.type_timestamp() }})= cast({{ dbt_utils.dateadd(datepart, interval, 'previous_' + column_name) }} as {{ dbt_utils.type_timestamp() }}))\n    {% else %}\n    where not({{ column_name }} = previous_{{ column_name }} + {{ interval }})\n    {% endif %}\n)\n\nselect *\nfrom validation_errors\n\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": ["macro.dbt_utils.type_timestamp", "macro.dbt_utils.dateadd"]
      },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1665426350.048994,
      "supported_languages": null
    },
    "macro.dbt_utils.test_not_null_where": {
      "unique_id": "macro.dbt_utils.test_not_null_where",
      "package_name": "dbt_utils",
      "root_path": "/Users/sung/Desktop/dbt/dbt_env/dbt_packages/dbt_utils",
      "path": "macros/schema_tests/test_not_null_where.sql",
      "original_file_path": "macros/schema_tests/test_not_null_where.sql",
      "name": "test_not_null_where",
      "macro_sql": "{% test not_null_where(model, column_name) %}\r\n  {%- set deprecation_warning = '\r\n    Warning: `dbt_utils.not_null_where` is no longer supported.\r\n    Starting in dbt v0.20.0, the built-in `not_null` test supports a `where` config.\r\n    ' -%}\r\n  {%- do exceptions.warn(deprecation_warning) -%}\r\n  {{ return(adapter.dispatch('test_not_null_where', 'dbt_utils')(model, column_name)) }}\r\n{% endtest %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": ["macro.dbt_utils.default__test_not_null_where"]
      },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1665426350.050411,
      "supported_languages": null
    },
    "macro.dbt_utils.default__test_not_null_where": {
      "unique_id": "macro.dbt_utils.default__test_not_null_where",
      "package_name": "dbt_utils",
      "root_path": "/Users/sung/Desktop/dbt/dbt_env/dbt_packages/dbt_utils",
      "path": "macros/schema_tests/test_not_null_where.sql",
      "original_file_path": "macros/schema_tests/test_not_null_where.sql",
      "name": "default__test_not_null_where",
      "macro_sql": "{% macro default__test_not_null_where(model, column_name) %}\r\n  {{ return(test_not_null(model, column_name)) }}\r\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": { "macros": ["macro.dbt.test_not_null"] },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1665426350.050868,
      "supported_languages": null
    },
    "macro.dbt_utils.test_equality": {
      "unique_id": "macro.dbt_utils.test_equality",
      "package_name": "dbt_utils",
      "root_path": "/Users/sung/Desktop/dbt/dbt_env/dbt_packages/dbt_utils",
      "path": "macros/schema_tests/equality.sql",
      "original_file_path": "macros/schema_tests/equality.sql",
      "name": "test_equality",
      "macro_sql": "{% test equality(model, compare_model, compare_columns=None) %}\n  {{ return(adapter.dispatch('test_equality', 'dbt_utils')(model, compare_model, compare_columns)) }}\n{% endtest %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": { "macros": ["macro.dbt_utils.default__test_equality"] },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1665426350.052796,
      "supported_languages": null
    },
    "macro.dbt_utils.default__test_equality": {
      "unique_id": "macro.dbt_utils.default__test_equality",
      "package_name": "dbt_utils",
      "root_path": "/Users/sung/Desktop/dbt/dbt_env/dbt_packages/dbt_utils",
      "path": "macros/schema_tests/equality.sql",
      "original_file_path": "macros/schema_tests/equality.sql",
      "name": "default__test_equality",
      "macro_sql": "{% macro default__test_equality(model, compare_model, compare_columns=None) %}\n\n{% set set_diff %}\n    count(*) + coalesce(abs(\n        sum(case when which_diff = 'a_minus_b' then 1 else 0 end) -\n        sum(case when which_diff = 'b_minus_a' then 1 else 0 end)\n    ), 0)\n{% endset %}\n\n{#-- Needs to be set at parse time, before we return '' below --#}\n{{ config(fail_calc = set_diff) }}\n\n{#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\n{%- if not execute -%}\n    {{ return('') }}\n{% endif %}\n\n-- setup\n{%- do dbt_utils._is_relation(model, 'test_equality') -%}\n\n{#-\nIf the compare_cols arg is provided, we can run this test without querying the\ninformation schema\u00a0\u2014 this allows the model to be an ephemeral model\n-#}\n\n{%- if not compare_columns -%}\n    {%- do dbt_utils._is_ephemeral(model, 'test_equality') -%}\n    {%- set compare_columns = adapter.get_columns_in_relation(model) | map(attribute='quoted') -%}\n{%- endif -%}\n\n{% set compare_cols_csv = compare_columns | join(', ') %}\n\nwith a as (\n\n    select * from {{ model }}\n\n),\n\nb as (\n\n    select * from {{ compare_model }}\n\n),\n\na_minus_b as (\n\n    select {{compare_cols_csv}} from a\n    {{ dbt_utils.except() }}\n    select {{compare_cols_csv}} from b\n\n),\n\nb_minus_a as (\n\n    select {{compare_cols_csv}} from b\n    {{ dbt_utils.except() }}\n    select {{compare_cols_csv}} from a\n\n),\n\nunioned as (\n\n    select 'a_minus_b' as which_diff, a_minus_b.* from a_minus_b\n    union all\n    select 'b_minus_a' as which_diff, b_minus_a.* from b_minus_a\n\n)\n\nselect * from unioned\n\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": [
          "macro.dbt_utils._is_relation",
          "macro.dbt_utils._is_ephemeral",
          "macro.dbt_utils.except"
        ]
      },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1665426350.0556521,
      "supported_languages": null
    },
    "macro.dbt_utils.test_mutually_exclusive_ranges": {
      "unique_id": "macro.dbt_utils.test_mutually_exclusive_ranges",
      "package_name": "dbt_utils",
      "root_path": "/Users/sung/Desktop/dbt/dbt_env/dbt_packages/dbt_utils",
      "path": "macros/schema_tests/mutually_exclusive_ranges.sql",
      "original_file_path": "macros/schema_tests/mutually_exclusive_ranges.sql",
      "name": "test_mutually_exclusive_ranges",
      "macro_sql": "{% test mutually_exclusive_ranges(model, lower_bound_column, upper_bound_column, partition_by=None, gaps='allowed', zero_length_range_allowed=False) %}\n  {{ return(adapter.dispatch('test_mutually_exclusive_ranges', 'dbt_utils')(model, lower_bound_column, upper_bound_column, partition_by, gaps, zero_length_range_allowed)) }}\n{% endtest %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": ["macro.dbt_utils.default__test_mutually_exclusive_ranges"]
      },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1665426350.06177,
      "supported_languages": null
    },
    "macro.dbt_utils.default__test_mutually_exclusive_ranges": {
      "unique_id": "macro.dbt_utils.default__test_mutually_exclusive_ranges",
      "package_name": "dbt_utils",
      "root_path": "/Users/sung/Desktop/dbt/dbt_env/dbt_packages/dbt_utils",
      "path": "macros/schema_tests/mutually_exclusive_ranges.sql",
      "original_file_path": "macros/schema_tests/mutually_exclusive_ranges.sql",
      "name": "default__test_mutually_exclusive_ranges",
      "macro_sql": "{% macro default__test_mutually_exclusive_ranges(model, lower_bound_column, upper_bound_column, partition_by=None, gaps='allowed', zero_length_range_allowed=False) %}\n{% if gaps == 'not_allowed' %}\n    {% set allow_gaps_operator='=' %}\n    {% set allow_gaps_operator_in_words='equal_to' %}\n{% elif gaps == 'allowed' %}\n    {% set allow_gaps_operator='<=' %}\n    {% set allow_gaps_operator_in_words='less_than_or_equal_to' %}\n{% elif gaps == 'required' %}\n    {% set allow_gaps_operator='<' %}\n    {% set allow_gaps_operator_in_words='less_than' %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\n        \"`gaps` argument for mutually_exclusive_ranges test must be one of ['not_allowed', 'allowed', 'required'] Got: '\" ~ gaps ~\"'.'\"\n    ) }}\n{% endif %}\n{% if not zero_length_range_allowed %}\n    {% set allow_zero_length_operator='<' %}\n    {% set allow_zero_length_operator_in_words='less_than' %}\n{% elif zero_length_range_allowed %}\n    {% set allow_zero_length_operator='<=' %}\n    {% set allow_zero_length_operator_in_words='less_than_or_equal_to' %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\n        \"`zero_length_range_allowed` argument for mutually_exclusive_ranges test must be one of [true, false] Got: '\" ~ zero_length_range_allowed ~\"'.'\"\n    ) }}\n{% endif %}\n\n{% set partition_clause=\"partition by \" ~ partition_by if partition_by else '' %}\n\nwith window_functions as (\n\n    select\n        {% if partition_by %}\n        {{ partition_by }} as partition_by_col,\n        {% endif %}\n        {{ lower_bound_column }} as lower_bound,\n        {{ upper_bound_column }} as upper_bound,\n\n        lead({{ lower_bound_column }}) over (\n            {{ partition_clause }}\n            order by {{ lower_bound_column }}\n        ) as next_lower_bound,\n\n        row_number() over (\n            {{ partition_clause }}\n            order by {{ lower_bound_column }} desc\n        ) = 1 as is_last_record\n\n    from {{ model }}\n\n),\n\ncalc as (\n    -- We want to return records where one of our assumptions fails, so we'll use\n    -- the `not` function with `and` statements so we can write our assumptions nore cleanly\n    select\n        *,\n\n        -- For each record: lower_bound should be < upper_bound.\n        -- Coalesce it to return an error on the null case (implicit assumption\n        -- these columns are not_null)\n        coalesce(\n            lower_bound {{ allow_zero_length_operator }} upper_bound,\n            false\n        ) as lower_bound_{{ allow_zero_length_operator_in_words }}_upper_bound,\n\n        -- For each record: upper_bound {{ allow_gaps_operator }} the next lower_bound.\n        -- Coalesce it to handle null cases for the last record.\n        coalesce(\n            upper_bound {{ allow_gaps_operator }} next_lower_bound,\n            is_last_record,\n            false\n        ) as upper_bound_{{ allow_gaps_operator_in_words }}_next_lower_bound\n\n    from window_functions\n\n),\n\nvalidation_errors as (\n\n    select\n        *\n    from calc\n\n    where not(\n        -- THE FOLLOWING SHOULD BE TRUE --\n        lower_bound_{{ allow_zero_length_operator_in_words }}_upper_bound\n        and upper_bound_{{ allow_gaps_operator_in_words }}_next_lower_bound\n    )\n)\n\nselect * from validation_errors\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": { "macros": [] },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1665426350.065711,
      "supported_languages": null
    },
    "macro.dbt_utils.get_intervals_between": {
      "unique_id": "macro.dbt_utils.get_intervals_between",
      "package_name": "dbt_utils",
      "root_path": "/Users/sung/Desktop/dbt/dbt_env/dbt_packages/dbt_utils",
      "path": "macros/sql/date_spine.sql",
      "original_file_path": "macros/sql/date_spine.sql",
      "name": "get_intervals_between",
      "macro_sql": "{% macro get_intervals_between(start_date, end_date, datepart) -%}\n    {{ return(adapter.dispatch('get_intervals_between', 'dbt_utils')(start_date, end_date, datepart)) }}\n{%- endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": ["macro.dbt_utils.default__get_intervals_between"]
      },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1665426350.067934,
      "supported_languages": null
    },
    "macro.dbt_utils.default__get_intervals_between": {
      "unique_id": "macro.dbt_utils.default__get_intervals_between",
      "package_name": "dbt_utils",
      "root_path": "/Users/sung/Desktop/dbt/dbt_env/dbt_packages/dbt_utils",
      "path": "macros/sql/date_spine.sql",
      "original_file_path": "macros/sql/date_spine.sql",
      "name": "default__get_intervals_between",
      "macro_sql": "{% macro default__get_intervals_between(start_date, end_date, datepart) -%}\n    {%- call statement('get_intervals_between', fetch_result=True) %}\n\n        select {{dbt_utils.datediff(start_date, end_date, datepart)}}\n\n    {%- endcall -%}\n\n    {%- set value_list = load_result('get_intervals_between') -%}\n\n    {%- if value_list and value_list['data'] -%}\n        {%- set values = value_list['data'] | map(attribute=0) | list %}\n        {{ return(values[0]) }}\n    {%- else -%}\n        {{ return(1) }}\n    {%- endif -%}\n\n{%- endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": ["macro.dbt.statement", "macro.dbt_utils.datediff"]
      },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1665426350.069592,
      "supported_languages": null
    },
    "macro.dbt_utils.date_spine": {
      "unique_id": "macro.dbt_utils.date_spine",
      "package_name": "dbt_utils",
      "root_path": "/Users/sung/Desktop/dbt/dbt_env/dbt_packages/dbt_utils",
      "path": "macros/sql/date_spine.sql",
      "original_file_path": "macros/sql/date_spine.sql",
      "name": "date_spine",
      "macro_sql": "{% macro date_spine(datepart, start_date, end_date) %}\n    {{ return(adapter.dispatch('date_spine', 'dbt_utils')(datepart, start_date, end_date)) }}\n{%- endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": { "macros": ["macro.dbt_utils.default__date_spine"] },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1665426350.0703628,
      "supported_languages": null
    },
    "macro.dbt_utils.default__date_spine": {
      "unique_id": "macro.dbt_utils.default__date_spine",
      "package_name": "dbt_utils",
      "root_path": "/Users/sung/Desktop/dbt/dbt_env/dbt_packages/dbt_utils",
      "path": "macros/sql/date_spine.sql",
      "original_file_path": "macros/sql/date_spine.sql",
      "name": "default__date_spine",
      "macro_sql": "{% macro default__date_spine(datepart, start_date, end_date) %}\n\n/*\ncall as follows:\n\ndate_spine(\n    \"day\",\n    \"to_date('01/01/2016', 'mm/dd/yyyy')\",\n    \"dateadd(week, 1, current_date)\"\n)\n\n*/\n\nwith rawdata as (\n\n    {{dbt_utils.generate_series(\n        dbt_utils.get_intervals_between(start_date, end_date, datepart)\n    )}}\n\n),\n\nall_periods as (\n\n    select (\n        {{\n            dbt_utils.dateadd(\n                datepart,\n                \"row_number() over (order by 1) - 1\",\n                start_date\n            )\n        }}\n    ) as date_{{datepart}}\n    from rawdata\n\n),\n\nfiltered as (\n\n    select *\n    from all_periods\n    where date_{{datepart}} <= {{ end_date }}\n\n)\n\nselect * from filtered\n\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": [
          "macro.dbt_utils.generate_series",
          "macro.dbt_utils.get_intervals_between",
          "macro.dbt_utils.dateadd"
        ]
      },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1665426350.0714939,
      "supported_languages": null
    },
    "macro.dbt_utils.nullcheck_table": {
      "unique_id": "macro.dbt_utils.nullcheck_table",
      "package_name": "dbt_utils",
      "root_path": "/Users/sung/Desktop/dbt/dbt_env/dbt_packages/dbt_utils",
      "path": "macros/sql/nullcheck_table.sql",
      "original_file_path": "macros/sql/nullcheck_table.sql",
      "name": "nullcheck_table",
      "macro_sql": "{% macro nullcheck_table(relation) %}\n    {{ return(adapter.dispatch('nullcheck_table', 'dbt_utils')(relation)) }}\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": { "macros": ["macro.dbt_utils.default__nullcheck_table"] },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1665426350.072601,
      "supported_languages": null
    },
    "macro.dbt_utils.default__nullcheck_table": {
      "unique_id": "macro.dbt_utils.default__nullcheck_table",
      "package_name": "dbt_utils",
      "root_path": "/Users/sung/Desktop/dbt/dbt_env/dbt_packages/dbt_utils",
      "path": "macros/sql/nullcheck_table.sql",
      "original_file_path": "macros/sql/nullcheck_table.sql",
      "name": "default__nullcheck_table",
      "macro_sql": "{% macro default__nullcheck_table(relation) %}\n\n  {%- do dbt_utils._is_relation(relation, 'nullcheck_table') -%}\n  {%- do dbt_utils._is_ephemeral(relation, 'nullcheck_table') -%}\n  {% set cols = adapter.get_columns_in_relation(relation) %}\n\n  select {{ dbt_utils.nullcheck(cols) }}\n  from {{relation}}\n\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": [
          "macro.dbt_utils._is_relation",
          "macro.dbt_utils._is_ephemeral",
          "macro.dbt_utils.nullcheck"
        ]
      },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1665426350.0734541,
      "supported_languages": null
    },
    "macro.dbt_utils.get_relations_by_pattern": {
      "unique_id": "macro.dbt_utils.get_relations_by_pattern",
      "package_name": "dbt_utils",
      "root_path": "/Users/sung/Desktop/dbt/dbt_env/dbt_packages/dbt_utils",
      "path": "macros/sql/get_relations_by_pattern.sql",
      "original_file_path": "macros/sql/get_relations_by_pattern.sql",
      "name": "get_relations_by_pattern",
      "macro_sql": "{% macro get_relations_by_pattern(schema_pattern, table_pattern, exclude='', database=target.database) %}\n    {{ return(adapter.dispatch('get_relations_by_pattern', 'dbt_utils')(schema_pattern, table_pattern, exclude, database)) }}\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": ["macro.dbt_utils.default__get_relations_by_pattern"]
      },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1665426350.07548,
      "supported_languages": null
    },
    "macro.dbt_utils.default__get_relations_by_pattern": {
      "unique_id": "macro.dbt_utils.default__get_relations_by_pattern",
      "package_name": "dbt_utils",
      "root_path": "/Users/sung/Desktop/dbt/dbt_env/dbt_packages/dbt_utils",
      "path": "macros/sql/get_relations_by_pattern.sql",
      "original_file_path": "macros/sql/get_relations_by_pattern.sql",
      "name": "default__get_relations_by_pattern",
      "macro_sql": "{% macro default__get_relations_by_pattern(schema_pattern, table_pattern, exclude='', database=target.database) %}\n\n    {%- call statement('get_tables', fetch_result=True) %}\n\n      {{ dbt_utils.get_tables_by_pattern_sql(schema_pattern, table_pattern, exclude, database) }}\n\n    {%- endcall -%}\n\n    {%- set table_list = load_result('get_tables') -%}\n\n    {%- if table_list and table_list['table'] -%}\n        {%- set tbl_relations = [] -%}\n        {%- for row in table_list['table'] -%}\n            {%- set tbl_relation = api.Relation.create(\n                database=database,\n                schema=row.table_schema,\n                identifier=row.table_name,\n                type=row.table_type\n            ) -%}\n            {%- do tbl_relations.append(tbl_relation) -%}\n        {%- endfor -%}\n\n        {{ return(tbl_relations) }}\n    {%- else -%}\n        {{ return([]) }}\n    {%- endif -%}\n\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": [
          "macro.dbt.statement",
          "macro.dbt_utils.get_tables_by_pattern_sql"
        ]
      },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1665426350.077884,
      "supported_languages": null
    },
    "macro.dbt_utils.get_powers_of_two": {
      "unique_id": "macro.dbt_utils.get_powers_of_two",
      "package_name": "dbt_utils",
      "root_path": "/Users/sung/Desktop/dbt/dbt_env/dbt_packages/dbt_utils",
      "path": "macros/sql/generate_series.sql",
      "original_file_path": "macros/sql/generate_series.sql",
      "name": "get_powers_of_two",
      "macro_sql": "{% macro get_powers_of_two(upper_bound) %}\n    {{ return(adapter.dispatch('get_powers_of_two', 'dbt_utils')(upper_bound)) }}\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": ["macro.dbt_utils.default__get_powers_of_two"]
      },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1665426350.080121,
      "supported_languages": null
    },
    "macro.dbt_utils.default__get_powers_of_two": {
      "unique_id": "macro.dbt_utils.default__get_powers_of_two",
      "package_name": "dbt_utils",
      "root_path": "/Users/sung/Desktop/dbt/dbt_env/dbt_packages/dbt_utils",
      "path": "macros/sql/generate_series.sql",
      "original_file_path": "macros/sql/generate_series.sql",
      "name": "default__get_powers_of_two",
      "macro_sql": "{% macro default__get_powers_of_two(upper_bound) %}\n\n    {% if upper_bound <= 0 %}\n    {{ exceptions.raise_compiler_error(\"upper bound must be positive\") }}\n    {% endif %}\n\n    {% for _ in range(1, 100) %}\n       {% if upper_bound <= 2 ** loop.index %}{{ return(loop.index) }}{% endif %}\n    {% endfor %}\n\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": { "macros": [] },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1665426350.0812201,
      "supported_languages": null
    },
    "macro.dbt_utils.generate_series": {
      "unique_id": "macro.dbt_utils.generate_series",
      "package_name": "dbt_utils",
      "root_path": "/Users/sung/Desktop/dbt/dbt_env/dbt_packages/dbt_utils",
      "path": "macros/sql/generate_series.sql",
      "original_file_path": "macros/sql/generate_series.sql",
      "name": "generate_series",
      "macro_sql": "{% macro generate_series(upper_bound) %}\n    {{ return(adapter.dispatch('generate_series', 'dbt_utils')(upper_bound)) }}\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": { "macros": ["macro.dbt_utils.default__generate_series"] },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1665426350.081695,
      "supported_languages": null
    },
    "macro.dbt_utils.default__generate_series": {
      "unique_id": "macro.dbt_utils.default__generate_series",
      "package_name": "dbt_utils",
      "root_path": "/Users/sung/Desktop/dbt/dbt_env/dbt_packages/dbt_utils",
      "path": "macros/sql/generate_series.sql",
      "original_file_path": "macros/sql/generate_series.sql",
      "name": "default__generate_series",
      "macro_sql": "{% macro default__generate_series(upper_bound) %}\n\n    {% set n = dbt_utils.get_powers_of_two(upper_bound) %}\n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    {% for i in range(n) %}\n    p{{i}}.generated_number * power(2, {{i}})\n    {% if not loop.last %} + {% endif %}\n    {% endfor %}\n    + 1\n    as generated_number\n\n    from\n\n    {% for i in range(n) %}\n    p as p{{i}}\n    {% if not loop.last %} cross join {% endif %}\n    {% endfor %}\n\n    )\n\n    select *\n    from unioned\n    where generated_number <= {{upper_bound}}\n    order by generated_number\n\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": { "macros": ["macro.dbt_utils.get_powers_of_two"] },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1665426350.082907,
      "supported_languages": null
    },
    "macro.dbt_utils.get_relations_by_prefix": {
      "unique_id": "macro.dbt_utils.get_relations_by_prefix",
      "package_name": "dbt_utils",
      "root_path": "/Users/sung/Desktop/dbt/dbt_env/dbt_packages/dbt_utils",
      "path": "macros/sql/get_relations_by_prefix.sql",
      "original_file_path": "macros/sql/get_relations_by_prefix.sql",
      "name": "get_relations_by_prefix",
      "macro_sql": "{% macro get_relations_by_prefix(schema, prefix, exclude='', database=target.database) %}\n    {{ return(adapter.dispatch('get_relations_by_prefix', 'dbt_utils')(schema, prefix, exclude, database)) }}\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": ["macro.dbt_utils.default__get_relations_by_prefix"]
      },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1665426350.084558,
      "supported_languages": null
    },
    "macro.dbt_utils.default__get_relations_by_prefix": {
      "unique_id": "macro.dbt_utils.default__get_relations_by_prefix",
      "package_name": "dbt_utils",
      "root_path": "/Users/sung/Desktop/dbt/dbt_env/dbt_packages/dbt_utils",
      "path": "macros/sql/get_relations_by_prefix.sql",
      "original_file_path": "macros/sql/get_relations_by_prefix.sql",
      "name": "default__get_relations_by_prefix",
      "macro_sql": "{% macro default__get_relations_by_prefix(schema, prefix, exclude='', database=target.database) %}\n\n    {%- call statement('get_tables', fetch_result=True) %}\n\n      {{ dbt_utils.get_tables_by_prefix_sql(schema, prefix, exclude, database) }}\n\n    {%- endcall -%}\n\n    {%- set table_list = load_result('get_tables') -%}\n\n    {%- if table_list and table_list['table'] -%}\n        {%- set tbl_relations = [] -%}\n        {%- for row in table_list['table'] -%}\n            {%- set tbl_relation = api.Relation.create(\n                database=database,\n                schema=row.table_schema,\n                identifier=row.table_name,\n                type=row.table_type\n            ) -%}\n            {%- do tbl_relations.append(tbl_relation) -%}\n        {%- endfor -%}\n\n        {{ return(tbl_relations) }}\n    {%- else -%}\n        {{ return([]) }}\n    {%- endif -%}\n\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": [
          "macro.dbt.statement",
          "macro.dbt_utils.get_tables_by_prefix_sql"
        ]
      },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1665426350.087082,
      "supported_languages": null
    },
    "macro.dbt_utils.get_tables_by_prefix_sql": {
      "unique_id": "macro.dbt_utils.get_tables_by_prefix_sql",
      "package_name": "dbt_utils",
      "root_path": "/Users/sung/Desktop/dbt/dbt_env/dbt_packages/dbt_utils",
      "path": "macros/sql/get_tables_by_prefix_sql.sql",
      "original_file_path": "macros/sql/get_tables_by_prefix_sql.sql",
      "name": "get_tables_by_prefix_sql",
      "macro_sql": "{% macro get_tables_by_prefix_sql(schema, prefix, exclude='', database=target.database) %}\n    {{ return(adapter.dispatch('get_tables_by_prefix_sql', 'dbt_utils')(schema, prefix, exclude, database)) }}\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": ["macro.dbt_utils.default__get_tables_by_prefix_sql"]
      },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1665426350.088489,
      "supported_languages": null
    },
    "macro.dbt_utils.default__get_tables_by_prefix_sql": {
      "unique_id": "macro.dbt_utils.default__get_tables_by_prefix_sql",
      "package_name": "dbt_utils",
      "root_path": "/Users/sung/Desktop/dbt/dbt_env/dbt_packages/dbt_utils",
      "path": "macros/sql/get_tables_by_prefix_sql.sql",
      "original_file_path": "macros/sql/get_tables_by_prefix_sql.sql",
      "name": "default__get_tables_by_prefix_sql",
      "macro_sql": "{% macro default__get_tables_by_prefix_sql(schema, prefix, exclude='', database=target.database) %}\n\n    {{ dbt_utils.get_tables_by_pattern_sql(\n        schema_pattern = schema,\n        table_pattern = prefix ~ '%',\n        exclude = exclude,\n        database = database\n    ) }}\n    \n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": { "macros": ["macro.dbt_utils.get_tables_by_pattern_sql"] },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1665426350.089173,
      "supported_languages": null
    },
    "macro.dbt_utils.star": {
      "unique_id": "macro.dbt_utils.star",
      "package_name": "dbt_utils",
      "root_path": "/Users/sung/Desktop/dbt/dbt_env/dbt_packages/dbt_utils",
      "path": "macros/sql/star.sql",
      "original_file_path": "macros/sql/star.sql",
      "name": "star",
      "macro_sql": "{% macro star(from, relation_alias=False, except=[], prefix='', suffix='') -%}\n    {{ return(adapter.dispatch('star', 'dbt_utils')(from, relation_alias, except, prefix, suffix)) }}\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": { "macros": ["macro.dbt_utils.default__star"] },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1665426350.091108,
      "supported_languages": null
    },
    "macro.dbt_utils.default__star": {
      "unique_id": "macro.dbt_utils.default__star",
      "package_name": "dbt_utils",
      "root_path": "/Users/sung/Desktop/dbt/dbt_env/dbt_packages/dbt_utils",
      "path": "macros/sql/star.sql",
      "original_file_path": "macros/sql/star.sql",
      "name": "default__star",
      "macro_sql": "{% macro default__star(from, relation_alias=False, except=[], prefix='', suffix='') -%}\n    {%- do dbt_utils._is_relation(from, 'star') -%}\n    {%- do dbt_utils._is_ephemeral(from, 'star') -%}\n\n    {#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\n    {%- if not execute -%}\n        {{ return('') }}\n    {% endif %}\n\n    {%- set include_cols = [] %}\n    {%- set cols = adapter.get_columns_in_relation(from) -%}\n    {%- set except = except | map(\"lower\") | list %}\n    {%- for col in cols -%}\n\n        {%- if col.column|lower not in except -%}\n            {% do include_cols.append(col.column) %}\n\n        {%- endif %}\n    {%- endfor %}\n\n    {%- for col in include_cols %}\n\n        {%- if relation_alias %}{{ relation_alias }}.{% else %}{%- endif -%}{{ adapter.quote(col)|trim }} as {{ adapter.quote(prefix ~ col ~ suffix)|trim }}\n        {%- if not loop.last %},{{ '\\n  ' }}{% endif %}\n\n    {%- endfor -%}\n{%- endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": [
          "macro.dbt_utils._is_relation",
          "macro.dbt_utils._is_ephemeral"
        ]
      },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1665426350.094209,
      "supported_languages": null
    },
    "macro.dbt_utils.unpivot": {
      "unique_id": "macro.dbt_utils.unpivot",
      "package_name": "dbt_utils",
      "root_path": "/Users/sung/Desktop/dbt/dbt_env/dbt_packages/dbt_utils",
      "path": "macros/sql/unpivot.sql",
      "original_file_path": "macros/sql/unpivot.sql",
      "name": "unpivot",
      "macro_sql": "{% macro unpivot(relation=none, cast_to='varchar', exclude=none, remove=none, field_name='field_name', value_name='value', table=none) -%}\n    {{ return(adapter.dispatch('unpivot', 'dbt_utils')(relation, cast_to, exclude, remove, field_name, value_name, table)) }}\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": { "macros": ["macro.dbt_utils.default__unpivot"] },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1665426350.098892,
      "supported_languages": null
    },
    "macro.dbt_utils.default__unpivot": {
      "unique_id": "macro.dbt_utils.default__unpivot",
      "package_name": "dbt_utils",
      "root_path": "/Users/sung/Desktop/dbt/dbt_env/dbt_packages/dbt_utils",
      "path": "macros/sql/unpivot.sql",
      "original_file_path": "macros/sql/unpivot.sql",
      "name": "default__unpivot",
      "macro_sql": "{% macro default__unpivot(relation=none, cast_to='varchar', exclude=none, remove=none, field_name='field_name', value_name='value', table=none) -%}\n\n    {% if table %}\n        {%- set error_message = '\n            Warning: the `unpivot` macro no longer accepts a `table` parameter. \\\n            This parameter will be deprecated in a future release of dbt-utils. Use the `relation` parameter instead. \\\n            The {}.{} model triggered this warning. \\\n            '.format(model.package_name, model.name) -%}\n        {%- do exceptions.warn(error_message) -%}\n    {% endif %}\n\n    {% if relation and table %}\n        {{ exceptions.raise_compiler_error(\"Error: both the `relation` and `table` parameters were provided to `unpivot` macro. Choose one only (we recommend `relation`).\") }}\n    {% elif not relation and table %}\n        {% set relation=table %}\n    {% elif not relation and not table %}\n        {{ exceptions.raise_compiler_error(\"Error: argument `relation` is required for `unpivot` macro.\") }}\n    {% endif %}\n\n  {%- set exclude = exclude if exclude is not none else [] %}\n  {%- set remove = remove if remove is not none else [] %}\n\n  {%- set include_cols = [] %}\n\n  {%- set table_columns = {} %}\n\n  {%- do table_columns.update({relation: []}) %}\n\n  {%- do dbt_utils._is_relation(relation, 'unpivot') -%}\n  {%- do dbt_utils._is_ephemeral(relation, 'unpivot') -%}\n  {%- set cols = adapter.get_columns_in_relation(relation) %}\n\n  {%- for col in cols -%}\n    {%- if col.column.lower() not in remove|map('lower') and col.column.lower() not in exclude|map('lower') -%}\n      {% do include_cols.append(col) %}\n    {%- endif %}\n  {%- endfor %}\n\n\n  {%- for col in include_cols -%}\n    select\n      {%- for exclude_col in exclude %}\n        {{ exclude_col }},\n      {%- endfor %}\n\n      cast('{{ col.column }}' as {{ dbt_utils.type_string() }}) as {{ field_name }},\n      cast(  {% if col.data_type == 'boolean' %}\n           {{ dbt_utils.cast_bool_to_text(col.column) }}\n             {% else %}\n           {{ col.column }}\n             {% endif %}\n           as {{ cast_to }}) as {{ value_name }}\n\n    from {{ relation }}\n\n    {% if not loop.last -%}\n      union all\n    {% endif -%}\n  {%- endfor -%}\n\n{%- endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": [
          "macro.dbt_utils._is_relation",
          "macro.dbt_utils._is_ephemeral",
          "macro.dbt_utils.type_string",
          "macro.dbt_utils.cast_bool_to_text"
        ]
      },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1665426350.104956,
      "supported_languages": null
    },
    "macro.dbt_utils.union_relations": {
      "unique_id": "macro.dbt_utils.union_relations",
      "package_name": "dbt_utils",
      "root_path": "/Users/sung/Desktop/dbt/dbt_env/dbt_packages/dbt_utils",
      "path": "macros/sql/union.sql",
      "original_file_path": "macros/sql/union.sql",
      "name": "union_relations",
      "macro_sql": "{%- macro union_relations(relations, column_override=none, include=[], exclude=[], source_column_name='_dbt_source_relation') -%}\n    {{ return(adapter.dispatch('union_relations', 'dbt_utils')(relations, column_override, include, exclude, source_column_name)) }}\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": { "macros": ["macro.dbt_utils.default__union_relations"] },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1665426350.1087732,
      "supported_languages": null
    },
    "macro.dbt_utils.default__union_relations": {
      "unique_id": "macro.dbt_utils.default__union_relations",
      "package_name": "dbt_utils",
      "root_path": "/Users/sung/Desktop/dbt/dbt_env/dbt_packages/dbt_utils",
      "path": "macros/sql/union.sql",
      "original_file_path": "macros/sql/union.sql",
      "name": "default__union_relations",
      "macro_sql": "\n\n{%- macro default__union_relations(relations, column_override=none, include=[], exclude=[], source_column_name='_dbt_source_relation') -%}\n\n    {%- if exclude and include -%}\n        {{ exceptions.raise_compiler_error(\"Both an exclude and include list were provided to the `union` macro. Only one is allowed\") }}\n    {%- endif -%}\n\n    {#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. -#}\n    {%- if not execute %}\n        {{ return('') }}\n    {% endif -%}\n\n    {%- set column_override = column_override if column_override is not none else {} -%}\n\n    {%- set relation_columns = {} -%}\n    {%- set column_superset = {} -%}\n\n    {%- for relation in relations -%}\n\n        {%- do relation_columns.update({relation: []}) -%}\n\n        {%- do dbt_utils._is_relation(relation, 'union_relations') -%}\n        {%- do dbt_utils._is_ephemeral(relation, 'union_relations') -%}\n        {%- set cols = adapter.get_columns_in_relation(relation) -%}\n        {%- for col in cols -%}\n\n        {#- If an exclude list was provided and the column is in the list, do nothing -#}\n        {%- if exclude and col.column in exclude -%}\n\n        {#- If an include list was provided and the column is not in the list, do nothing -#}\n        {%- elif include and col.column not in include -%}\n\n        {#- Otherwise add the column to the column superset -#}\n        {%- else -%}\n\n            {#- update the list of columns in this relation -#}\n            {%- do relation_columns[relation].append(col.column) -%}\n\n            {%- if col.column in column_superset -%}\n\n                {%- set stored = column_superset[col.column] -%}\n                {%- if col.is_string() and stored.is_string() and col.string_size() > stored.string_size() -%}\n\n                    {%- do column_superset.update({col.column: col}) -%}\n\n                {%- endif %}\n\n            {%- else -%}\n\n                {%- do column_superset.update({col.column: col}) -%}\n\n            {%- endif -%}\n\n        {%- endif -%}\n\n        {%- endfor -%}\n    {%- endfor -%}\n\n    {%- set ordered_column_names = column_superset.keys() -%}\n\n    {%- for relation in relations %}\n\n        (\n            select\n\n                cast({{ dbt_utils.string_literal(relation) }} as {{ dbt_utils.type_string() }}) as {{ source_column_name }},\n                {% for col_name in ordered_column_names -%}\n\n                    {%- set col = column_superset[col_name] %}\n                    {%- set col_type = column_override.get(col.column, col.data_type) %}\n                    {%- set col_name = adapter.quote(col_name) if col_name in relation_columns[relation] else 'null' %}\n                    cast({{ col_name }} as {{ col_type }}) as {{ col.quoted }} {% if not loop.last %},{% endif -%}\n\n                {%- endfor %}\n\n            from {{ relation }}\n        )\n\n        {% if not loop.last -%}\n            union all\n        {% endif -%}\n\n    {%- endfor -%}\n\n{%- endmacro -%}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": [
          "macro.dbt_utils._is_relation",
          "macro.dbt_utils._is_ephemeral",
          "macro.dbt_utils.string_literal",
          "macro.dbt_utils.type_string"
        ]
      },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1665426350.115516,
      "supported_languages": null
    },
    "macro.dbt_utils.group_by": {
      "unique_id": "macro.dbt_utils.group_by",
      "package_name": "dbt_utils",
      "root_path": "/Users/sung/Desktop/dbt/dbt_env/dbt_packages/dbt_utils",
      "path": "macros/sql/groupby.sql",
      "original_file_path": "macros/sql/groupby.sql",
      "name": "group_by",
      "macro_sql": "{%- macro group_by(n) -%}\n    {{ return(adapter.dispatch('group_by', 'dbt_utils')(n)) }}\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": { "macros": ["macro.dbt_utils.default__group_by"] },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1665426350.11657,
      "supported_languages": null
    },
    "macro.dbt_utils.default__group_by": {
      "unique_id": "macro.dbt_utils.default__group_by",
      "package_name": "dbt_utils",
      "root_path": "/Users/sung/Desktop/dbt/dbt_env/dbt_packages/dbt_utils",
      "path": "macros/sql/groupby.sql",
      "original_file_path": "macros/sql/groupby.sql",
      "name": "default__group_by",
      "macro_sql": "\n\n{%- macro default__group_by(n) -%}\n\n  group by {% for i in range(1, n + 1) -%}\n      {{ i }}{{ ',' if not loop.last }}   \n   {%- endfor -%}\n\n{%- endmacro -%}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": { "macros": [] },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1665426350.117194,
      "supported_languages": null
    },
    "macro.dbt_utils.surrogate_key": {
      "unique_id": "macro.dbt_utils.surrogate_key",
      "package_name": "dbt_utils",
      "root_path": "/Users/sung/Desktop/dbt/dbt_env/dbt_packages/dbt_utils",
      "path": "macros/sql/surrogate_key.sql",
      "original_file_path": "macros/sql/surrogate_key.sql",
      "name": "surrogate_key",
      "macro_sql": "{%- macro surrogate_key(field_list) -%}\n    {# needed for safe_add to allow for non-keyword arguments see SO post #}\n    {# https://stackoverflow.com/questions/13944751/args-kwargs-in-jinja2-macros #}\n    {% set frustrating_jinja_feature = varargs %}\n    {{ return(adapter.dispatch('surrogate_key', 'dbt_utils')(field_list, *varargs)) }}\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": { "macros": ["macro.dbt_utils.default__surrogate_key"] },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1665426350.1190999,
      "supported_languages": null
    },
    "macro.dbt_utils.default__surrogate_key": {
      "unique_id": "macro.dbt_utils.default__surrogate_key",
      "package_name": "dbt_utils",
      "root_path": "/Users/sung/Desktop/dbt/dbt_env/dbt_packages/dbt_utils",
      "path": "macros/sql/surrogate_key.sql",
      "original_file_path": "macros/sql/surrogate_key.sql",
      "name": "default__surrogate_key",
      "macro_sql": "\n\n{%- macro default__surrogate_key(field_list) -%}\n\n{%- if varargs|length >= 1 or field_list is string %}\n\n{%- set error_message = '\nWarning: the `surrogate_key` macro now takes a single list argument instead of \\\nmultiple string arguments. Support for multiple string arguments will be \\\ndeprecated in a future release of dbt-utils. The {}.{} model triggered this warning. \\\n'.format(model.package_name, model.name) -%}\n\n{%- do exceptions.warn(error_message) -%}\n\n{# first argument is not included in varargs, so add first element to field_list_xf #}\n{%- set field_list_xf = [field_list] -%}\n\n{%- for field in varargs %}\n{%- set _ = field_list_xf.append(field) -%}\n{%- endfor -%}\n\n{%- else -%}\n\n{# if using list, just set field_list_xf as field_list #}\n{%- set field_list_xf = field_list -%}\n\n{%- endif -%}\n\n\n{%- set fields = [] -%}\n\n{%- for field in field_list_xf -%}\n\n    {%- set _ = fields.append(\n        \"coalesce(cast(\" ~ field ~ \" as \" ~ dbt_utils.type_string() ~ \"), '')\"\n    ) -%}\n\n    {%- if not loop.last %}\n        {%- set _ = fields.append(\"'-'\") -%}\n    {%- endif -%}\n\n{%- endfor -%}\n\n{{dbt_utils.hash(dbt_utils.concat(fields))}}\n\n{%- endmacro -%}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": [
          "macro.dbt_utils.type_string",
          "macro.dbt_utils.hash",
          "macro.dbt_utils.concat"
        ]
      },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1665426350.121588,
      "supported_languages": null
    },
    "macro.dbt_utils.safe_add": {
      "unique_id": "macro.dbt_utils.safe_add",
      "package_name": "dbt_utils",
      "root_path": "/Users/sung/Desktop/dbt/dbt_env/dbt_packages/dbt_utils",
      "path": "macros/sql/safe_add.sql",
      "original_file_path": "macros/sql/safe_add.sql",
      "name": "safe_add",
      "macro_sql": "{%- macro safe_add() -%}\n    {# needed for safe_add to allow for non-keyword arguments see SO post #}\n    {# https://stackoverflow.com/questions/13944751/args-kwargs-in-jinja2-macros #}\n    {% set frustrating_jinja_feature = varargs %}\n    {{ return(adapter.dispatch('safe_add', 'dbt_utils')(*varargs)) }}\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": { "macros": ["macro.dbt_utils.default__safe_add"] },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1665426350.123093,
      "supported_languages": null
    },
    "macro.dbt_utils.default__safe_add": {
      "unique_id": "macro.dbt_utils.default__safe_add",
      "package_name": "dbt_utils",
      "root_path": "/Users/sung/Desktop/dbt/dbt_env/dbt_packages/dbt_utils",
      "path": "macros/sql/safe_add.sql",
      "original_file_path": "macros/sql/safe_add.sql",
      "name": "default__safe_add",
      "macro_sql": "\n\n{%- macro default__safe_add() -%}\n\n{% set fields = [] %}\n\n{%- for field in varargs -%}\n\n    {% do fields.append(\"coalesce(\" ~ field ~ \", 0)\") %}\n\n{%- endfor -%}\n\n{{ fields|join(' +\\n  ') }}\n\n{%- endmacro -%}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": { "macros": [] },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1665426350.123947,
      "supported_languages": null
    },
    "macro.dbt_utils.nullcheck": {
      "unique_id": "macro.dbt_utils.nullcheck",
      "package_name": "dbt_utils",
      "root_path": "/Users/sung/Desktop/dbt/dbt_env/dbt_packages/dbt_utils",
      "path": "macros/sql/nullcheck.sql",
      "original_file_path": "macros/sql/nullcheck.sql",
      "name": "nullcheck",
      "macro_sql": "{% macro nullcheck(cols) %}\n    {{ return(adapter.dispatch('nullcheck', 'dbt_utils')(cols)) }}\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": { "macros": ["macro.dbt_utils.default__nullcheck"] },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1665426350.125265,
      "supported_languages": null
    },
    "macro.dbt_utils.default__nullcheck": {
      "unique_id": "macro.dbt_utils.default__nullcheck",
      "package_name": "dbt_utils",
      "root_path": "/Users/sung/Desktop/dbt/dbt_env/dbt_packages/dbt_utils",
      "path": "macros/sql/nullcheck.sql",
      "original_file_path": "macros/sql/nullcheck.sql",
      "name": "default__nullcheck",
      "macro_sql": "{% macro default__nullcheck(cols) %}\n{%- for col in cols %}\n\n    {% if col.is_string() -%}\n\n    nullif({{col.name}},'') as {{col.name}}\n\n    {%- else -%}\n\n    {{col.name}}\n\n    {%- endif -%}\n\n{%- if not loop.last -%} , {%- endif -%}\n\n{%- endfor -%}\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": { "macros": [] },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1665426350.126336,
      "supported_languages": null
    },
    "macro.dbt_utils.get_tables_by_pattern_sql": {
      "unique_id": "macro.dbt_utils.get_tables_by_pattern_sql",
      "package_name": "dbt_utils",
      "root_path": "/Users/sung/Desktop/dbt/dbt_env/dbt_packages/dbt_utils",
      "path": "macros/sql/get_tables_by_pattern_sql.sql",
      "original_file_path": "macros/sql/get_tables_by_pattern_sql.sql",
      "name": "get_tables_by_pattern_sql",
      "macro_sql": "{% macro get_tables_by_pattern_sql(schema_pattern, table_pattern, exclude='', database=target.database) %}\n    {{ return(adapter.dispatch('get_tables_by_pattern_sql', 'dbt_utils')\n        (schema_pattern, table_pattern, exclude, database)) }}\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": ["macro.dbt_utils.default__get_tables_by_pattern_sql"]
      },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1665426350.1297102,
      "supported_languages": null
    },
    "macro.dbt_utils.default__get_tables_by_pattern_sql": {
      "unique_id": "macro.dbt_utils.default__get_tables_by_pattern_sql",
      "package_name": "dbt_utils",
      "root_path": "/Users/sung/Desktop/dbt/dbt_env/dbt_packages/dbt_utils",
      "path": "macros/sql/get_tables_by_pattern_sql.sql",
      "original_file_path": "macros/sql/get_tables_by_pattern_sql.sql",
      "name": "default__get_tables_by_pattern_sql",
      "macro_sql": "{% macro default__get_tables_by_pattern_sql(schema_pattern, table_pattern, exclude='', database=target.database) %}\n\n        select distinct\n            table_schema as \"table_schema\",\n            table_name as \"table_name\",\n            case table_type\n                when 'BASE TABLE' then 'table'\n                when 'EXTERNAL TABLE' then 'external'\n                when 'MATERIALIZED VIEW' then 'materializedview'\n                else lower(table_type)\n            end as \"table_type\"\n        from {{ database }}.information_schema.tables\n        where table_schema ilike '{{ schema_pattern }}'\n        and table_name ilike '{{ table_pattern }}'\n        and table_name not ilike '{{ exclude }}'\n\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": { "macros": [] },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1665426350.1303182,
      "supported_languages": null
    },
    "macro.dbt_utils.bigquery__get_tables_by_pattern_sql": {
      "unique_id": "macro.dbt_utils.bigquery__get_tables_by_pattern_sql",
      "package_name": "dbt_utils",
      "root_path": "/Users/sung/Desktop/dbt/dbt_env/dbt_packages/dbt_utils",
      "path": "macros/sql/get_tables_by_pattern_sql.sql",
      "original_file_path": "macros/sql/get_tables_by_pattern_sql.sql",
      "name": "bigquery__get_tables_by_pattern_sql",
      "macro_sql": "{% macro bigquery__get_tables_by_pattern_sql(schema_pattern, table_pattern, exclude='', database=target.database) %}\n\n    {% if '%' in schema_pattern %}\n        {% set schemata=dbt_utils._bigquery__get_matching_schemata(schema_pattern, database) %}\n    {% else %}\n        {% set schemata=[schema_pattern] %}\n    {% endif %}\n\n    {% set sql %}\n        {% for schema in schemata %}\n            select distinct\n                table_schema,\n                table_name,\n                case table_type\n                    when 'BASE TABLE' then 'table'\n                    else lower(table_type)\n                end as table_type\n\n            from {{ adapter.quote(database) }}.{{ schema }}.INFORMATION_SCHEMA.TABLES\n            where lower(table_name) like lower ('{{ table_pattern }}')\n                and lower(table_name) not like lower ('{{ exclude }}')\n\n            {% if not loop.last %} union all {% endif %}\n\n        {% endfor %}\n    {% endset %}\n\n    {{ return(sql) }}\n\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": ["macro.dbt_utils._bigquery__get_matching_schemata"]
      },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1665426350.132065,
      "supported_languages": null
    },
    "macro.dbt_utils._bigquery__get_matching_schemata": {
      "unique_id": "macro.dbt_utils._bigquery__get_matching_schemata",
      "package_name": "dbt_utils",
      "root_path": "/Users/sung/Desktop/dbt/dbt_env/dbt_packages/dbt_utils",
      "path": "macros/sql/get_tables_by_pattern_sql.sql",
      "original_file_path": "macros/sql/get_tables_by_pattern_sql.sql",
      "name": "_bigquery__get_matching_schemata",
      "macro_sql": "{% macro _bigquery__get_matching_schemata(schema_pattern, database) %}\n    {% if execute %}\n\n        {% set sql %}\n        select schema_name from {{ adapter.quote(database) }}.INFORMATION_SCHEMA.SCHEMATA\n        where lower(schema_name) like lower('{{ schema_pattern }}')\n        {% endset %}\n\n        {% set results=run_query(sql) %}\n\n        {% set schemata=results.columns['schema_name'].values() %}\n\n        {{ return(schemata) }}\n\n    {% else %}\n\n        {{ return([]) }}\n\n    {% endif %}\n\n\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": { "macros": ["macro.dbt.run_query"] },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1665426350.1332428,
      "supported_languages": null
    },
    "macro.dbt_utils.get_column_values": {
      "unique_id": "macro.dbt_utils.get_column_values",
      "package_name": "dbt_utils",
      "root_path": "/Users/sung/Desktop/dbt/dbt_env/dbt_packages/dbt_utils",
      "path": "macros/sql/get_column_values.sql",
      "original_file_path": "macros/sql/get_column_values.sql",
      "name": "get_column_values",
      "macro_sql": "{% macro get_column_values(table, column, order_by='count(*) desc', max_records=none, default=none) -%}\n    {{ return(adapter.dispatch('get_column_values', 'dbt_utils')(table, column, order_by, max_records, default)) }}\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": ["macro.dbt_utils.default__get_column_values"]
      },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1665426350.135496,
      "supported_languages": null
    },
    "macro.dbt_utils.default__get_column_values": {
      "unique_id": "macro.dbt_utils.default__get_column_values",
      "package_name": "dbt_utils",
      "root_path": "/Users/sung/Desktop/dbt/dbt_env/dbt_packages/dbt_utils",
      "path": "macros/sql/get_column_values.sql",
      "original_file_path": "macros/sql/get_column_values.sql",
      "name": "default__get_column_values",
      "macro_sql": "{% macro default__get_column_values(table, column, order_by='count(*) desc', max_records=none, default=none) -%}\n{% if default is none %}\n    {% set default = [] %}\n{% endif %}\n    {#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\n    {%- if not execute -%}\n        {{ return(default) }}\n    {% endif %}\n\n    {# Not all relations are tables. Renaming for internal clarity without breaking functionality for anyone using named arguments #}\n    {# TODO: Change the method signature in a future 0.x.0 release #}\n    {%- set target_relation = table -%}\n\n    {# adapter.load_relation is a convenience wrapper to avoid building a Relation when we already have one #}\n    {% set relation_exists = (load_relation(target_relation)) is not none %}\n\n    {%- call statement('get_column_values', fetch_result=true) %}\n\n        {%- if not relation_exists and default is none -%}\n\n          {{ exceptions.raise_compiler_error(\"In get_column_values(): relation \" ~ target_relation ~ \" does not exist and no default value was provided.\") }}\n\n        {%- elif not relation_exists and default is not none -%}\n\n          {{ log(\"Relation \" ~ target_relation ~ \" does not exist. Returning the default value: \" ~ default) }}\n\n          {{ return(default) }}\n\n        {%- else -%}\n\n\n            select\n                {{ column }} as value\n\n            from {{ target_relation }}\n            group by {{ column }}\n            order by {{ order_by }}\n\n            {% if max_records is not none %}\n            limit {{ max_records }}\n            {% endif %}\n\n        {% endif %}\n\n    {%- endcall -%}\n\n    {%- set value_list = load_result('get_column_values') -%}\n\n    {%- if value_list and value_list['data'] -%}\n        {%- set values = value_list['data'] | map(attribute=0) | list %}\n        {{ return(values) }}\n    {%- else -%}\n        {{ return(default) }}\n    {%- endif -%}\n\n{%- endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": ["macro.dbt.load_relation", "macro.dbt.statement"]
      },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1665426350.139174,
      "supported_languages": null
    },
    "macro.dbt_utils.pivot": {
      "unique_id": "macro.dbt_utils.pivot",
      "package_name": "dbt_utils",
      "root_path": "/Users/sung/Desktop/dbt/dbt_env/dbt_packages/dbt_utils",
      "path": "macros/sql/pivot.sql",
      "original_file_path": "macros/sql/pivot.sql",
      "name": "pivot",
      "macro_sql": "{% macro pivot(column,\n               values,\n               alias=True,\n               agg='sum',\n               cmp='=',\n               prefix='',\n               suffix='',\n               then_value=1,\n               else_value=0,\n               quote_identifiers=True,\n               distinct=False) %}\n    {{ return(adapter.dispatch('pivot', 'dbt_utils')(column, values, alias, agg, cmp, prefix, suffix, then_value, else_value, quote_identifiers, distinct)) }}\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": { "macros": ["macro.dbt_utils.default__pivot"] },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1665426350.1419468,
      "supported_languages": null
    },
    "macro.dbt_utils.default__pivot": {
      "unique_id": "macro.dbt_utils.default__pivot",
      "package_name": "dbt_utils",
      "root_path": "/Users/sung/Desktop/dbt/dbt_env/dbt_packages/dbt_utils",
      "path": "macros/sql/pivot.sql",
      "original_file_path": "macros/sql/pivot.sql",
      "name": "default__pivot",
      "macro_sql": "{% macro default__pivot(column,\n               values,\n               alias=True,\n               agg='sum',\n               cmp='=',\n               prefix='',\n               suffix='',\n               then_value=1,\n               else_value=0,\n               quote_identifiers=True,\n               distinct=False) %}\n  {% for v in values %}\n    {{ agg }}(\n      {% if distinct %} distinct {% endif %}\n      case\n      when {{ column }} {{ cmp }} '{{ v }}'\n        then {{ then_value }}\n      else {{ else_value }}\n      end\n    )\n    {% if alias %}\n      {% if quote_identifiers %}\n            as {{ adapter.quote(prefix ~ v ~ suffix) }}\n      {% else %}\n        as {{ dbt_utils.slugify(prefix ~ v ~ suffix) }}\n      {% endif %}\n    {% endif %}\n    {% if not loop.last %},{% endif %}\n  {% endfor %}\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": { "macros": ["macro.dbt_utils.slugify"] },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1665426350.144324,
      "supported_languages": null
    },
    "macro.dbt_utils.get_query_results_as_dict": {
      "unique_id": "macro.dbt_utils.get_query_results_as_dict",
      "package_name": "dbt_utils",
      "root_path": "/Users/sung/Desktop/dbt/dbt_env/dbt_packages/dbt_utils",
      "path": "macros/sql/get_query_results_as_dict.sql",
      "original_file_path": "macros/sql/get_query_results_as_dict.sql",
      "name": "get_query_results_as_dict",
      "macro_sql": "{% macro get_query_results_as_dict(query) %}\n    {{ return(adapter.dispatch('get_query_results_as_dict', 'dbt_utils')(query)) }}\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": ["macro.dbt_utils.default__get_query_results_as_dict"]
      },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1665426350.1456661,
      "supported_languages": null
    },
    "macro.dbt_utils.default__get_query_results_as_dict": {
      "unique_id": "macro.dbt_utils.default__get_query_results_as_dict",
      "package_name": "dbt_utils",
      "root_path": "/Users/sung/Desktop/dbt/dbt_env/dbt_packages/dbt_utils",
      "path": "macros/sql/get_query_results_as_dict.sql",
      "original_file_path": "macros/sql/get_query_results_as_dict.sql",
      "name": "default__get_query_results_as_dict",
      "macro_sql": "{% macro default__get_query_results_as_dict(query) %}\n\n{# This macro returns a dictionary of the form {column_name: (tuple_of_results)} #}\n\n    {%- call statement('get_query_results', fetch_result=True,auto_begin=false) -%}\n\n        {{ query }}\n\n    {%- endcall -%}\n\n    {% set sql_results={} %}\n\n    {%- if execute -%}\n        {% set sql_results_table = load_result('get_query_results').table.columns %}\n        {% for column_name, column in sql_results_table.items() %}\n            {% do sql_results.update({column_name: column.values()}) %}\n        {% endfor %}\n    {%- endif -%}\n\n    {{ return(sql_results) }}\n\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": { "macros": ["macro.dbt.statement"] },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1665426350.147328,
      "supported_languages": null
    },
    "macro.dbt_utils.degrees_to_radians": {
      "unique_id": "macro.dbt_utils.degrees_to_radians",
      "package_name": "dbt_utils",
      "root_path": "/Users/sung/Desktop/dbt/dbt_env/dbt_packages/dbt_utils",
      "path": "macros/sql/haversine_distance.sql",
      "original_file_path": "macros/sql/haversine_distance.sql",
      "name": "degrees_to_radians",
      "macro_sql": "{% macro degrees_to_radians(degrees) -%}\n    acos(-1) * {{degrees}} / 180\n{%- endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": { "macros": [] },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1665426350.1498759,
      "supported_languages": null
    },
    "macro.dbt_utils.haversine_distance": {
      "unique_id": "macro.dbt_utils.haversine_distance",
      "package_name": "dbt_utils",
      "root_path": "/Users/sung/Desktop/dbt/dbt_env/dbt_packages/dbt_utils",
      "path": "macros/sql/haversine_distance.sql",
      "original_file_path": "macros/sql/haversine_distance.sql",
      "name": "haversine_distance",
      "macro_sql": "{% macro haversine_distance(lat1, lon1, lat2, lon2, unit='mi') -%}\n    {{ return(adapter.dispatch('haversine_distance', 'dbt_utils')(lat1,lon1,lat2,lon2,unit)) }}\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": ["macro.dbt_utils.default__haversine_distance"]
      },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1665426350.150722,
      "supported_languages": null
    },
    "macro.dbt_utils.default__haversine_distance": {
      "unique_id": "macro.dbt_utils.default__haversine_distance",
      "package_name": "dbt_utils",
      "root_path": "/Users/sung/Desktop/dbt/dbt_env/dbt_packages/dbt_utils",
      "path": "macros/sql/haversine_distance.sql",
      "original_file_path": "macros/sql/haversine_distance.sql",
      "name": "default__haversine_distance",
      "macro_sql": "{% macro default__haversine_distance(lat1, lon1, lat2, lon2, unit='mi') -%}\n{%- if unit == 'mi' %}\n    {% set conversion_rate = 1 %}\n{% elif unit == 'km' %}\n    {% set conversion_rate = 1.60934 %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\"unit input must be one of 'mi' or 'km'. Got \" ~ unit) }}\n{% endif %}\n\n    2 * 3961 * asin(sqrt(power((sin(radians(({{ lat2 }} - {{ lat1 }}) / 2))), 2) +\n    cos(radians({{lat1}})) * cos(radians({{lat2}})) *\n    power((sin(radians(({{ lon2 }} - {{ lon1 }}) / 2))), 2))) * {{ conversion_rate }}\n\n{%- endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": { "macros": [] },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1665426350.152299,
      "supported_languages": null
    },
    "macro.dbt_utils.bigquery__haversine_distance": {
      "unique_id": "macro.dbt_utils.bigquery__haversine_distance",
      "package_name": "dbt_utils",
      "root_path": "/Users/sung/Desktop/dbt/dbt_env/dbt_packages/dbt_utils",
      "path": "macros/sql/haversine_distance.sql",
      "original_file_path": "macros/sql/haversine_distance.sql",
      "name": "bigquery__haversine_distance",
      "macro_sql": "{% macro bigquery__haversine_distance(lat1, lon1, lat2, lon2, unit='mi') -%}\n{% set radians_lat1 = dbt_utils.degrees_to_radians(lat1) %}\n{% set radians_lat2 = dbt_utils.degrees_to_radians(lat2) %}\n{% set radians_lon1 = dbt_utils.degrees_to_radians(lon1) %}\n{% set radians_lon2 = dbt_utils.degrees_to_radians(lon2) %}\n{%- if unit == 'mi' %}\n    {% set conversion_rate = 1 %}\n{% elif unit == 'km' %}\n    {% set conversion_rate = 1.60934 %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\"unit input must be one of 'mi' or 'km'. Got \" ~ unit) }}\n{% endif %}\n    2 * 3961 * asin(sqrt(power(sin(({{ radians_lat2 }} - {{ radians_lat1 }}) / 2), 2) +\n    cos({{ radians_lat1 }}) * cos({{ radians_lat2 }}) *\n    power(sin(({{ radians_lon2 }} - {{ radians_lon1 }}) / 2), 2))) * {{ conversion_rate }}\n\n{%- endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": { "macros": ["macro.dbt_utils.degrees_to_radians"] },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1665426350.154887,
      "supported_languages": null
    },
    "macro.codegen.generate_model_yaml": {
      "unique_id": "macro.codegen.generate_model_yaml",
      "package_name": "codegen",
      "root_path": "/Users/sung/Desktop/dbt/dbt_env/dbt_packages/codegen",
      "path": "macros/generate_model_yaml.sql",
      "original_file_path": "macros/generate_model_yaml.sql",
      "name": "generate_model_yaml",
      "macro_sql": "{% macro generate_model_yaml(model_name) %}\n\n{% set model_yaml=[] %}\n\n{% do model_yaml.append('version: 2') %}\n{% do model_yaml.append('') %}\n{% do model_yaml.append('models:') %}\n{% do model_yaml.append('  - name: ' ~ model_name | lower) %}\n{% do model_yaml.append('    description: \"\"') %}\n{% do model_yaml.append('    columns:') %}\n\n{% set relation=ref(model_name) %}\n{%- set columns = adapter.get_columns_in_relation(relation) -%}\n\n{% for column in columns %}\n    {% do model_yaml.append('      - name: ' ~ column.name | lower ) %}\n    {% do model_yaml.append('        description: \"\"') %}\n    {% do model_yaml.append('') %}\n{% endfor %}\n\n{% if execute %}\n\n    {% set joined = model_yaml | join ('\\n') %}\n    {{ log(joined, info=True) }}\n    {% do return(joined) %}\n\n{% endif %}\n\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": { "macros": [] },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1665426350.159106,
      "supported_languages": null
    },
    "macro.codegen.generate_base_model": {
      "unique_id": "macro.codegen.generate_base_model",
      "package_name": "codegen",
      "root_path": "/Users/sung/Desktop/dbt/dbt_env/dbt_packages/codegen",
      "path": "macros/generate_base_model.sql",
      "original_file_path": "macros/generate_base_model.sql",
      "name": "generate_base_model",
      "macro_sql": "{% macro generate_base_model(source_name, table_name, leading_commas=False) %}\n\n{%- set source_relation = source(source_name, table_name) -%}\n\n{%- set columns = adapter.get_columns_in_relation(source_relation) -%}\n{% set column_names=columns | map(attribute='name') %}\n{% set base_model_sql %}\nwith source as (\n\n    select * from {% raw %}{{ source({% endraw %}'{{ source_name }}', '{{ table_name }}'{% raw %}) }}{% endraw %}\n\n),\n\nrenamed as (\n\n    select\n        {%- if leading_commas -%}\n        {%- for column in column_names %}\n        {{\", \" if not loop.first}}{{ column | lower }}\n        {%- endfor %}\n        {%- else -%}\n        {%- for column in column_names %}\n        {{ column | lower }}{{\",\" if not loop.last}}\n        {%- endfor -%}\n        {%- endif %}\n\n    from source\n\n)\n\nselect * from renamed\n{% endset %}\n\n{% if execute %}\n\n{{ log(base_model_sql, info=True) }}\n{% do return(base_model_sql) %}\n\n{% endif %}\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": { "macros": [] },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1665426350.162965,
      "supported_languages": null
    },
    "macro.codegen.get_tables_in_schema": {
      "unique_id": "macro.codegen.get_tables_in_schema",
      "package_name": "codegen",
      "root_path": "/Users/sung/Desktop/dbt/dbt_env/dbt_packages/codegen",
      "path": "macros/generate_source.sql",
      "original_file_path": "macros/generate_source.sql",
      "name": "get_tables_in_schema",
      "macro_sql": "{% macro get_tables_in_schema(schema_name, database_name=target.database) %}\n\n    {% set tables=dbt_utils.get_relations_by_pattern(\n            database=database_name,\n            schema_pattern=schema_name,\n            table_pattern='%'\n    ) %}\n\n    {% set table_list= tables | map(attribute='identifier') %}\n\n    {{ return(table_list | sort) }}\n\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": { "macros": ["macro.dbt_utils.get_relations_by_pattern"] },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1665426350.165965,
      "supported_languages": null
    },
    "macro.codegen.generate_source": {
      "unique_id": "macro.codegen.generate_source",
      "package_name": "codegen",
      "root_path": "/Users/sung/Desktop/dbt/dbt_env/dbt_packages/codegen",
      "path": "macros/generate_source.sql",
      "original_file_path": "macros/generate_source.sql",
      "name": "generate_source",
      "macro_sql": "{% macro generate_source(schema_name, database_name=target.database, generate_columns=False, include_descriptions=False) %}\n\n{% set sources_yaml=[] %}\n\n{% do sources_yaml.append('version: 2') %}\n{% do sources_yaml.append('') %}\n{% do sources_yaml.append('sources:') %}\n{% do sources_yaml.append('  - name: ' ~ schema_name | lower) %}\n\n{% if database_name != target.database %}\n{% do sources_yaml.append('    database: ' ~ database_name | lower) %}\n{% endif %}\n\n{% do sources_yaml.append('    tables:') %}\n\n{% set tables=codegen.get_tables_in_schema(schema_name, database_name) %}\n\n{% for table in tables %}\n    {% do sources_yaml.append('      - name: ' ~ table | lower ) %}\n\n    {% if generate_columns %}\n    {% do sources_yaml.append('        columns:') %}\n\n        {% set table_relation=api.Relation.create(\n            database=database_name,\n            schema=schema_name,\n            identifier=table\n        ) %}\n\n        {% set columns=adapter.get_columns_in_relation(table_relation) %}\n\n        {% for column in columns %}\n            {% do sources_yaml.append('          - name: ' ~ column.name | lower ) %}\n            {% if include_descriptions %}\n                {% do sources_yaml.append('            description: \"\"' ) %}\n            {% endif %}\n        {% endfor %}\n            {% do sources_yaml.append('') %}\n\n    {% endif %}\n\n{% endfor %}\n\n{% if execute %}\n\n    {% set joined = sources_yaml | join ('\\n') %}\n    {{ log(joined, info=True) }}\n    {% do return(joined) %}\n\n{% endif %}\n\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": { "macros": ["macro.codegen.get_tables_in_schema"] },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1665426350.170808,
      "supported_languages": null
    },
    "macro.dbt_external_tables.bigquery__create_external_table": {
      "unique_id": "macro.dbt_external_tables.bigquery__create_external_table",
      "package_name": "dbt_external_tables",
      "root_path": "/Users/sung/Desktop/dbt/dbt_env/dbt_packages/dbt_external_tables",
      "path": "macros/plugins/bigquery/create_external_table.sql",
      "original_file_path": "macros/plugins/bigquery/create_external_table.sql",
      "name": "bigquery__create_external_table",
      "macro_sql": "{% macro bigquery__create_external_table(source_node) %}\n\n    {%- set columns = source_node.columns.values() -%}\n    {%- set external = source_node.external -%}\n    {%- set partitions = external.partitions -%}\n    {%- set options = external.options -%}\n    \n    {%- set uris = [] -%}\n    {%- if options is mapping and options.get('uris', none) -%}\n        {%- set uris = external.options.get('uris') -%}\n    {%- else -%}\n        {%- set uris = [external.location] -%}\n    {%- endif -%}\n\n    create or replace external table {{source(source_node.source_name, source_node.name)}}\n        {%- if columns -%}(\n            {% for column in columns %}\n                {{column.name}} {{column.data_type}} {{- ',' if not loop.last -}}\n            {%- endfor -%}\n        )\n        {% endif %}\n        {% if options and options.get('hive_partition_uri_prefix', none) %}\n        with partition columns {%- if partitions %} (\n            {%- for partition in partitions %}\n                {{partition.name}} {{partition.data_type}}{{',' if not loop.last}}\n            {%- endfor -%}\n        ) {% endif -%}\n        {% endif %}\n        options (\n            uris = [{%- for uri in uris -%} '{{uri}}' {{- \",\" if not loop.last}} {%- endfor -%}]\n            {%- if options is mapping -%}\n            {%- for key, value in options.items() if key != 'uris' %}\n                {%- if value is string -%}\n                , {{key}} = '{{value}}'\n                {%- else -%}\n                , {{key}} = {{value}}\n                {%- endif -%}\n            {%- endfor -%}\n            {%- endif -%}\n        )\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": { "macros": [] },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1665426350.1780422,
      "supported_languages": null
    },
    "macro.dbt_external_tables.bigquery__get_external_build_plan": {
      "unique_id": "macro.dbt_external_tables.bigquery__get_external_build_plan",
      "package_name": "dbt_external_tables",
      "root_path": "/Users/sung/Desktop/dbt/dbt_env/dbt_packages/dbt_external_tables",
      "path": "macros/plugins/bigquery/get_external_build_plan.sql",
      "original_file_path": "macros/plugins/bigquery/get_external_build_plan.sql",
      "name": "bigquery__get_external_build_plan",
      "macro_sql": "{% macro bigquery__get_external_build_plan(source_node) %}\n\n    {% set build_plan = [] %}\n    \n    {% set old_relation = adapter.get_relation(\n        database = source_node.database,\n        schema = source_node.schema,\n        identifier = source_node.identifier\n    ) %}\n    \n    {% set create_or_replace = (old_relation is none or var('ext_full_refresh', false)) %}\n\n    {% if create_or_replace %}\n        {% set build_plan = build_plan + [dbt_external_tables.create_external_table(source_node)] %}\n    {% else %}\n        {% set build_plan = build_plan + dbt_external_tables.refresh_external_table(source_node) %}\n    {% endif %}\n\n    {% do return(build_plan) %}\n\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": [
          "macro.dbt_external_tables.create_external_table",
          "macro.dbt_external_tables.refresh_external_table"
        ]
      },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1665426350.1809568,
      "supported_languages": null
    },
    "macro.dbt_external_tables.snowflake__create_external_table": {
      "unique_id": "macro.dbt_external_tables.snowflake__create_external_table",
      "package_name": "dbt_external_tables",
      "root_path": "/Users/sung/Desktop/dbt/dbt_env/dbt_packages/dbt_external_tables",
      "path": "macros/plugins/snowflake/create_external_table.sql",
      "original_file_path": "macros/plugins/snowflake/create_external_table.sql",
      "name": "snowflake__create_external_table",
      "macro_sql": "{% macro snowflake__create_external_table(source_node) %}\n\n    {%- set columns = source_node.columns.values() -%}\n    {%- set external = source_node.external -%}\n    {%- set partitions = external.partitions -%}\n\n    {%- set is_csv = dbt_external_tables.is_csv(external.file_format) -%}\n\n{# https://docs.snowflake.net/manuals/sql-reference/sql/create-external-table.html #}\n{# This assumes you have already created an external stage #}\n    create or replace external table {{source(source_node.source_name, source_node.name)}}\n    {%- if columns or partitions -%}\n    (\n        {%- if partitions -%}{%- for partition in partitions %}\n            {{partition.name}} {{partition.data_type}} as {{partition.expression}}{{- ',' if not loop.last or columns|length > 0 -}}\n        {%- endfor -%}{%- endif -%}\n        {%- for column in columns %}\n            {%- set column_quoted = adapter.quote(column.name) if column.quote else column.name %}\n            {%- set col_expression -%}\n                {%- set col_id = 'value:c' ~ loop.index if is_csv else 'value:' ~ column.name -%}\n                (case when is_null_value({{col_id}}) or lower({{col_id}}) = 'null' then null else {{col_id}} end)\n            {%- endset %}\n            {{column_quoted}} {{column.data_type}} as ({{col_expression}}::{{column.data_type}})\n            {{- ',' if not loop.last -}}\n        {% endfor %}\n    )\n    {%- endif -%}\n    {% if partitions %} partition by ({{partitions|map(attribute='name')|join(', ')}}) {% endif %}\n    location = {{external.location}} {# stage #}\n    {% if external.auto_refresh in (true, false) -%}\n      auto_refresh = {{external.auto_refresh}}\n    {%- endif %}\n    {% if external.pattern -%} pattern = '{{external.pattern}}' {%- endif %}\n    {% if external.integration -%} integration = '{{external.integration}}' {%- endif %}\n    file_format = {{external.file_format}}\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": { "macros": ["macro.dbt_external_tables.is_csv"] },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1665426350.186594,
      "supported_languages": null
    },
    "macro.dbt_external_tables.snowflake__refresh_external_table": {
      "unique_id": "macro.dbt_external_tables.snowflake__refresh_external_table",
      "package_name": "dbt_external_tables",
      "root_path": "/Users/sung/Desktop/dbt/dbt_env/dbt_packages/dbt_external_tables",
      "path": "macros/plugins/snowflake/refresh_external_table.sql",
      "original_file_path": "macros/plugins/snowflake/refresh_external_table.sql",
      "name": "snowflake__refresh_external_table",
      "macro_sql": "{% macro snowflake__refresh_external_table(source_node) %}\n\n    {% set external = source_node.external %}\n    {% set snowpipe = source_node.external.get('snowpipe', none) %}\n    \n    {% set auto_refresh = external.get('auto_refresh', false) %}\n    {% set partitions = external.get('partitions', none) %}\n    \n    {% set manual_refresh = (partitions and not auto_refresh) %}\n    \n    {% if manual_refresh %}\n\n        {% set ddl %}\n        begin;\n        alter external table {{source(source_node.source_name, source_node.name)}} refresh;\n        commit;\n        {% endset %}\n        \n        {% do return([ddl]) %}\n    \n    {% else %}\n    \n        {% do return([]) %}\n    \n    {% endif %}\n    \n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": { "macros": [] },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1665426350.1891289,
      "supported_languages": null
    },
    "macro.dbt_external_tables.snowflake__get_external_build_plan": {
      "unique_id": "macro.dbt_external_tables.snowflake__get_external_build_plan",
      "package_name": "dbt_external_tables",
      "root_path": "/Users/sung/Desktop/dbt/dbt_env/dbt_packages/dbt_external_tables",
      "path": "macros/plugins/snowflake/get_external_build_plan.sql",
      "original_file_path": "macros/plugins/snowflake/get_external_build_plan.sql",
      "name": "snowflake__get_external_build_plan",
      "macro_sql": "{% macro snowflake__get_external_build_plan(source_node) %}\n\n    {% set build_plan = [] %}\n    \n    {% set old_relation = adapter.get_relation(\n        database = source_node.database,\n        schema = source_node.schema,\n        identifier = source_node.identifier\n    ) %}\n    \n    {% set create_or_replace = (old_relation is none or var('ext_full_refresh', false)) %}\n\n    {% if source_node.external.get('snowpipe', none) is not none %}\n    \n        {% if create_or_replace %}\n            {% set build_plan = build_plan + [\n                dbt_external_tables.snowflake_create_empty_table(source_node),\n                dbt_external_tables.snowflake_get_copy_sql(source_node, explicit_transaction=true),\n                dbt_external_tables.snowflake_create_snowpipe(source_node)\n            ] %}\n        {% else %}\n            {% set build_plan = build_plan + dbt_external_tables.snowflake_refresh_snowpipe(source_node) %}\n        {% endif %}\n            \n    {% else %}\n    \n        {% if create_or_replace %}\n            {% set build_plan = build_plan + [dbt_external_tables.create_external_table(source_node)] %}\n        {% else %}\n            {% set build_plan = build_plan + dbt_external_tables.refresh_external_table(source_node) %}\n        {% endif %}\n        \n    {% endif %}\n\n    {% do return(build_plan) %}\n\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": [
          "macro.dbt_external_tables.snowflake_create_empty_table",
          "macro.dbt_external_tables.snowflake_get_copy_sql",
          "macro.dbt_external_tables.snowflake_create_snowpipe",
          "macro.dbt_external_tables.snowflake_refresh_snowpipe",
          "macro.dbt_external_tables.create_external_table",
          "macro.dbt_external_tables.refresh_external_table"
        ]
      },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1665426350.193547,
      "supported_languages": null
    },
    "macro.dbt_external_tables.snowflake_create_snowpipe": {
      "unique_id": "macro.dbt_external_tables.snowflake_create_snowpipe",
      "package_name": "dbt_external_tables",
      "root_path": "/Users/sung/Desktop/dbt/dbt_env/dbt_packages/dbt_external_tables",
      "path": "macros/plugins/snowflake/snowpipe/create_snowpipe.sql",
      "original_file_path": "macros/plugins/snowflake/snowpipe/create_snowpipe.sql",
      "name": "snowflake_create_snowpipe",
      "macro_sql": "{% macro snowflake_create_snowpipe(source_node) %}\n\n    {%- set external = source_node.external -%}\n    {%- set snowpipe = external.snowpipe -%}\n\n{# https://docs.snowflake.com/en/sql-reference/sql/create-pipe.html #}\n    create or replace pipe {{source(source_node.source_name, source_node.name)}}\n        {% if snowpipe.auto_ingest -%} auto_ingest = {{snowpipe.auto_ingest}} {%- endif %}\n        {% if snowpipe.aws_sns_topic -%} aws_sns_topic = '{{snowpipe.aws_sns_topic}}' {%- endif %}\n        {% if snowpipe.integration -%} integration = '{{snowpipe.integration}}' {%- endif %}\n        as {{ dbt_external_tables.snowflake_get_copy_sql(source_node) }}\n\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": ["macro.dbt_external_tables.snowflake_get_copy_sql"]
      },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1665426350.195935,
      "supported_languages": null
    },
    "macro.dbt_external_tables.snowflake_create_empty_table": {
      "unique_id": "macro.dbt_external_tables.snowflake_create_empty_table",
      "package_name": "dbt_external_tables",
      "root_path": "/Users/sung/Desktop/dbt/dbt_env/dbt_packages/dbt_external_tables",
      "path": "macros/plugins/snowflake/snowpipe/create_empty_table.sql",
      "original_file_path": "macros/plugins/snowflake/snowpipe/create_empty_table.sql",
      "name": "snowflake_create_empty_table",
      "macro_sql": "{% macro snowflake_create_empty_table(source_node) %}\n\n    {%- set columns = source_node.columns.values() %}\n\n    create or replace table {{source(source_node.source_name, source_node.name)}} (\n        {% if columns|length == 0 %}\n            value variant,\n        {% else -%}\n        {%- for column in columns -%}\n            {{column.name}} {{column.data_type}},\n        {% endfor -%}\n        {% endif %}\n            metadata_filename varchar,\n            metadata_file_row_number bigint,\n            _dbt_copied_at timestamp\n    );\n\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": { "macros": [] },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1665426350.1979,
      "supported_languages": null
    },
    "macro.dbt_external_tables.snowflake_refresh_snowpipe": {
      "unique_id": "macro.dbt_external_tables.snowflake_refresh_snowpipe",
      "package_name": "dbt_external_tables",
      "root_path": "/Users/sung/Desktop/dbt/dbt_env/dbt_packages/dbt_external_tables",
      "path": "macros/plugins/snowflake/snowpipe/refresh_snowpipe.sql",
      "original_file_path": "macros/plugins/snowflake/snowpipe/refresh_snowpipe.sql",
      "name": "snowflake_refresh_snowpipe",
      "macro_sql": "{% macro snowflake_refresh_snowpipe(source_node) %}\n\n    {% set snowpipe = source_node.external.snowpipe %}\n    {% set auto_ingest = snowpipe.get('auto_ingest', false) if snowpipe is mapping %}\n    \n    {% if auto_ingest is true %}\n    \n        {% do return([]) %}\n    \n    {% else %}\n    \n        {% set ddl %}\n        alter pipe {{source(source_node.source_name, source_node.name)}} refresh\n        {% endset %}\n        \n        {{ return([ddl]) }}\n    \n    {% endif %}\n    \n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": { "macros": [] },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1665426350.200564,
      "supported_languages": null
    },
    "macro.dbt_external_tables.snowflake_get_copy_sql": {
      "unique_id": "macro.dbt_external_tables.snowflake_get_copy_sql",
      "package_name": "dbt_external_tables",
      "root_path": "/Users/sung/Desktop/dbt/dbt_env/dbt_packages/dbt_external_tables",
      "path": "macros/plugins/snowflake/snowpipe/get_copy_sql.sql",
      "original_file_path": "macros/plugins/snowflake/snowpipe/get_copy_sql.sql",
      "name": "snowflake_get_copy_sql",
      "macro_sql": "{% macro snowflake_get_copy_sql(source_node, explicit_transaction=false) %}\n{# This assumes you have already created an external stage #}\n\n    {%- set columns = source_node.columns.values() -%}\n    {%- set external = source_node.external -%}\n    {%- set is_csv = dbt_external_tables.is_csv(external.file_format) %}\n    {%- set copy_options = external.snowpipe.get('copy_options', none) -%}\n   \n    {%- if explicit_transaction -%} begin; {%- endif %}\n    \n    copy into {{source(source_node.source_name, source_node.name)}}\n    from ( \n        select\n        {% if columns|length == 0 %}\n            $1::variant as value,\n        {% else -%}\n        {%- for column in columns -%}\n            {%- set col_expression -%}\n                {%- if is_csv -%}nullif(${{loop.index}},''){# special case: get columns by ordinal position #}\n                {%- else -%}nullif($1:{{column.name}},''){# standard behavior: get columns by name #}\n                {%- endif -%}\n            {%- endset -%}\n            {{col_expression}}::{{column.data_type}} as {{column.name}},\n        {% endfor -%}\n        {% endif %}\n            metadata$filename::varchar as metadata_filename,\n            metadata$file_row_number::bigint as metadata_file_row_number,\n            current_timestamp::timestamp as _dbt_copied_at\n        from {{external.location}} {# stage #}\n    )\n    file_format = {{external.file_format}}\n    {% if external.pattern -%} pattern = '{{external.pattern}}' {%- endif %}\n    {% if copy_options %} {{copy_options}} {% endif %};\n    \n    {% if explicit_transaction -%} commit; {%- endif -%}\n\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": { "macros": ["macro.dbt_external_tables.is_csv"] },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1665426350.20559,
      "supported_languages": null
    },
    "macro.dbt_external_tables.is_csv": {
      "unique_id": "macro.dbt_external_tables.is_csv",
      "package_name": "dbt_external_tables",
      "root_path": "/Users/sung/Desktop/dbt/dbt_env/dbt_packages/dbt_external_tables",
      "path": "macros/plugins/snowflake/helpers/is_csv.sql",
      "original_file_path": "macros/plugins/snowflake/helpers/is_csv.sql",
      "name": "is_csv",
      "macro_sql": "{% macro is_csv(file_format) %}\n\n{# From https://docs.snowflake.net/manuals/sql-reference/sql/create-external-table.html:\n\nImportant: The external table does not inherit the file format, if any, in the \nstage definition. You must explicitly specify any file format options for the \nexternal table using the FILE_FORMAT parameter.\n\nNote: FORMAT_NAME and TYPE are mutually exclusive; to avoid unintended behavior, \nyou should only specify one or the other when creating an external table.\n\n#}\n\n    {% set ff_ltrimmed = file_format|lower|replace(' ','') %}\n\n    {% if 'type=' in ff_ltrimmed %}\n    \n        {% if 'type=csv' in ff_ltrimmed %}\n\n            {{return(true)}}\n\n        {% else %}\n\n            {{return(false)}}\n            \n        {% endif %}\n        \n    {% else %}\n    \n        {% set ff_standardized = ff_ltrimmed\n            | replace('(','') | replace(')','')\n            | replace('format_name=','') %}\n        {% set fqn = ff_standardized.split('.') %}\n        \n        {% if fqn | length == 3 %}\n            {% set ff_database, ff_schema, ff_identifier = fqn[0], fqn[1], fqn[2] %}\n        {% elif fqn | length == 2 %}\n            {% set ff_database, ff_schema, ff_identifier = target.database, fqn[0], fqn[1] %}\n        {% else %}\n            {% set ff_database, ff_schema, ff_identifier = target.database, target.schema, fqn[0] %}\n        {% endif %}\n    \n        {% call statement('get_file_format', fetch_result = True) %}\n            show file formats in {{ff_database}}.{{ff_schema}}\n        {% endcall %}\n        \n        {% set ffs = load_result('get_file_format').table %}\n        \n        {% for ff in ffs %}\n            \n            {% if ff['name']|lower == ff_identifier and ff['type']|lower == 'csv' %}\n            \n                {{return(true)}}\n            \n            {% endif %}\n        \n        {% endfor %}\n        \n        {{return(false)}}        \n    \n    {% endif %}\n\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": { "macros": ["macro.dbt.statement"] },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1665426350.213069,
      "supported_languages": null
    },
    "macro.dbt_external_tables.redshift__create_external_table": {
      "unique_id": "macro.dbt_external_tables.redshift__create_external_table",
      "package_name": "dbt_external_tables",
      "root_path": "/Users/sung/Desktop/dbt/dbt_env/dbt_packages/dbt_external_tables",
      "path": "macros/plugins/redshift/create_external_table.sql",
      "original_file_path": "macros/plugins/redshift/create_external_table.sql",
      "name": "redshift__create_external_table",
      "macro_sql": "{% macro redshift__create_external_table(source_node) %}\n\n    {%- set columns = source_node.columns.values() -%}\n    {%- set external = source_node.external -%}\n    {%- set partitions = external.partitions -%}\n\n{# https://docs.aws.amazon.com/redshift/latest/dg/r_CREATE_EXTERNAL_TABLE.html #}\n{# This assumes you have already created an external schema #}\n\n    create external table {{source(source_node.source_name, source_node.name)}} (\n        {% for column in columns %}\n            {{adapter.quote(column.name)}} {{column.data_type}}\n            {{- ',' if not loop.last -}}\n        {% endfor %}\n    )\n    {% if partitions -%} partitioned by (\n        {%- for partition in partitions -%}\n            {{adapter.quote(partition.name)}} {{partition.data_type}}{{', ' if not loop.last}}\n        {%- endfor -%}\n    ) {%- endif %}\n    {% if external.row_format -%} row format {{external.row_format}} {%- endif %}\n    {% if external.file_format -%} stored as {{external.file_format}} {%- endif %}\n    {% if external.location -%} location '{{external.location}}' {%- endif %}\n    {% if external.table_properties -%} table properties {{external.table_properties}} {%- endif %}\n\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": { "macros": [] },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1665426350.2173572,
      "supported_languages": null
    },
    "macro.dbt_external_tables.redshift__refresh_external_table": {
      "unique_id": "macro.dbt_external_tables.redshift__refresh_external_table",
      "package_name": "dbt_external_tables",
      "root_path": "/Users/sung/Desktop/dbt/dbt_env/dbt_packages/dbt_external_tables",
      "path": "macros/plugins/redshift/refresh_external_table.sql",
      "original_file_path": "macros/plugins/redshift/refresh_external_table.sql",
      "name": "redshift__refresh_external_table",
      "macro_sql": "{% macro redshift__refresh_external_table(source_node) %}\n\n    {%- set partitions = source_node.external.get('partitions',[]) -%}\n\n    {%- if partitions -%}\n    \n        {%- set part_len = partitions|length -%}\n    \n        {%- set get_partitions_sql -%}\n        \n        select * from\n        \n        {%- for partition in partitions %} (\n        \n            {%- set part_num = loop.index -%}\n            \n            {%- if partition.vals.macro -%}\n                {%- set vals = dbt_external_tables.render_from_context(partition.vals.macro, **partition.vals.args) -%}\n            {%- elif partition.vals is string -%}\n                {%- set vals = [partition.vals] -%}\n            {%- else -%}\n                {%- set vals = partition.vals -%}\n            {%- endif -%}\n        \n            {%- for val in vals %}\n            \n                select\n                    '\"{{ partition.name }}\"' as name_{{ part_num }},\n                    '\"{{ val }}\"' as val_{{ part_num }},\n                    '\"{{ dbt_external_tables.render_from_context(partition.path_macro, partition.name, val) }}\"' as path_{{ part_num }}\n                \n                {{ 'union all' if not loop.last else ') ' }}\n            \n            {%- endfor -%}\n            \n            {{ 'cross join' if not loop.last }}\n            \n        {%- endfor -%}\n        \n        {%- endset -%}\n        \n        {%- set finals = [] -%}\n        \n        {%- if execute -%}\n            {%- set results = run_query(get_partitions_sql) -%}\n            {%- for row in results -%}\n                \n                {%- set partition_parts = [] -%}\n                {%- set path_parts = [] -%}\n                \n                {%- for i in range(0, part_len) -%}\n                    {%- do partition_parts.append({\n                        'name': row[i * 3][1:-1],\n                        'value': row[i * 3 + 1][1:-1]\n                    }) -%}\n                    {%- do path_parts.append(row[i * 3 + 2][1:-1]) -%}\n                {%- endfor -%}\n                \n                {%- set construct = {\n                    'partition_by': partition_parts,\n                    'path': path_parts | join('/')\n                }  -%}\n                \n                {% do finals.append(construct) %}\n            {%- endfor -%}\n        {%- endif -%}\n    \n        {%- set ddl = dbt_external_tables.redshift_alter_table_add_partitions(source_node, finals) -%}\n        {{ return(ddl) }}\n    \n    {% else %}\n    \n        {% do return([]) %}\n    \n    {% endif %}\n    \n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": [
          "macro.dbt_external_tables.render_from_context",
          "macro.dbt.run_query",
          "macro.dbt_external_tables.redshift_alter_table_add_partitions"
        ]
      },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1665426350.229106,
      "supported_languages": null
    },
    "macro.dbt_external_tables.redshift__get_external_build_plan": {
      "unique_id": "macro.dbt_external_tables.redshift__get_external_build_plan",
      "package_name": "dbt_external_tables",
      "root_path": "/Users/sung/Desktop/dbt/dbt_env/dbt_packages/dbt_external_tables",
      "path": "macros/plugins/redshift/get_external_build_plan.sql",
      "original_file_path": "macros/plugins/redshift/get_external_build_plan.sql",
      "name": "redshift__get_external_build_plan",
      "macro_sql": "{% macro redshift__get_external_build_plan(source_node) %}\n\n    {% set build_plan = [] %}\n    \n    {% set create_or_replace = (var('ext_full_refresh', false) or not redshift_is_ext_tbl(source_node)) %}\n    \n    {% if create_or_replace %}\n\n        {% set build_plan = [\n                dbt_external_tables.dropif(source_node),\n                dbt_external_tables.create_external_table(source_node)\n            ] + dbt_external_tables.refresh_external_table(source_node) \n        %}\n        \n    {% else %}\n    \n        {% set build_plan = dbt_external_tables.refresh_external_table(source_node) %}\n        \n    {% endif %}\n    \n    {% do return(build_plan) %}\n\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": [
          "macro.dbt_external_tables.redshift_is_ext_tbl",
          "macro.dbt_external_tables.dropif",
          "macro.dbt_external_tables.create_external_table",
          "macro.dbt_external_tables.refresh_external_table"
        ]
      },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1665426350.231227,
      "supported_languages": null
    },
    "macro.dbt_external_tables.render_from_context": {
      "unique_id": "macro.dbt_external_tables.render_from_context",
      "package_name": "dbt_external_tables",
      "root_path": "/Users/sung/Desktop/dbt/dbt_env/dbt_packages/dbt_external_tables",
      "path": "macros/plugins/redshift/helpers/render_macro.sql",
      "original_file_path": "macros/plugins/redshift/helpers/render_macro.sql",
      "name": "render_from_context",
      "macro_sql": "{% macro render_from_context(name) -%}\n{% set original_name = name %}\n  {% if '.' in name %}\n    {% set package_name, name = name.split(\".\", 1) %}\n  {% else %}\n    {% set package_name = none %}\n  {% endif %}\n\n  {% if package_name is none %}\n    {% set package_context = context %}\n  {% elif package_name in context %}\n    {% set package_context = context[package_name] %}\n  {% else %}\n    {% set error_msg %}\n        Could not find package '{{package_name}}', called by macro '{{original_name}}'\n    {% endset %}\n    {{ exceptions.raise_compiler_error(error_msg | trim) }}\n  {% endif %}\n  \n    {{ return(package_context[name](*varargs, **kwargs)) }}\n\n{%- endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": { "macros": [] },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1665426350.233921,
      "supported_languages": null
    },
    "macro.dbt_external_tables.redshift__dropif": {
      "unique_id": "macro.dbt_external_tables.redshift__dropif",
      "package_name": "dbt_external_tables",
      "root_path": "/Users/sung/Desktop/dbt/dbt_env/dbt_packages/dbt_external_tables",
      "path": "macros/plugins/redshift/helpers/dropif.sql",
      "original_file_path": "macros/plugins/redshift/helpers/dropif.sql",
      "name": "redshift__dropif",
      "macro_sql": "{% macro redshift__dropif(node) %}\n    \n    {% set ddl %}\n        drop table if exists {{source(node.source_name, node.name)}} cascade\n    {% endset %}\n    \n    {{return(ddl)}}\n\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": { "macros": [] },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1665426350.2349288,
      "supported_languages": null
    },
    "macro.dbt_external_tables.redshift_alter_table_add_partitions": {
      "unique_id": "macro.dbt_external_tables.redshift_alter_table_add_partitions",
      "package_name": "dbt_external_tables",
      "root_path": "/Users/sung/Desktop/dbt/dbt_env/dbt_packages/dbt_external_tables",
      "path": "macros/plugins/redshift/helpers/add_partitions.sql",
      "original_file_path": "macros/plugins/redshift/helpers/add_partitions.sql",
      "name": "redshift_alter_table_add_partitions",
      "macro_sql": "{% macro redshift_alter_table_add_partitions(source_node, partitions) %}\n\n  {{ log(\"Generating ADD PARTITION statement for partition set between \" \n         ~ partitions[0]['path'] ~ \" and \" ~ (partitions|last)['path']) }}\n\n  {% set ddl = [] %}\n  \n  {% if partitions|length > 0 %}\n  \n    {% set alter_table_add %}\n        alter table {{source(source_node.source_name, source_node.name)}} add if not exists \n    {% endset %}\n  \n    {%- set alters -%}\n\n      {{ alter_table_add }}\n\n    {%- for partition in partitions -%}\n\n      {%- if loop.index0 != 0 and loop.index0 % 100 == 0 -%}\n\n        ; {{ alter_table_add }}\n\n      {%- endif -%}\n\n        partition ({%- for part in partition.partition_by -%}{{ part.name }}='{{ part.value }}'{{', ' if not loop.last}}{%- endfor -%})\n        location '{{ source_node.external.location }}/{{ partition.path }}/'\n\n    {% endfor -%}\n    \n    {%- endset -%}\n    \n    {% set ddl = ddl + alters.split(';') %}\n\n  {% else %}\n\n    {{ log(\"No partitions to be added\") }}\n\n  {% endif %}\n  \n  {% do return(ddl) %}\n\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": { "macros": [] },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1665426350.239367,
      "supported_languages": null
    },
    "macro.dbt_external_tables.redshift__exit_transaction": {
      "unique_id": "macro.dbt_external_tables.redshift__exit_transaction",
      "package_name": "dbt_external_tables",
      "root_path": "/Users/sung/Desktop/dbt/dbt_env/dbt_packages/dbt_external_tables",
      "path": "macros/plugins/redshift/helpers/transaction.sql",
      "original_file_path": "macros/plugins/redshift/helpers/transaction.sql",
      "name": "redshift__exit_transaction",
      "macro_sql": "{% macro redshift__exit_transaction() %}\n    {{ return('begin; commit;') }}\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": { "macros": [] },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1665426350.24014,
      "supported_languages": null
    },
    "macro.dbt_external_tables.year_month_day": {
      "unique_id": "macro.dbt_external_tables.year_month_day",
      "package_name": "dbt_external_tables",
      "root_path": "/Users/sung/Desktop/dbt/dbt_env/dbt_packages/dbt_external_tables",
      "path": "macros/plugins/redshift/helpers/paths.sql",
      "original_file_path": "macros/plugins/redshift/helpers/paths.sql",
      "name": "year_month_day",
      "macro_sql": "{% macro year_month_day(name, value) %}\n    {% set path = value.replace('-','/') %}\n    {{return(path)}}\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": { "macros": ["macro.dbt_utils.replace"] },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1665426350.2411578,
      "supported_languages": null
    },
    "macro.dbt_external_tables.key_value": {
      "unique_id": "macro.dbt_external_tables.key_value",
      "package_name": "dbt_external_tables",
      "root_path": "/Users/sung/Desktop/dbt/dbt_env/dbt_packages/dbt_external_tables",
      "path": "macros/plugins/redshift/helpers/paths.sql",
      "original_file_path": "macros/plugins/redshift/helpers/paths.sql",
      "name": "key_value",
      "macro_sql": "{% macro key_value(name, value) %}\n    {% set path = name ~ '=' ~ value %}\n    {{return(path)}}\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": { "macros": [] },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1665426350.2419488,
      "supported_languages": null
    },
    "macro.dbt_external_tables.value_only": {
      "unique_id": "macro.dbt_external_tables.value_only",
      "package_name": "dbt_external_tables",
      "root_path": "/Users/sung/Desktop/dbt/dbt_env/dbt_packages/dbt_external_tables",
      "path": "macros/plugins/redshift/helpers/paths.sql",
      "original_file_path": "macros/plugins/redshift/helpers/paths.sql",
      "name": "value_only",
      "macro_sql": "{% macro value_only(name, value) %}\n    {% set path = value %}\n    {{return(path)}}\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": { "macros": [] },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1665426350.242542,
      "supported_languages": null
    },
    "macro.dbt_external_tables.redshift_is_ext_tbl": {
      "unique_id": "macro.dbt_external_tables.redshift_is_ext_tbl",
      "package_name": "dbt_external_tables",
      "root_path": "/Users/sung/Desktop/dbt/dbt_env/dbt_packages/dbt_external_tables",
      "path": "macros/plugins/redshift/helpers/is_ext_tbl.sql",
      "original_file_path": "macros/plugins/redshift/helpers/is_ext_tbl.sql",
      "name": "redshift_is_ext_tbl",
      "macro_sql": "{% macro redshift_is_ext_tbl(node) %}\n\n    {% set existing_relation = load_relation(node) %}\n    \n    {#  external tables don't appear in information_schema.tables,\n        so dbt doesn't cache them #}\n    {% if existing_relation is none %}\n\n        {% set find_ext_tbl %}\n        \n            select count(*) from svv_external_tables\n            where schemaname = '{{node.schema}}'\n            and tablename = '{{node.identifier}}'\n        \n        {% endset %}\n        \n        {% if execute %}\n            {% set result = run_query(find_ext_tbl)[0][0] %}\n        {% else %}\n            {% set result = 0 %}\n        {% endif %}\n\n        {% set is_ext_tbl = (result > 0) %}\n        {% do return(is_ext_tbl) %}\n        \n    {% else %}\n    \n        {% do return(false) %}\n        \n    {% endif %}\n\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": ["macro.dbt.load_relation", "macro.dbt.run_query"]
      },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1665426350.245648,
      "supported_languages": null
    },
    "macro.dbt_external_tables.sqlserver__create_external_table": {
      "unique_id": "macro.dbt_external_tables.sqlserver__create_external_table",
      "package_name": "dbt_external_tables",
      "root_path": "/Users/sung/Desktop/dbt/dbt_env/dbt_packages/dbt_external_tables",
      "path": "macros/plugins/sqlserver/create_external_table.sql",
      "original_file_path": "macros/plugins/sqlserver/create_external_table.sql",
      "name": "sqlserver__create_external_table",
      "macro_sql": "{% macro sqlserver__create_external_table(source_node) %}\n\n    {%- set columns = source_node.columns.values() -%}\n    {%- set external = source_node.external -%}\n\n    {% if external.ansi_nulls is true -%} SET ANSI_NULLS ON; {%- endif %}\n    {% if external.quoted_identifier is true -%} SET QUOTED_IDENTIFIER ON; {%- endif %}\n\n    create external table {{source(source_node.source_name, source_node.name)}} (\n        {% for column in columns %}\n            {# TODO set nullity based on schema tests?? #}\n            {%- set nullity = 'NOT NULL' if 'not_null' in columns.tests else 'NULL'-%}\n            {{adapter.quote(column.name)}} {{column.data_type}} {{nullity}}\n            {{- ',' if not loop.last -}}\n        {% endfor %}\n    )\n    WITH (\n        {# remove keys that are None (i.e. not defined for a given source) #}\n        {%- for key, value in external.items() if value is not none and key not in ['ansi_nulls', 'quoted_identifier'] -%}\n            {{key}} = \n                {%- if key in [\"location\", \"schema_name\", \"object_name\"] -%}\n                    '{{value}}'\n                {% elif key in [\"data_source\",\"file_format\"] -%}\n                    [{{value}}]\n                {% else -%}\n                    {{value}}\n                {%- endif -%}\n            {{- ',' if not loop.last -}}\n            {%- endfor -%}\n    )\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": { "macros": [] },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1665426350.25021,
      "supported_languages": null
    },
    "macro.dbt_external_tables.sqlserver__get_external_build_plan": {
      "unique_id": "macro.dbt_external_tables.sqlserver__get_external_build_plan",
      "package_name": "dbt_external_tables",
      "root_path": "/Users/sung/Desktop/dbt/dbt_env/dbt_packages/dbt_external_tables",
      "path": "macros/plugins/sqlserver/get_external_build_plan.sql",
      "original_file_path": "macros/plugins/sqlserver/get_external_build_plan.sql",
      "name": "sqlserver__get_external_build_plan",
      "macro_sql": "{% macro sqlserver__get_external_build_plan(source_node) %}\n\n    {% set build_plan = [] %}\n\n    {% set old_relation = adapter.get_relation(\n        database = source_node.database,\n        schema = source_node.schema,\n        identifier = source_node.identifier\n    ) %}\n\n    {% set create_or_replace = (old_relation is none or var('ext_full_refresh', false)) %}\n\n    {% if create_or_replace %}\n        {% set build_plan = build_plan + [ \n            dbt_external_tables.dropif(source_node), \n            dbt_external_tables.create_external_table(source_node)\n        ] %}\n    {% else %}\n        {% set build_plan = build_plan + dbt_external_tables.refresh_external_table(source_node) %}\n    {% endif %}\n    {% do return(build_plan) %}\n\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": [
          "macro.dbt_external_tables.dropif",
          "macro.dbt_external_tables.create_external_table",
          "macro.dbt_external_tables.refresh_external_table"
        ]
      },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1665426350.252577,
      "supported_languages": null
    },
    "macro.dbt_external_tables.sqlserver__dropif": {
      "unique_id": "macro.dbt_external_tables.sqlserver__dropif",
      "package_name": "dbt_external_tables",
      "root_path": "/Users/sung/Desktop/dbt/dbt_env/dbt_packages/dbt_external_tables",
      "path": "macros/plugins/sqlserver/helpers/dropif.sql",
      "original_file_path": "macros/plugins/sqlserver/helpers/dropif.sql",
      "name": "sqlserver__dropif",
      "macro_sql": "{% macro sqlserver__dropif(node) %}\n    \n    {% set ddl %}\n      if object_id ('{{source(node.source_name, node.name)}}') is not null\n        begin\n        drop external table {{source(node.source_name, node.name)}}\n        end\n    {% endset %}\n    \n    {{return(ddl)}}\n\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": { "macros": [] },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1665426350.253778,
      "supported_languages": null
    },
    "macro.dbt_external_tables.spark__create_external_table": {
      "unique_id": "macro.dbt_external_tables.spark__create_external_table",
      "package_name": "dbt_external_tables",
      "root_path": "/Users/sung/Desktop/dbt/dbt_env/dbt_packages/dbt_external_tables",
      "path": "macros/plugins/spark/create_external_table.sql",
      "original_file_path": "macros/plugins/spark/create_external_table.sql",
      "name": "spark__create_external_table",
      "macro_sql": "{% macro spark__create_external_table(source_node) %}\n\n    {%- set columns = source_node.columns.values() -%}\n    {%- set external = source_node.external -%}\n    {%- set partitions = external.partitions -%}\n    {%- set options = external.options -%}\n\n{# https://spark.apache.org/docs/latest/sql-data-sources-hive-tables.html #}\n    create table {{source(source_node.source_name, source_node.name)}} \n    {%- if columns|length > 0 %} (\n        {% for column in columns %}\n            {{column.name}} {{column.data_type}}\n            {{- ',' if not loop.last -}}\n        {% endfor %}\n    ) {% endif -%}\n    {% if external.using %} using {{external.using}} {%- endif %}\n    {% if options -%} options (\n        {%- for key, value in options.items() -%}\n            '{{ key }}' = '{{value}}' {{- ', \\n' if not loop.last -}}\n        {%- endfor -%}\n    ) {%- endif %}\n    {% if partitions -%} partitioned by (\n        {%- for partition in partitions -%}\n            {{partition.name}} {{partition.data_type}}{{', ' if not loop.last}}\n        {%- endfor -%}\n    ) {%- endif %}\n    {% if external.row_format -%} row format {{external.row_format}} {%- endif %}\n    {% if external.file_format -%} stored as {{external.file_format}} {%- endif %}\n    {% if external.location -%} location '{{external.location}}' {%- endif %}\n    {% if external.table_properties -%} tblproperties {{ external.table_properties }} {%- endif -%}\n\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": { "macros": [] },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1665426350.259715,
      "supported_languages": null
    },
    "macro.dbt_external_tables.spark__refresh_external_table": {
      "unique_id": "macro.dbt_external_tables.spark__refresh_external_table",
      "package_name": "dbt_external_tables",
      "root_path": "/Users/sung/Desktop/dbt/dbt_env/dbt_packages/dbt_external_tables",
      "path": "macros/plugins/spark/refresh_external_table.sql",
      "original_file_path": "macros/plugins/spark/refresh_external_table.sql",
      "name": "spark__refresh_external_table",
      "macro_sql": "{% macro spark__refresh_external_table(source_node) %}\n    \n    {% set refresh %}\n        refresh table {{source(source_node.source_name, source_node.name)}}\n    {% endset %}\n    \n    {% do return([refresh]) %}\n\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": { "macros": [] },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1665426350.261137,
      "supported_languages": null
    },
    "macro.dbt_external_tables.spark__get_external_build_plan": {
      "unique_id": "macro.dbt_external_tables.spark__get_external_build_plan",
      "package_name": "dbt_external_tables",
      "root_path": "/Users/sung/Desktop/dbt/dbt_env/dbt_packages/dbt_external_tables",
      "path": "macros/plugins/spark/get_external_build_plan.sql",
      "original_file_path": "macros/plugins/spark/get_external_build_plan.sql",
      "name": "spark__get_external_build_plan",
      "macro_sql": "{% macro spark__get_external_build_plan(source_node) %}\n\n    {% set build_plan = [] %}\n\n    {% set old_relation = adapter.get_relation(\n        database = none,\n        schema = source_node.schema,\n        identifier = source_node.identifier\n    ) %}\n\n    {% set create_or_replace = (old_relation is none or var('ext_full_refresh', false)) %}\n\n    {% if create_or_replace %}\n        {% set build_plan = build_plan + [\n            dbt_external_tables.dropif(source_node), \n            dbt_external_tables.create_external_table(source_node)\n        ] %}\n    {% else %}\n        {% set build_plan = build_plan + dbt_external_tables.refresh_external_table(source_node) %}\n    {% endif %}\n\n    {% set recover_partitions = spark__recover_partitions(source_node) %}\n    {% if recover_partitions|length > 0 %}\n    {% set build_plan = build_plan + [\n        recover_partitions\n    ] %}\n    {% endif %}\n\n    {% do return(build_plan) %}\n\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": [
          "macro.dbt_external_tables.dropif",
          "macro.dbt_external_tables.create_external_table",
          "macro.dbt_external_tables.refresh_external_table",
          "macro.dbt_external_tables.spark__recover_partitions"
        ]
      },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1665426350.264468,
      "supported_languages": null
    },
    "macro.dbt_external_tables.spark__recover_partitions": {
      "unique_id": "macro.dbt_external_tables.spark__recover_partitions",
      "package_name": "dbt_external_tables",
      "root_path": "/Users/sung/Desktop/dbt/dbt_env/dbt_packages/dbt_external_tables",
      "path": "macros/plugins/spark/helpers/recover_partitions.sql",
      "original_file_path": "macros/plugins/spark/helpers/recover_partitions.sql",
      "name": "spark__recover_partitions",
      "macro_sql": "{% macro spark__recover_partitions(source_node) %}\n    {# https://docs.databricks.com/sql/language-manual/sql-ref-syntax-ddl-alter-table.html #}\n\n    {% set ddl %}\n    {%- if source_node.external.partitions and source_node.external.using and source_node.external.using|lower != 'delta' -%}\n        ALTER TABLE {{ source(source_node.source_name, source_node.name) }} RECOVER PARTITIONS\n    {%- endif -%}\n    {% endset %}\n\n    {{return(ddl)}}\n\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": { "macros": [] },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1665426350.2661178,
      "supported_languages": null
    },
    "macro.dbt_external_tables.spark__dropif": {
      "unique_id": "macro.dbt_external_tables.spark__dropif",
      "package_name": "dbt_external_tables",
      "root_path": "/Users/sung/Desktop/dbt/dbt_env/dbt_packages/dbt_external_tables",
      "path": "macros/plugins/spark/helpers/dropif.sql",
      "original_file_path": "macros/plugins/spark/helpers/dropif.sql",
      "name": "spark__dropif",
      "macro_sql": "{% macro spark__dropif(node) %}\n    \n    {% set ddl %}\n        drop table if exists {{source(node.source_name, node.name)}}\n    {% endset %}\n    \n    {{return(ddl)}}\n\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": { "macros": [] },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1665426350.2671812,
      "supported_languages": null
    },
    "macro.dbt_external_tables.create_external_table": {
      "unique_id": "macro.dbt_external_tables.create_external_table",
      "package_name": "dbt_external_tables",
      "root_path": "/Users/sung/Desktop/dbt/dbt_env/dbt_packages/dbt_external_tables",
      "path": "macros/common/create_external_table.sql",
      "original_file_path": "macros/common/create_external_table.sql",
      "name": "create_external_table",
      "macro_sql": "{% macro create_external_table(source_node) %}\n    {{ adapter.dispatch('create_external_table', 'dbt_external_tables')(source_node) }}\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": ["macro.dbt_external_tables.snowflake__create_external_table"]
      },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1665426350.267946,
      "supported_languages": null
    },
    "macro.dbt_external_tables.default__create_external_table": {
      "unique_id": "macro.dbt_external_tables.default__create_external_table",
      "package_name": "dbt_external_tables",
      "root_path": "/Users/sung/Desktop/dbt/dbt_env/dbt_packages/dbt_external_tables",
      "path": "macros/common/create_external_table.sql",
      "original_file_path": "macros/common/create_external_table.sql",
      "name": "default__create_external_table",
      "macro_sql": "{% macro default__create_external_table(source_node) %}\n    {{ exceptions.raise_compiler_error(\"External table creation is not implemented for the default adapter\") }}\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": { "macros": [] },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1665426350.268269,
      "supported_languages": null
    },
    "macro.dbt_external_tables.refresh_external_table": {
      "unique_id": "macro.dbt_external_tables.refresh_external_table",
      "package_name": "dbt_external_tables",
      "root_path": "/Users/sung/Desktop/dbt/dbt_env/dbt_packages/dbt_external_tables",
      "path": "macros/common/refresh_external_table.sql",
      "original_file_path": "macros/common/refresh_external_table.sql",
      "name": "refresh_external_table",
      "macro_sql": "{% macro refresh_external_table(source_node) %}\n    {{ return(adapter.dispatch('refresh_external_table', 'dbt_external_tables')(source_node)) }}\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": [
          "macro.dbt_external_tables.snowflake__refresh_external_table"
        ]
      },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1665426350.269268,
      "supported_languages": null
    },
    "macro.dbt_external_tables.default__refresh_external_table": {
      "unique_id": "macro.dbt_external_tables.default__refresh_external_table",
      "package_name": "dbt_external_tables",
      "root_path": "/Users/sung/Desktop/dbt/dbt_env/dbt_packages/dbt_external_tables",
      "path": "macros/common/refresh_external_table.sql",
      "original_file_path": "macros/common/refresh_external_table.sql",
      "name": "default__refresh_external_table",
      "macro_sql": "{% macro default__refresh_external_table(source_node) %}\n    {% do return([]) %}\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": { "macros": [] },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1665426350.2696881,
      "supported_languages": null
    },
    "macro.dbt_external_tables.get_external_build_plan": {
      "unique_id": "macro.dbt_external_tables.get_external_build_plan",
      "package_name": "dbt_external_tables",
      "root_path": "/Users/sung/Desktop/dbt/dbt_env/dbt_packages/dbt_external_tables",
      "path": "macros/common/get_external_build_plan.sql",
      "original_file_path": "macros/common/get_external_build_plan.sql",
      "name": "get_external_build_plan",
      "macro_sql": "{% macro get_external_build_plan(source_node) %}\n    {{ return(adapter.dispatch('get_external_build_plan', 'dbt_external_tables')(source_node)) }}\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": [
          "macro.dbt_external_tables.snowflake__get_external_build_plan"
        ]
      },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1665426350.270972,
      "supported_languages": null
    },
    "macro.dbt_external_tables.default__get_external_build_plan": {
      "unique_id": "macro.dbt_external_tables.default__get_external_build_plan",
      "package_name": "dbt_external_tables",
      "root_path": "/Users/sung/Desktop/dbt/dbt_env/dbt_packages/dbt_external_tables",
      "path": "macros/common/get_external_build_plan.sql",
      "original_file_path": "macros/common/get_external_build_plan.sql",
      "name": "default__get_external_build_plan",
      "macro_sql": "{% macro default__get_external_build_plan(source_node) %}\n    {{ exceptions.raise_compiler_error(\"Staging external sources is not implemented for the default adapter\") }}\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": { "macros": [] },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1665426350.2713459,
      "supported_languages": null
    },
    "macro.dbt_external_tables.stage_external_sources": {
      "unique_id": "macro.dbt_external_tables.stage_external_sources",
      "package_name": "dbt_external_tables",
      "root_path": "/Users/sung/Desktop/dbt/dbt_env/dbt_packages/dbt_external_tables",
      "path": "macros/common/stage_external_sources.sql",
      "original_file_path": "macros/common/stage_external_sources.sql",
      "name": "stage_external_sources",
      "macro_sql": "{% macro stage_external_sources(select=none) %}\n\n    {% set sources_to_stage = [] %}\n    \n    {% set source_nodes = graph.sources.values() if graph.sources else [] %}\n    \n    {% for node in source_nodes %}\n        {% if node.external %}\n            \n            {% if select %}\n            \n                {% for src in select.split(' ') %}\n                \n                    {% if '.' in src %}\n                        {% set src_s = src.split('.') %}\n                        {% if src_s[0] == node.source_name and src_s[1] == node.name %}\n                            {% do sources_to_stage.append(node) %}\n                        {% endif %}\n                    {% else %}\n                        {% if src == node.source_name %}\n                            {% do sources_to_stage.append(node) %}\n                        {% endif %}\n                    {% endif %}\n                    \n                {% endfor %}\n                        \n            {% else %}\n            \n                {% do sources_to_stage.append(node) %}\n                \n            {% endif %}\n        {% endif %}\n        \n    {% endfor %}\n    \n    {% if sources_to_stage|length == 0 %}\n        {% do log('No external sources selected', info = true) %}\n    {% endif %}\n            \n    {% for node in sources_to_stage %}\n\n        {% set loop_label = loop.index ~ ' of ' ~ loop.length %}\n\n        {% do log(loop_label ~ ' START external source ' ~ node.schema ~ '.' ~ node.identifier, info = true) -%}\n        \n        {% set run_queue = dbt_external_tables.get_external_build_plan(node) %}\n        \n        {% do log(loop_label ~ ' SKIP', info = true) if run_queue == [] %}\n        {% set width = flags.PRINTER_WIDTH %}\n        \n        {% for q in run_queue %}\n        \n            {% set q_msg = q|replace('\\n','')|replace('begin;','')|trim %}\n            {% set q_log = q_msg[:width] ~ '...  ' if q_msg|length > width else q_msg %}\n        \n            {% do log(loop_label ~ ' (' ~ loop.index ~ ') ' ~ q_log, info = true) %}\n            {% set exit_txn = dbt_external_tables.exit_transaction() %}\n        \n            {% call statement('runner', fetch_result = True, auto_begin = False) %}\n                {{ exit_txn }} {{ q }}\n            {% endcall %}\n            \n            {% set runner = load_result('runner') %}\n            {% set log_msg = runner['response'] if 'response' in runner.keys() else runner['status'] %}\n            {% do log(loop_label ~ ' (' ~ loop.index ~ ') ' ~ log_msg, info = true) %}\n            \n        {% endfor %}\n        \n    {% endfor %}\n    \n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": [
          "macro.dbt_external_tables.get_external_build_plan",
          "macro.dbt_external_tables.exit_transaction",
          "macro.dbt.statement"
        ]
      },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1665426350.284126,
      "supported_languages": null
    },
    "macro.dbt_external_tables.dropif": {
      "unique_id": "macro.dbt_external_tables.dropif",
      "package_name": "dbt_external_tables",
      "root_path": "/Users/sung/Desktop/dbt/dbt_env/dbt_packages/dbt_external_tables",
      "path": "macros/common/helpers/dropif.sql",
      "original_file_path": "macros/common/helpers/dropif.sql",
      "name": "dropif",
      "macro_sql": "{% macro dropif(node) %}\n    {{ adapter.dispatch('dropif', 'dbt_external_tables')(node) }}\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": { "macros": ["macro.dbt_external_tables.default__dropif"] },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1665426350.285084,
      "supported_languages": null
    },
    "macro.dbt_external_tables.default__dropif": {
      "unique_id": "macro.dbt_external_tables.default__dropif",
      "package_name": "dbt_external_tables",
      "root_path": "/Users/sung/Desktop/dbt/dbt_env/dbt_packages/dbt_external_tables",
      "path": "macros/common/helpers/dropif.sql",
      "original_file_path": "macros/common/helpers/dropif.sql",
      "name": "default__dropif",
      "macro_sql": "{% macro default__dropif() %}\n    {{ exceptions.raise_compiler_error(\n        \"Dropping external tables is not implemented for the default adapter\"\n    ) }}\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": { "macros": [] },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1665426350.285402,
      "supported_languages": null
    },
    "macro.dbt_external_tables.exit_transaction": {
      "unique_id": "macro.dbt_external_tables.exit_transaction",
      "package_name": "dbt_external_tables",
      "root_path": "/Users/sung/Desktop/dbt/dbt_env/dbt_packages/dbt_external_tables",
      "path": "macros/common/helpers/transaction.sql",
      "original_file_path": "macros/common/helpers/transaction.sql",
      "name": "exit_transaction",
      "macro_sql": "{% macro exit_transaction() %}\n    {{ return(adapter.dispatch('exit_transaction', 'dbt_external_tables')()) }}\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": ["macro.dbt_external_tables.default__exit_transaction"]
      },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1665426350.286127,
      "supported_languages": null
    },
    "macro.dbt_external_tables.default__exit_transaction": {
      "unique_id": "macro.dbt_external_tables.default__exit_transaction",
      "package_name": "dbt_external_tables",
      "root_path": "/Users/sung/Desktop/dbt/dbt_env/dbt_packages/dbt_external_tables",
      "path": "macros/common/helpers/transaction.sql",
      "original_file_path": "macros/common/helpers/transaction.sql",
      "name": "default__exit_transaction",
      "macro_sql": "{% macro default__exit_transaction() %}\n    {{ return('') }}\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": { "macros": [] },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1665426350.2864032,
      "supported_languages": null
    },
    "macro.dbt_artifacts.upload_dbt_artifacts": {
      "unique_id": "macro.dbt_artifacts.upload_dbt_artifacts",
      "package_name": "dbt_artifacts",
      "root_path": "/Users/sung/Desktop/dbt/dbt_env/dbt_packages/dbt_artifacts",
      "path": "macros/upload_artifacts.sql",
      "original_file_path": "macros/upload_artifacts.sql",
      "name": "upload_dbt_artifacts",
      "macro_sql": "{% macro upload_dbt_artifacts(filenames) %}\n\n{% set src_dbt_artifacts = source('dbt_artifacts', 'artifacts') %}\n\n{% set remove_query %}\n    remove @{{ src_dbt_artifacts }} pattern='.*.json.gz';\n{% endset %}\n\n{% do log(\"Clearing existing files from Stage: \" ~ remove_query, info=True) %}\n{% do run_query(remove_query) %}\n\n{% for filename in filenames %}\n\n    {% set file = filename ~ '.json' %}\n\n    {% set put_query %}\n        put file://target/{{ file }} @{{ src_dbt_artifacts }} auto_compress=true;\n    {% endset %}\n\n    {% do log(\"Uploading \" ~ file ~ \" to Stage: \" ~ put_query, info=True) %}\n    {% do run_query(put_query) %}\n\n    {% set copy_query %}\n        begin;\n        copy into {{ src_dbt_artifacts }} from\n            (\n                select\n                $1 as data,\n                $1:metadata:generated_at::timestamp_ntz as generated_at,\n                metadata$filename as path,\n                regexp_substr(metadata$filename, '([a-z_]+.json)') as artifact_type\n                from  @{{ src_dbt_artifacts }}\n            )\n            file_format=(type='JSON')\n            on_error='skip_file';\n        commit;\n    {% endset %}\n\n    {% do log(\"Copying \" ~ file ~ \" from Stage: \" ~ copy_query, info=True) %}\n    {% do run_query(copy_query) %}\n\n{% endfor %}\n\n{% do log(\"Clearing new files from Stage: \" ~ remove_query, info=True) %}\n{% do run_query(remove_query) %}\n\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": { "macros": ["macro.dbt.run_query"] },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1665426350.29026,
      "supported_languages": null
    },
    "macro.dbt_artifacts.create_artifact_resources": {
      "unique_id": "macro.dbt_artifacts.create_artifact_resources",
      "package_name": "dbt_artifacts",
      "root_path": "/Users/sung/Desktop/dbt/dbt_env/dbt_packages/dbt_artifacts",
      "path": "macros/create_artifact_resources.sql",
      "original_file_path": "macros/create_artifact_resources.sql",
      "name": "create_artifact_resources",
      "macro_sql": "{% macro create_artifact_resources() %}\n\n{% set src_dbt_artifacts = source('dbt_artifacts', 'artifacts') %}\n\n{{ create_schema( src_dbt_artifacts ) }}\n\n{% set create_stage_query %}\ncreate stage if not exists {{ src_dbt_artifacts }}\nfile_format = ( type =  json );\n{% endset %}\n\n{% set create_table_query %}\ncreate table if not exists {{ src_dbt_artifacts }} (\n    data variant,\n    generated_at timestamp,\n    path string,\n    artifact_type string\n);\n\n{% endset %}\n\n\n{% do log(\"Creating Stage: \" ~ create_stage_query, info=True) %}\n{% do run_query(create_stage_query) %}\n\n{% do log(\"Creating Table: \" ~ create_table_query, info=True) %}\n{% do run_query(create_table_query) %}\n\n{% endmacro %}",
      "resource_type": "macro",
      "tags": [],
      "depends_on": {
        "macros": ["macro.dbt.create_schema", "macro.dbt.run_query"]
      },
      "description": "",
      "meta": {},
      "docs": { "show": true, "node_color": null },
      "patch_path": null,
      "arguments": [],
      "created_at": 1665426350.292602,
      "supported_languages": null
    }
  },
  "docs": {
    "tpch.__dbt_utils__": {
      "unique_id": "tpch.__dbt_utils__",
      "package_name": "tpch",
      "root_path": "/Users/sung/Desktop/dbt/dbt_env",
      "path": "overview.md",
      "original_file_path": "models/overview.md",
      "name": "__dbt_utils__",
      "block_contents": "# Utility macros\nThis package is maintained by dbt Labs.\n\nOur dbt project heavily uses this suite of utility macros, especially:\n- `surrogate_key`\n- `test_equality`\n- `pivot`\n\nfor more info, please check [dbt_utils](https://hub.getdbt.com/dbt-labs/dbt_utils/latest/)"
    },
    "tpch.__codegen__": {
      "unique_id": "tpch.__codegen__",
      "package_name": "tpch",
      "root_path": "/Users/sung/Desktop/dbt/dbt_env",
      "path": "overview.md",
      "original_file_path": "models/overview.md",
      "name": "__codegen__",
      "block_contents": "# codegen\nThis package is maintained by dbt Labs.\n\nIt provides macros that are especially helpful in creating yml files and base models quickly.\n\nfor more info, please check [codgen](https://hub.getdbt.com/dbt-labs/codegen/latest/)"
    },
    "tpch.__snowflake_spend__": {
      "unique_id": "tpch.__snowflake_spend__",
      "package_name": "tpch",
      "root_path": "/Users/sung/Desktop/dbt/dbt_env",
      "path": "overview.md",
      "original_file_path": "models/overview.md",
      "name": "__snowflake_spend__",
      "block_contents": "# snowflake_spend\nThis package is provided by the community -- created by gitlabhq. \n\nThe intent of this package is to understand the cost your Snowflake Data Warehouse is accruing\n\nfor more info, please check [snowflake_spend](https://hub.getdbt.com/gitlabhq/snowflake_spend/latest/)"
    },
    "tpch.__dbt_external_tables__": {
      "unique_id": "tpch.__dbt_external_tables__",
      "package_name": "tpch",
      "root_path": "/Users/sung/Desktop/dbt/dbt_env",
      "path": "overview.md",
      "original_file_path": "models/overview.md",
      "name": "__dbt_external_tables__",
      "block_contents": "# dbt_external_tables\nThis package is maintained by dbt Labs.\n\nIt provides macros to create/replace external tables and refresh their partitions, using the metadata provided in your .yml file source definitions\n\nfor more info, please check [dbt_external_tables](https://hub.getdbt.com/dbt-labs/dbt_external_tables/latest/)"
    },
    "tpch.order_item_key": {
      "unique_id": "tpch.order_item_key",
      "package_name": "tpch",
      "root_path": "/Users/sung/Desktop/dbt/dbt_env",
      "path": "staging/tpch/stg_tpch.md",
      "original_file_path": "models/staging/tpch/stg_tpch.md",
      "name": "order_item_key",
      "block_contents": "surrogate key for the model -- combo of order_key + line_number"
    },
    "tpch.line_number": {
      "unique_id": "tpch.line_number",
      "package_name": "tpch",
      "root_path": "/Users/sung/Desktop/dbt/dbt_env",
      "path": "staging/tpch/stg_tpch.md",
      "original_file_path": "models/staging/tpch/stg_tpch.md",
      "name": "line_number",
      "block_contents": "sequence of the order items within the order"
    },
    "tpch.return_flag": {
      "unique_id": "tpch.return_flag",
      "package_name": "tpch",
      "root_path": "/Users/sung/Desktop/dbt/dbt_env",
      "path": "staging/tpch/stg_tpch.md",
      "original_file_path": "models/staging/tpch/stg_tpch.md",
      "name": "return_flag",
      "block_contents": "letter determining the status of the return"
    },
    "tpch.ship_date": {
      "unique_id": "tpch.ship_date",
      "package_name": "tpch",
      "root_path": "/Users/sung/Desktop/dbt/dbt_env",
      "path": "staging/tpch/stg_tpch.md",
      "original_file_path": "models/staging/tpch/stg_tpch.md",
      "name": "ship_date",
      "block_contents": "the date the order item is being shipped"
    },
    "tpch.commit_date": {
      "unique_id": "tpch.commit_date",
      "package_name": "tpch",
      "root_path": "/Users/sung/Desktop/dbt/dbt_env",
      "path": "staging/tpch/stg_tpch.md",
      "original_file_path": "models/staging/tpch/stg_tpch.md",
      "name": "commit_date",
      "block_contents": "the date the order item is being commited"
    },
    "tpch.receipt_date": {
      "unique_id": "tpch.receipt_date",
      "package_name": "tpch",
      "root_path": "/Users/sung/Desktop/dbt/dbt_env",
      "path": "staging/tpch/stg_tpch.md",
      "original_file_path": "models/staging/tpch/stg_tpch.md",
      "name": "receipt_date",
      "block_contents": "the receipt date of the order item"
    },
    "tpch.ship_mode": {
      "unique_id": "tpch.ship_mode",
      "package_name": "tpch",
      "root_path": "/Users/sung/Desktop/dbt/dbt_env",
      "path": "staging/tpch/stg_tpch.md",
      "original_file_path": "models/staging/tpch/stg_tpch.md",
      "name": "ship_mode",
      "block_contents": "method of shipping"
    },
    "tpch.comment": {
      "unique_id": "tpch.comment",
      "package_name": "tpch",
      "root_path": "/Users/sung/Desktop/dbt/dbt_env",
      "path": "staging/tpch/stg_tpch.md",
      "original_file_path": "models/staging/tpch/stg_tpch.md",
      "name": "comment",
      "block_contents": "additional commentary"
    },
    "tpch.extended_price": {
      "unique_id": "tpch.extended_price",
      "package_name": "tpch",
      "root_path": "/Users/sung/Desktop/dbt/dbt_env",
      "path": "staging/tpch/stg_tpch.md",
      "original_file_path": "models/staging/tpch/stg_tpch.md",
      "name": "extended_price",
      "block_contents": "line item price"
    },
    "tpch.discount_percentage": {
      "unique_id": "tpch.discount_percentage",
      "package_name": "tpch",
      "root_path": "/Users/sung/Desktop/dbt/dbt_env",
      "path": "staging/tpch/stg_tpch.md",
      "original_file_path": "models/staging/tpch/stg_tpch.md",
      "name": "discount_percentage",
      "block_contents": "percentage of the discount"
    },
    "tpch.supplier_name": {
      "unique_id": "tpch.supplier_name",
      "package_name": "tpch",
      "root_path": "/Users/sung/Desktop/dbt/dbt_env",
      "path": "staging/tpch/stg_tpch.md",
      "original_file_path": "models/staging/tpch/stg_tpch.md",
      "name": "supplier_name",
      "block_contents": "id of the supplier"
    },
    "tpch.supplier_address": {
      "unique_id": "tpch.supplier_address",
      "package_name": "tpch",
      "root_path": "/Users/sung/Desktop/dbt/dbt_env",
      "path": "staging/tpch/stg_tpch.md",
      "original_file_path": "models/staging/tpch/stg_tpch.md",
      "name": "supplier_address",
      "block_contents": "address of the supplier"
    },
    "tpch.phone_number": {
      "unique_id": "tpch.phone_number",
      "package_name": "tpch",
      "root_path": "/Users/sung/Desktop/dbt/dbt_env",
      "path": "staging/tpch/stg_tpch.md",
      "original_file_path": "models/staging/tpch/stg_tpch.md",
      "name": "phone_number",
      "block_contents": "phone number of the supplier"
    },
    "tpch.account_balance": {
      "unique_id": "tpch.account_balance",
      "package_name": "tpch",
      "root_path": "/Users/sung/Desktop/dbt/dbt_env",
      "path": "staging/tpch/stg_tpch.md",
      "original_file_path": "models/staging/tpch/stg_tpch.md",
      "name": "account_balance",
      "block_contents": "raw account balance"
    },
    "tpch.retail_price": {
      "unique_id": "tpch.retail_price",
      "package_name": "tpch",
      "root_path": "/Users/sung/Desktop/dbt/dbt_env",
      "path": "staging/tpch/stg_tpch.md",
      "original_file_path": "models/staging/tpch/stg_tpch.md",
      "name": "retail_price",
      "block_contents": "raw retail price"
    },
    "tpch.available_quantity": {
      "unique_id": "tpch.available_quantity",
      "package_name": "tpch",
      "root_path": "/Users/sung/Desktop/dbt/dbt_env",
      "path": "staging/tpch/stg_tpch.md",
      "original_file_path": "models/staging/tpch/stg_tpch.md",
      "name": "available_quantity",
      "block_contents": "raw available quantity"
    },
    "tpch.cost": {
      "unique_id": "tpch.cost",
      "package_name": "tpch",
      "root_path": "/Users/sung/Desktop/dbt/dbt_env",
      "path": "staging/tpch/stg_tpch.md",
      "original_file_path": "models/staging/tpch/stg_tpch.md",
      "name": "cost",
      "block_contents": "raw cost"
    },
    "tpch.base_price": {
      "unique_id": "tpch.base_price",
      "package_name": "tpch",
      "root_path": "/Users/sung/Desktop/dbt/dbt_env",
      "path": "marts/intermediate/intermediate.md",
      "original_file_path": "models/marts/intermediate/intermediate.md",
      "name": "base_price",
      "block_contents": "since extended_price is the line item total, we back out the price per item"
    },
    "tpch.discounted_price": {
      "unique_id": "tpch.discounted_price",
      "package_name": "tpch",
      "root_path": "/Users/sung/Desktop/dbt/dbt_env",
      "path": "marts/intermediate/intermediate.md",
      "original_file_path": "models/marts/intermediate/intermediate.md",
      "name": "discounted_price",
      "block_contents": "factoring in the discount_percentage, the line item discount total"
    },
    "tpch.tax_rate": {
      "unique_id": "tpch.tax_rate",
      "package_name": "tpch",
      "root_path": "/Users/sung/Desktop/dbt/dbt_env",
      "path": "marts/intermediate/intermediate.md",
      "original_file_path": "models/marts/intermediate/intermediate.md",
      "name": "tax_rate",
      "block_contents": "tax rate of the order item"
    },
    "tpch.gross_item_sales_amount": {
      "unique_id": "tpch.gross_item_sales_amount",
      "package_name": "tpch",
      "root_path": "/Users/sung/Desktop/dbt/dbt_env",
      "path": "marts/intermediate/intermediate.md",
      "original_file_path": "models/marts/intermediate/intermediate.md",
      "name": "gross_item_sales_amount",
      "block_contents": "same as extended_price"
    },
    "tpch.discounted_item_sales_amount": {
      "unique_id": "tpch.discounted_item_sales_amount",
      "package_name": "tpch",
      "root_path": "/Users/sung/Desktop/dbt/dbt_env",
      "path": "marts/intermediate/intermediate.md",
      "original_file_path": "models/marts/intermediate/intermediate.md",
      "name": "discounted_item_sales_amount",
      "block_contents": "line item (includes quantity) discount amount"
    },
    "tpch.item_discount_amount": {
      "unique_id": "tpch.item_discount_amount",
      "package_name": "tpch",
      "root_path": "/Users/sung/Desktop/dbt/dbt_env",
      "path": "marts/intermediate/intermediate.md",
      "original_file_path": "models/marts/intermediate/intermediate.md",
      "name": "item_discount_amount",
      "block_contents": "item level discount amount. this is always a negative number"
    },
    "tpch.item_tax_amount": {
      "unique_id": "tpch.item_tax_amount",
      "package_name": "tpch",
      "root_path": "/Users/sung/Desktop/dbt/dbt_env",
      "path": "marts/intermediate/intermediate.md",
      "original_file_path": "models/marts/intermediate/intermediate.md",
      "name": "item_tax_amount",
      "block_contents": "item level tax total"
    },
    "tpch.net_item_sales_amount": {
      "unique_id": "tpch.net_item_sales_amount",
      "package_name": "tpch",
      "root_path": "/Users/sung/Desktop/dbt/dbt_env",
      "path": "marts/intermediate/intermediate.md",
      "original_file_path": "models/marts/intermediate/intermediate.md",
      "name": "net_item_sales_amount",
      "block_contents": "the net total which factors in discount and tax"
    },
    "dbt.__overview__": {
      "unique_id": "dbt.__overview__",
      "package_name": "dbt",
      "root_path": "/Users/sung/Desktop/dbt/core/dbt/include/global_project",
      "path": "overview.md",
      "original_file_path": "docs/overview.md",
      "name": "__overview__",
      "block_contents": "### Welcome!\n\nWelcome to the auto-generated documentation for your dbt project!\n\n### Navigation\n\nYou can use the `Project` and `Database` navigation tabs on the left side of the window to explore the models\nin your project.\n\n#### Project Tab\nThe `Project` tab mirrors the directory structure of your dbt project. In this tab, you can see all of the\nmodels defined in your dbt project, as well as models imported from dbt packages.\n\n#### Database Tab\nThe `Database` tab also exposes your models, but in a format that looks more like a database explorer. This view\nshows relations (tables and views) grouped into database schemas. Note that ephemeral models are _not_ shown\nin this interface, as they do not exist in the database.\n\n### Graph Exploration\nYou can click the blue icon on the bottom-right corner of the page to view the lineage graph of your models.\n\nOn model pages, you'll see the immediate parents and children of the model you're exploring. By clicking the `Expand`\nbutton at the top-right of this lineage pane, you'll be able to see all of the models that are used to build,\nor are built from, the model you're exploring.\n\nOnce expanded, you'll be able to use the `--select` and `--exclude` model selection syntax to filter the\nmodels in the graph. For more information on model selection, check out the [dbt docs](https://docs.getdbt.com/docs/model-selection-syntax).\n\nNote that you can also right-click on models to interactively filter and explore the graph.\n\n---\n\n### More information\n\n- [What is dbt](https://docs.getdbt.com/docs/introduction)?\n- Read the [dbt viewpoint](https://docs.getdbt.com/docs/viewpoint)\n- [Installation](https://docs.getdbt.com/docs/installation)\n- Join the [dbt Community](https://www.getdbt.com/community/) for questions and discussion"
    }
  },
  "exposures": {
    "exposure.tpch.yearly_part_rollup": {
      "fqn": ["tpch", "marts", "aggregates", "yearly_part_rollup"],
      "unique_id": "exposure.tpch.yearly_part_rollup",
      "package_name": "tpch",
      "root_path": "/Users/sung/Desktop/dbt/dbt_env",
      "path": "marts/aggregates/exposures.yml",
      "original_file_path": "models/marts/aggregates/exposures.yml",
      "name": "yearly_part_rollup",
      "type": "dashboard",
      "owner": { "email": "dbtuserbob@getdbt.com", "name": "DBT User Bob" },
      "resource_type": "exposure",
      "description": "# An h1 header\n============\n\nParagraphs are separated by a blank line.\n\n2nd paragraph. *Italic*, **bold**, and `monospace`\nItemized lists look like:\n  * this one\n  * that one\n  * the other one\n",
      "label": null,
      "maturity": "high",
      "meta": {},
      "tags": [],
      "config": { "enabled": true },
      "unrendered_config": {},
      "url": "https://example.com",
      "depends_on": {
        "macros": [],
        "nodes": ["model.tpch.agg_ship_modes_dynamic_pivot"]
      },
      "refs": [["agg_ship_modes_dynamic_pivot"]],
      "sources": [],
      "created_at": 1665426351.6783512
    }
  },
  "metrics": {},
  "selectors": {},
  "disabled": {},
  "parent_map": {
    "model.tpch.stg_tpch_orders": ["source.tpch.tpch_test.orders"],
    "model.tpch.stg_tpch_part_suppliers": ["source.tpch.tpch_test.partsupp"],
    "model.tpch.stg_tpch_suppliers": ["source.tpch.tpch_test.supplier"],
    "model.tpch.stg_tpch_regions": ["source.tpch.tpch_test.region"],
    "model.tpch.stg_tpch_customers": ["source.tpch.tpch_test.customer"],
    "model.tpch.stg_tpch_nations": ["source.tpch.tpch_test.nation"],
    "model.tpch.stg_tpch_line_items": ["source.tpch.tpch_test.lineitem"],
    "model.tpch.stg_tpch_parts": ["source.tpch.tpch_test.part"],
    "model.tpch.dim_suppliers": [
      "model.tpch.stg_tpch_nations",
      "model.tpch.stg_tpch_regions",
      "model.tpch.stg_tpch_suppliers"
    ],
    "model.tpch.dim_parts": ["model.tpch.stg_tpch_parts"],
    "model.tpch.dim_customers": [
      "model.tpch.stg_tpch_customers",
      "model.tpch.stg_tpch_nations",
      "model.tpch.stg_tpch_regions"
    ],
    "model.tpch.fct_order_items": [
      "model.tpch.order_items",
      "model.tpch.part_suppliers"
    ],
    "model.tpch.fct_orders": [
      "model.tpch.order_items",
      "model.tpch.stg_tpch_orders"
    ],
    "model.tpch.test_model_v2": ["model.tpch.dim_suppliers"],
    "model.tpch.agg_ship_modes_hardcoded_pivot": ["model.tpch.fct_order_items"],
    "model.tpch.agg_ship_modes_dynamic_pivot": ["model.tpch.fct_order_items"],
    "model.tpch.part_suppliers": [
      "model.tpch.stg_tpch_part_suppliers",
      "model.tpch.stg_tpch_parts",
      "model.tpch.stg_tpch_suppliers"
    ],
    "model.tpch.order_items": [
      "model.tpch.stg_tpch_line_items",
      "model.tpch.stg_tpch_orders"
    ],
    "model.tpch.all_days": [],
    "model.tpch.get_area_of_circle": [],
    "model.tpch.use_variables": [
      "model.tpch.fct_order_items",
      "model.tpch.fct_order_items"
    ],
    "model.tpch.my_first_model": [],
    "model.tpch.my_second_model": ["model.tpch.my_first_model"],
    "model.tpch.json_parse_example": ["seed.tpch.json_example"],
    "model.tpch.materialization_incremental": [
      "source.tpch.tpch_test.customer"
    ],
    "analysis.tpch.select_from_orders_example": ["model.tpch.fct_orders"],
    "test.tpch.macro_stg_tpch_orders_assert_pos_price": [
      "model.tpch.stg_tpch_orders"
    ],
    "test.tpch.stg_tpch_orders_assert_positive_price": [
      "model.tpch.stg_tpch_orders"
    ],
    "test.tpch.macro_stg_tphc_suppliers_assert_pos_acct_bal": [
      "model.tpch.stg_tpch_suppliers"
    ],
    "seed.tpch.json_example": [],
    "seed.tpch.snowflake_contract_rates": [],
    "operation.tpch.tpch-on-run-start-0": [],
    "operation.tpch.tpch-on-run-start-1": [],
    "operation.tpch.tpch-on-run-end-0": [],
    "operation.tpch.tpch-on-run-end-1": [],
    "model.dbt_artifacts.fct_dbt__latest_full_model_executions": [
      "model.dbt_artifacts.fct_dbt__model_executions",
      "model.dbt_artifacts.fct_dbt__run_results"
    ],
    "model.dbt_artifacts.fct_dbt__exposures_updates": [
      "model.dbt_artifacts.dim_dbt__exposures",
      "model.dbt_artifacts.fct_dbt__model_executions"
    ],
    "model.dbt_artifacts.fct_dbt__critical_path": [
      "model.dbt_artifacts.fct_dbt__latest_full_model_executions",
      "model.dbt_artifacts.stg_dbt__models"
    ],
    "model.dbt_artifacts.stg_dbt__models": [
      "model.dbt_artifacts.stg_dbt__artifacts"
    ],
    "model.dbt_artifacts.stg_dbt__run_results_env_keys": [
      "model.dbt_artifacts.stg_dbt__artifacts"
    ],
    "model.dbt_artifacts.stg_dbt__exposures": [
      "model.dbt_artifacts.stg_dbt__artifacts"
    ],
    "model.dbt_artifacts.stg_dbt__test_executions": [
      "model.dbt_artifacts.stg_dbt__artifacts"
    ],
    "model.dbt_artifacts.stg_dbt__sources": [
      "model.dbt_artifacts.stg_dbt__artifacts"
    ],
    "model.dbt_artifacts.stg_dbt__artifacts": [
      "source.dbt_artifacts.dbt_artifacts.artifacts"
    ],
    "model.dbt_artifacts.stg_dbt__model_executions": [
      "model.dbt_artifacts.stg_dbt__artifacts"
    ],
    "model.dbt_artifacts.stg_dbt__run_results": [
      "model.dbt_artifacts.stg_dbt__artifacts"
    ],
    "model.dbt_artifacts.int_dbt__model_executions": [
      "model.dbt_artifacts.stg_dbt__model_executions"
    ],
    "model.dbt_artifacts.fct_dbt__test_executions": [
      "model.dbt_artifacts.stg_dbt__test_executions"
    ],
    "model.dbt_artifacts.fct_dbt__model_executions": [
      "model.dbt_artifacts.dim_dbt__models",
      "model.dbt_artifacts.int_dbt__model_executions"
    ],
    "model.dbt_artifacts.dim_dbt__sources": [
      "model.dbt_artifacts.stg_dbt__sources"
    ],
    "model.dbt_artifacts.dim_dbt__exposures": [
      "model.dbt_artifacts.stg_dbt__exposures"
    ],
    "model.dbt_artifacts.dim_dbt__models": [
      "model.dbt_artifacts.stg_dbt__models"
    ],
    "model.dbt_artifacts.fct_dbt__run_results": [
      "model.dbt_artifacts.stg_dbt__run_results",
      "model.dbt_artifacts.stg_dbt__run_results_env_keys"
    ],
    "test.tpch.unique_stg_tpch_customers_customer_key.7f1a18b1a4": [
      "model.tpch.stg_tpch_customers"
    ],
    "test.tpch.not_null_stg_tpch_customers_customer_key.a10e15535a": [
      "model.tpch.stg_tpch_customers"
    ],
    "test.tpch.unique_stg_tpch_line_items_order_item_key.c819d91e0a": [
      "model.tpch.stg_tpch_line_items"
    ],
    "test.tpch.not_null_stg_tpch_line_items_order_item_key.cd47c7a679": [
      "model.tpch.stg_tpch_line_items"
    ],
    "test.tpch.unique_stg_tpch_nations_nation_key.9e3675553d": [
      "model.tpch.stg_tpch_nations"
    ],
    "test.tpch.not_null_stg_tpch_nations_nation_key.d0c2fe32ed": [
      "model.tpch.stg_tpch_nations"
    ],
    "test.tpch.unique_stg_tpch_orders_order_key.bd29f13cc9": [
      "model.tpch.stg_tpch_orders"
    ],
    "test.tpch.not_null_stg_tpch_orders_order_key.bb22e75ae8": [
      "model.tpch.stg_tpch_orders"
    ],
    "test.tpch.unique_stg_tpch_part_suppliers_part_supplier_key.96ab01c1ae": [
      "model.tpch.stg_tpch_part_suppliers"
    ],
    "test.tpch.not_null_stg_tpch_part_suppliers_part_supplier_key.3cc6ccee2e": [
      "model.tpch.stg_tpch_part_suppliers"
    ],
    "test.tpch.unique_stg_tpch_parts_part_key.afbc7ad489": [
      "model.tpch.stg_tpch_parts"
    ],
    "test.tpch.not_null_stg_tpch_parts_part_key.cc8e610420": [
      "model.tpch.stg_tpch_parts"
    ],
    "test.tpch.unique_stg_tpch_regions_region_key.b2bd891bb5": [
      "model.tpch.stg_tpch_regions"
    ],
    "test.tpch.not_null_stg_tpch_regions_region_key.869fa0b326": [
      "model.tpch.stg_tpch_regions"
    ],
    "test.tpch.unique_stg_tpch_suppliers_supplier_key.6215308464": [
      "model.tpch.stg_tpch_suppliers"
    ],
    "test.tpch.not_null_stg_tpch_suppliers_supplier_key.97c31a786d": [
      "model.tpch.stg_tpch_suppliers"
    ],
    "test.tpch.unique_dim_customers_customer_key.ad8156656e": [
      "model.tpch.dim_customers"
    ],
    "test.tpch.not_null_dim_customers_customer_key.4bebfb3411": [
      "model.tpch.dim_customers"
    ],
    "test.tpch.accepted_values_dim_customers_region__AFRICA__MIDDLE_EAST__ASIA__EUROPE__AMERICA.dad4601b69": [
      "model.tpch.dim_customers"
    ],
    "test.tpch.unique_dim_customers_market_segment.eb7a5b1954": [
      "model.tpch.dim_customers"
    ],
    "test.tpch.not_null_dim_customers_market_segment.5800ff84dd": [
      "model.tpch.dim_customers"
    ],
    "test.tpch.unique_dim_parts_part_key.712df18d58": ["model.tpch.dim_parts"],
    "test.tpch.not_null_dim_parts_part_key.4358f880d9": [
      "model.tpch.dim_parts"
    ],
    "test.tpch.unique_dim_suppliers_supplier_key.58fc3e4770": [
      "model.tpch.dim_suppliers"
    ],
    "test.tpch.not_null_dim_suppliers_supplier_key.4315350956": [
      "model.tpch.dim_suppliers"
    ],
    "test.tpch.unique_fct_order_items_order_item_key.4d6426a255": [
      "model.tpch.fct_order_items"
    ],
    "test.tpch.not_null_fct_order_items_order_item_key.47516a6371": [
      "model.tpch.fct_order_items"
    ],
    "test.tpch.unique_fct_orders_order_key.f5e7a90273": [
      "model.tpch.fct_orders"
    ],
    "test.tpch.not_null_fct_orders_order_key.6a6f83ab15": [
      "model.tpch.fct_orders"
    ],
    "test.tpch.relationships_fct_orders_customer_key__customer_key__ref_dim_customers_.018eb0a60b": [
      "model.tpch.dim_customers",
      "model.tpch.fct_orders"
    ],
    "test.tpch.unique_order_items_order_item_key.43a40b2837": [
      "model.tpch.order_items"
    ],
    "test.tpch.not_null_order_items_order_item_key.44b9fa7311": [
      "model.tpch.order_items"
    ],
    "test.tpch.unique_part_suppliers_part_supplier_key.909477afa8": [
      "model.tpch.part_suppliers"
    ],
    "test.tpch.not_null_part_suppliers_part_supplier_key.b8b2022ed3": [
      "model.tpch.part_suppliers"
    ],
    "test.tpch.unique_materialization_incremental_customer_key.325783f327": [
      "model.tpch.materialization_incremental"
    ],
    "test.tpch.not_null_materialization_incremental_customer_key.e2b95d8009": [
      "model.tpch.materialization_incremental"
    ],
    "test.tpch.unique_use_variables_order_item_key.fb5576fe0e": [
      "model.tpch.use_variables"
    ],
    "test.tpch.not_null_use_variables_order_item_key.c2bd602686": [
      "model.tpch.use_variables"
    ],
    "test.dbt_artifacts.unique_fct_dbt__critical_path_node_id.a430b9cf10": [
      "model.dbt_artifacts.fct_dbt__critical_path"
    ],
    "test.dbt_artifacts.not_null_fct_dbt__critical_path_node_id.8a76d88496": [
      "model.dbt_artifacts.fct_dbt__critical_path"
    ],
    "test.dbt_artifacts.unique_fct_dbt__latest_full_model_executions_node_id.b6f2773b6c": [
      "model.dbt_artifacts.fct_dbt__latest_full_model_executions"
    ],
    "test.dbt_artifacts.not_null_fct_dbt__latest_full_model_executions_node_id.75b07a2f66": [
      "model.dbt_artifacts.fct_dbt__latest_full_model_executions"
    ],
    "test.dbt_artifacts.unique_fct_dbt__model_executions_model_execution_id.ab9f314f59": [
      "model.dbt_artifacts.fct_dbt__model_executions"
    ],
    "test.dbt_artifacts.not_null_fct_dbt__model_executions_model_execution_id.ecb7ddbb69": [
      "model.dbt_artifacts.fct_dbt__model_executions"
    ],
    "test.dbt_artifacts.unique_fct_dbt__run_results_command_invocation_id.08941b96a3": [
      "model.dbt_artifacts.fct_dbt__run_results"
    ],
    "test.dbt_artifacts.not_null_fct_dbt__run_results_command_invocation_id.11abc48935": [
      "model.dbt_artifacts.fct_dbt__run_results"
    ],
    "test.dbt_artifacts.not_null_dim_dbt__exposures_manifest_model_id.1cfdaa0c94": [
      "model.dbt_artifacts.dim_dbt__exposures"
    ],
    "test.dbt_artifacts.unique_dim_dbt__exposures_manifest_model_id_output_feeds.b0bf30fb44": [
      "model.dbt_artifacts.dim_dbt__exposures"
    ],
    "test.dbt_artifacts.unique_dim_dbt__models_manifest_model_id.c105319f3e": [
      "model.dbt_artifacts.dim_dbt__models"
    ],
    "test.dbt_artifacts.not_null_dim_dbt__models_manifest_model_id.df81d26c60": [
      "model.dbt_artifacts.dim_dbt__models"
    ],
    "test.dbt_artifacts.unique_dim_dbt__sources_manifest_source_id.a9a1a372ce": [
      "model.dbt_artifacts.dim_dbt__sources"
    ],
    "test.dbt_artifacts.not_null_dim_dbt__sources_manifest_source_id.34e9829000": [
      "model.dbt_artifacts.dim_dbt__sources"
    ],
    "test.tpch.source_unique_tpch_test_orders_o_orderkey.4d1934eb1c": [
      "source.tpch.tpch_test.orders"
    ],
    "test.tpch.source_not_null_tpch_test_orders_o_orderkey.d6ff547290": [
      "source.tpch.tpch_test.orders"
    ],
    "test.tpch.source_relationships_tpch_test_orders_o_custkey__c_custkey__source_tpch_customer_.5a12f1aafc": [
      "source.tpch.tpch_test.orders"
    ],
    "test.tpch.source_unique_tpch_test_customer_c_custkey.31760e8287": [
      "source.tpch.tpch_test.customer"
    ],
    "test.tpch.source_not_null_tpch_test_customer_c_custkey.9e6cb29a5b": [
      "source.tpch.tpch_test.customer"
    ],
    "test.tpch.source_relationships_tpch_test_lineitem_l_orderkey__o_orderkey__source_tpch_orders_.fbadfea2d3": [
      "source.tpch.tpch_test.lineitem"
    ],
    "test.tpch.source_relationships_tpch_test_lineitem_l_partkey__p_partkey__source_tpch_part_.256ef70c92": [
      "source.tpch.tpch_test.lineitem"
    ],
    "test.tpch.source_relationships_tpch_test_lineitem_l_suppkey__s_suppkey__source_tpch_supplier_.05dc4fdd6e": [
      "source.tpch.tpch_test.lineitem"
    ],
    "test.tpch.source_unique_tpch_test_nation_n_nationkey.22426159f9": [
      "source.tpch.tpch_test.nation"
    ],
    "test.tpch.source_not_null_tpch_test_nation_n_nationkey.2431180b9e": [
      "source.tpch.tpch_test.nation"
    ],
    "test.tpch.source_relationships_tpch_test_nation_n_regionkey__r_regionkey__source_tpch_region_.3ea25d1fcf": [
      "source.tpch.tpch_test.nation"
    ],
    "test.tpch.source_unique_tpch_test_part_p_partkey.45789f2d24": [
      "source.tpch.tpch_test.part"
    ],
    "test.tpch.source_not_null_tpch_test_part_p_partkey.c9a9cf8755": [
      "source.tpch.tpch_test.part"
    ],
    "test.tpch.source_relationships_tpch_test_partsupp_ps_partkey__p_partkey__source_tpch_part_.c1a053c227": [
      "source.tpch.tpch_test.partsupp"
    ],
    "test.tpch.source_relationships_tpch_test_partsupp_ps_suppkey__s_suppkey__source_tpch_supplier_.ebe51d8541": [
      "source.tpch.tpch_test.partsupp"
    ],
    "test.tpch.source_unique_tpch_test_region_r_regionkey.b7972dd9cb": [
      "source.tpch.tpch_test.region"
    ],
    "test.tpch.source_not_null_tpch_test_region_r_regionkey.cce2078c1d": [
      "source.tpch.tpch_test.region"
    ],
    "test.tpch.source_unique_tpch_test_supplier_s_suppkey.5d9e8c610c": [
      "source.tpch.tpch_test.supplier"
    ],
    "test.tpch.source_not_null_tpch_test_supplier_s_suppkey.91f5ca302b": [
      "source.tpch.tpch_test.supplier"
    ],
    "test.tpch.source_relationships_tpch_test_supplier_s_nationkey__n_nationkey__source_tpch_nation_.bcb9e54582": [
      "source.tpch.tpch_test.supplier"
    ],
    "source.tpch.tpch_test.orders": [],
    "source.tpch.tpch_test.customer": [],
    "source.tpch.tpch_test.lineitem": [],
    "source.tpch.tpch_test.nation": [],
    "source.tpch.tpch_test.part": [],
    "source.tpch.tpch_test.partsupp": [],
    "source.tpch.tpch_test.region": [],
    "source.tpch.tpch_test.supplier": [],
    "source.tpch.deutsche_boerse.trading_data": [],
    "source.dbt_artifacts.dbt_artifacts.artifacts": [],
    "exposure.tpch.yearly_part_rollup": [
      "model.tpch.agg_ship_modes_dynamic_pivot"
    ]
  },
  "child_map": {
    "model.tpch.stg_tpch_orders": [
      "model.tpch.fct_orders",
      "model.tpch.order_items",
      "test.tpch.macro_stg_tpch_orders_assert_pos_price",
      "test.tpch.not_null_stg_tpch_orders_order_key.bb22e75ae8",
      "test.tpch.stg_tpch_orders_assert_positive_price",
      "test.tpch.unique_stg_tpch_orders_order_key.bd29f13cc9"
    ],
    "model.tpch.stg_tpch_part_suppliers": [
      "model.tpch.part_suppliers",
      "test.tpch.not_null_stg_tpch_part_suppliers_part_supplier_key.3cc6ccee2e",
      "test.tpch.unique_stg_tpch_part_suppliers_part_supplier_key.96ab01c1ae"
    ],
    "model.tpch.stg_tpch_suppliers": [
      "model.tpch.dim_suppliers",
      "model.tpch.part_suppliers",
      "test.tpch.macro_stg_tphc_suppliers_assert_pos_acct_bal",
      "test.tpch.not_null_stg_tpch_suppliers_supplier_key.97c31a786d",
      "test.tpch.unique_stg_tpch_suppliers_supplier_key.6215308464"
    ],
    "model.tpch.stg_tpch_regions": [
      "model.tpch.dim_customers",
      "model.tpch.dim_suppliers",
      "test.tpch.not_null_stg_tpch_regions_region_key.869fa0b326",
      "test.tpch.unique_stg_tpch_regions_region_key.b2bd891bb5"
    ],
    "model.tpch.stg_tpch_customers": [
      "model.tpch.dim_customers",
      "test.tpch.not_null_stg_tpch_customers_customer_key.a10e15535a",
      "test.tpch.unique_stg_tpch_customers_customer_key.7f1a18b1a4"
    ],
    "model.tpch.stg_tpch_nations": [
      "model.tpch.dim_customers",
      "model.tpch.dim_suppliers",
      "test.tpch.not_null_stg_tpch_nations_nation_key.d0c2fe32ed",
      "test.tpch.unique_stg_tpch_nations_nation_key.9e3675553d"
    ],
    "model.tpch.stg_tpch_line_items": [
      "model.tpch.order_items",
      "test.tpch.not_null_stg_tpch_line_items_order_item_key.cd47c7a679",
      "test.tpch.unique_stg_tpch_line_items_order_item_key.c819d91e0a"
    ],
    "model.tpch.stg_tpch_parts": [
      "model.tpch.dim_parts",
      "model.tpch.part_suppliers",
      "test.tpch.not_null_stg_tpch_parts_part_key.cc8e610420",
      "test.tpch.unique_stg_tpch_parts_part_key.afbc7ad489"
    ],
    "model.tpch.dim_suppliers": [
      "model.tpch.test_model_v2",
      "test.tpch.not_null_dim_suppliers_supplier_key.4315350956",
      "test.tpch.unique_dim_suppliers_supplier_key.58fc3e4770"
    ],
    "model.tpch.dim_parts": [
      "test.tpch.not_null_dim_parts_part_key.4358f880d9",
      "test.tpch.unique_dim_parts_part_key.712df18d58"
    ],
    "model.tpch.dim_customers": [
      "test.tpch.accepted_values_dim_customers_region__AFRICA__MIDDLE_EAST__ASIA__EUROPE__AMERICA.dad4601b69",
      "test.tpch.not_null_dim_customers_customer_key.4bebfb3411",
      "test.tpch.not_null_dim_customers_market_segment.5800ff84dd",
      "test.tpch.relationships_fct_orders_customer_key__customer_key__ref_dim_customers_.018eb0a60b",
      "test.tpch.unique_dim_customers_customer_key.ad8156656e",
      "test.tpch.unique_dim_customers_market_segment.eb7a5b1954"
    ],
    "model.tpch.fct_order_items": [
      "model.tpch.agg_ship_modes_dynamic_pivot",
      "model.tpch.agg_ship_modes_hardcoded_pivot",
      "model.tpch.use_variables",
      "model.tpch.use_variables",
      "test.tpch.not_null_fct_order_items_order_item_key.47516a6371",
      "test.tpch.unique_fct_order_items_order_item_key.4d6426a255"
    ],
    "model.tpch.fct_orders": [
      "analysis.tpch.select_from_orders_example",
      "test.tpch.not_null_fct_orders_order_key.6a6f83ab15",
      "test.tpch.relationships_fct_orders_customer_key__customer_key__ref_dim_customers_.018eb0a60b",
      "test.tpch.unique_fct_orders_order_key.f5e7a90273"
    ],
    "model.tpch.test_model_v2": [],
    "model.tpch.agg_ship_modes_hardcoded_pivot": [],
    "model.tpch.agg_ship_modes_dynamic_pivot": [
      "exposure.tpch.yearly_part_rollup"
    ],
    "model.tpch.part_suppliers": [
      "model.tpch.fct_order_items",
      "test.tpch.not_null_part_suppliers_part_supplier_key.b8b2022ed3",
      "test.tpch.unique_part_suppliers_part_supplier_key.909477afa8"
    ],
    "model.tpch.order_items": [
      "model.tpch.fct_order_items",
      "model.tpch.fct_orders",
      "test.tpch.not_null_order_items_order_item_key.44b9fa7311",
      "test.tpch.unique_order_items_order_item_key.43a40b2837"
    ],
    "model.tpch.all_days": [],
    "model.tpch.get_area_of_circle": [],
    "model.tpch.use_variables": [
      "test.tpch.not_null_use_variables_order_item_key.c2bd602686",
      "test.tpch.unique_use_variables_order_item_key.fb5576fe0e"
    ],
    "model.tpch.my_first_model": ["model.tpch.my_second_model"],
    "model.tpch.my_second_model": [],
    "model.tpch.json_parse_example": [],
    "model.tpch.materialization_incremental": [
      "test.tpch.not_null_materialization_incremental_customer_key.e2b95d8009",
      "test.tpch.unique_materialization_incremental_customer_key.325783f327"
    ],
    "analysis.tpch.select_from_orders_example": [],
    "test.tpch.macro_stg_tpch_orders_assert_pos_price": [],
    "test.tpch.stg_tpch_orders_assert_positive_price": [],
    "test.tpch.macro_stg_tphc_suppliers_assert_pos_acct_bal": [],
    "seed.tpch.json_example": ["model.tpch.json_parse_example"],
    "seed.tpch.snowflake_contract_rates": [],
    "operation.tpch.tpch-on-run-start-0": [],
    "operation.tpch.tpch-on-run-start-1": [],
    "operation.tpch.tpch-on-run-end-0": [],
    "operation.tpch.tpch-on-run-end-1": [],
    "model.dbt_artifacts.fct_dbt__latest_full_model_executions": [
      "model.dbt_artifacts.fct_dbt__critical_path",
      "test.dbt_artifacts.not_null_fct_dbt__latest_full_model_executions_node_id.75b07a2f66",
      "test.dbt_artifacts.unique_fct_dbt__latest_full_model_executions_node_id.b6f2773b6c"
    ],
    "model.dbt_artifacts.fct_dbt__exposures_updates": [],
    "model.dbt_artifacts.fct_dbt__critical_path": [
      "test.dbt_artifacts.not_null_fct_dbt__critical_path_node_id.8a76d88496",
      "test.dbt_artifacts.unique_fct_dbt__critical_path_node_id.a430b9cf10"
    ],
    "model.dbt_artifacts.stg_dbt__models": [
      "model.dbt_artifacts.dim_dbt__models",
      "model.dbt_artifacts.fct_dbt__critical_path"
    ],
    "model.dbt_artifacts.stg_dbt__run_results_env_keys": [
      "model.dbt_artifacts.fct_dbt__run_results"
    ],
    "model.dbt_artifacts.stg_dbt__exposures": [
      "model.dbt_artifacts.dim_dbt__exposures"
    ],
    "model.dbt_artifacts.stg_dbt__test_executions": [
      "model.dbt_artifacts.fct_dbt__test_executions"
    ],
    "model.dbt_artifacts.stg_dbt__sources": [
      "model.dbt_artifacts.dim_dbt__sources"
    ],
    "model.dbt_artifacts.stg_dbt__artifacts": [
      "model.dbt_artifacts.stg_dbt__exposures",
      "model.dbt_artifacts.stg_dbt__model_executions",
      "model.dbt_artifacts.stg_dbt__models",
      "model.dbt_artifacts.stg_dbt__run_results",
      "model.dbt_artifacts.stg_dbt__run_results_env_keys",
      "model.dbt_artifacts.stg_dbt__sources",
      "model.dbt_artifacts.stg_dbt__test_executions"
    ],
    "model.dbt_artifacts.stg_dbt__model_executions": [
      "model.dbt_artifacts.int_dbt__model_executions"
    ],
    "model.dbt_artifacts.stg_dbt__run_results": [
      "model.dbt_artifacts.fct_dbt__run_results"
    ],
    "model.dbt_artifacts.int_dbt__model_executions": [
      "model.dbt_artifacts.fct_dbt__model_executions"
    ],
    "model.dbt_artifacts.fct_dbt__test_executions": [],
    "model.dbt_artifacts.fct_dbt__model_executions": [
      "model.dbt_artifacts.fct_dbt__exposures_updates",
      "model.dbt_artifacts.fct_dbt__latest_full_model_executions",
      "test.dbt_artifacts.not_null_fct_dbt__model_executions_model_execution_id.ecb7ddbb69",
      "test.dbt_artifacts.unique_fct_dbt__model_executions_model_execution_id.ab9f314f59"
    ],
    "model.dbt_artifacts.dim_dbt__sources": [
      "test.dbt_artifacts.not_null_dim_dbt__sources_manifest_source_id.34e9829000",
      "test.dbt_artifacts.unique_dim_dbt__sources_manifest_source_id.a9a1a372ce"
    ],
    "model.dbt_artifacts.dim_dbt__exposures": [
      "model.dbt_artifacts.fct_dbt__exposures_updates",
      "test.dbt_artifacts.not_null_dim_dbt__exposures_manifest_model_id.1cfdaa0c94",
      "test.dbt_artifacts.unique_dim_dbt__exposures_manifest_model_id_output_feeds.b0bf30fb44"
    ],
    "model.dbt_artifacts.dim_dbt__models": [
      "model.dbt_artifacts.fct_dbt__model_executions",
      "test.dbt_artifacts.not_null_dim_dbt__models_manifest_model_id.df81d26c60",
      "test.dbt_artifacts.unique_dim_dbt__models_manifest_model_id.c105319f3e"
    ],
    "model.dbt_artifacts.fct_dbt__run_results": [
      "model.dbt_artifacts.fct_dbt__latest_full_model_executions",
      "test.dbt_artifacts.not_null_fct_dbt__run_results_command_invocation_id.11abc48935",
      "test.dbt_artifacts.unique_fct_dbt__run_results_command_invocation_id.08941b96a3"
    ],
    "test.tpch.unique_stg_tpch_customers_customer_key.7f1a18b1a4": [],
    "test.tpch.not_null_stg_tpch_customers_customer_key.a10e15535a": [],
    "test.tpch.unique_stg_tpch_line_items_order_item_key.c819d91e0a": [],
    "test.tpch.not_null_stg_tpch_line_items_order_item_key.cd47c7a679": [],
    "test.tpch.unique_stg_tpch_nations_nation_key.9e3675553d": [],
    "test.tpch.not_null_stg_tpch_nations_nation_key.d0c2fe32ed": [],
    "test.tpch.unique_stg_tpch_orders_order_key.bd29f13cc9": [],
    "test.tpch.not_null_stg_tpch_orders_order_key.bb22e75ae8": [],
    "test.tpch.unique_stg_tpch_part_suppliers_part_supplier_key.96ab01c1ae": [],
    "test.tpch.not_null_stg_tpch_part_suppliers_part_supplier_key.3cc6ccee2e": [],
    "test.tpch.unique_stg_tpch_parts_part_key.afbc7ad489": [],
    "test.tpch.not_null_stg_tpch_parts_part_key.cc8e610420": [],
    "test.tpch.unique_stg_tpch_regions_region_key.b2bd891bb5": [],
    "test.tpch.not_null_stg_tpch_regions_region_key.869fa0b326": [],
    "test.tpch.unique_stg_tpch_suppliers_supplier_key.6215308464": [],
    "test.tpch.not_null_stg_tpch_suppliers_supplier_key.97c31a786d": [],
    "test.tpch.unique_dim_customers_customer_key.ad8156656e": [],
    "test.tpch.not_null_dim_customers_customer_key.4bebfb3411": [],
    "test.tpch.accepted_values_dim_customers_region__AFRICA__MIDDLE_EAST__ASIA__EUROPE__AMERICA.dad4601b69": [],
    "test.tpch.unique_dim_customers_market_segment.eb7a5b1954": [],
    "test.tpch.not_null_dim_customers_market_segment.5800ff84dd": [],
    "test.tpch.unique_dim_parts_part_key.712df18d58": [],
    "test.tpch.not_null_dim_parts_part_key.4358f880d9": [],
    "test.tpch.unique_dim_suppliers_supplier_key.58fc3e4770": [],
    "test.tpch.not_null_dim_suppliers_supplier_key.4315350956": [],
    "test.tpch.unique_fct_order_items_order_item_key.4d6426a255": [],
    "test.tpch.not_null_fct_order_items_order_item_key.47516a6371": [],
    "test.tpch.unique_fct_orders_order_key.f5e7a90273": [],
    "test.tpch.not_null_fct_orders_order_key.6a6f83ab15": [],
    "test.tpch.relationships_fct_orders_customer_key__customer_key__ref_dim_customers_.018eb0a60b": [],
    "test.tpch.unique_order_items_order_item_key.43a40b2837": [],
    "test.tpch.not_null_order_items_order_item_key.44b9fa7311": [],
    "test.tpch.unique_part_suppliers_part_supplier_key.909477afa8": [],
    "test.tpch.not_null_part_suppliers_part_supplier_key.b8b2022ed3": [],
    "test.tpch.unique_materialization_incremental_customer_key.325783f327": [],
    "test.tpch.not_null_materialization_incremental_customer_key.e2b95d8009": [],
    "test.tpch.unique_use_variables_order_item_key.fb5576fe0e": [],
    "test.tpch.not_null_use_variables_order_item_key.c2bd602686": [],
    "test.dbt_artifacts.unique_fct_dbt__critical_path_node_id.a430b9cf10": [],
    "test.dbt_artifacts.not_null_fct_dbt__critical_path_node_id.8a76d88496": [],
    "test.dbt_artifacts.unique_fct_dbt__latest_full_model_executions_node_id.b6f2773b6c": [],
    "test.dbt_artifacts.not_null_fct_dbt__latest_full_model_executions_node_id.75b07a2f66": [],
    "test.dbt_artifacts.unique_fct_dbt__model_executions_model_execution_id.ab9f314f59": [],
    "test.dbt_artifacts.not_null_fct_dbt__model_executions_model_execution_id.ecb7ddbb69": [],
    "test.dbt_artifacts.unique_fct_dbt__run_results_command_invocation_id.08941b96a3": [],
    "test.dbt_artifacts.not_null_fct_dbt__run_results_command_invocation_id.11abc48935": [],
    "test.dbt_artifacts.not_null_dim_dbt__exposures_manifest_model_id.1cfdaa0c94": [],
    "test.dbt_artifacts.unique_dim_dbt__exposures_manifest_model_id_output_feeds.b0bf30fb44": [],
    "test.dbt_artifacts.unique_dim_dbt__models_manifest_model_id.c105319f3e": [],
    "test.dbt_artifacts.not_null_dim_dbt__models_manifest_model_id.df81d26c60": [],
    "test.dbt_artifacts.unique_dim_dbt__sources_manifest_source_id.a9a1a372ce": [],
    "test.dbt_artifacts.not_null_dim_dbt__sources_manifest_source_id.34e9829000": [],
    "test.tpch.source_unique_tpch_test_orders_o_orderkey.4d1934eb1c": [],
    "test.tpch.source_not_null_tpch_test_orders_o_orderkey.d6ff547290": [],
    "test.tpch.source_relationships_tpch_test_orders_o_custkey__c_custkey__source_tpch_customer_.5a12f1aafc": [],
    "test.tpch.source_unique_tpch_test_customer_c_custkey.31760e8287": [],
    "test.tpch.source_not_null_tpch_test_customer_c_custkey.9e6cb29a5b": [],
    "test.tpch.source_relationships_tpch_test_lineitem_l_orderkey__o_orderkey__source_tpch_orders_.fbadfea2d3": [],
    "test.tpch.source_relationships_tpch_test_lineitem_l_partkey__p_partkey__source_tpch_part_.256ef70c92": [],
    "test.tpch.source_relationships_tpch_test_lineitem_l_suppkey__s_suppkey__source_tpch_supplier_.05dc4fdd6e": [],
    "test.tpch.source_unique_tpch_test_nation_n_nationkey.22426159f9": [],
    "test.tpch.source_not_null_tpch_test_nation_n_nationkey.2431180b9e": [],
    "test.tpch.source_relationships_tpch_test_nation_n_regionkey__r_regionkey__source_tpch_region_.3ea25d1fcf": [],
    "test.tpch.source_unique_tpch_test_part_p_partkey.45789f2d24": [],
    "test.tpch.source_not_null_tpch_test_part_p_partkey.c9a9cf8755": [],
    "test.tpch.source_relationships_tpch_test_partsupp_ps_partkey__p_partkey__source_tpch_part_.c1a053c227": [],
    "test.tpch.source_relationships_tpch_test_partsupp_ps_suppkey__s_suppkey__source_tpch_supplier_.ebe51d8541": [],
    "test.tpch.source_unique_tpch_test_region_r_regionkey.b7972dd9cb": [],
    "test.tpch.source_not_null_tpch_test_region_r_regionkey.cce2078c1d": [],
    "test.tpch.source_unique_tpch_test_supplier_s_suppkey.5d9e8c610c": [],
    "test.tpch.source_not_null_tpch_test_supplier_s_suppkey.91f5ca302b": [],
    "test.tpch.source_relationships_tpch_test_supplier_s_nationkey__n_nationkey__source_tpch_nation_.bcb9e54582": [],
    "source.tpch.tpch_test.orders": [
      "model.tpch.stg_tpch_orders",
      "test.tpch.source_not_null_tpch_test_orders_o_orderkey.d6ff547290",
      "test.tpch.source_relationships_tpch_test_orders_o_custkey__c_custkey__source_tpch_customer_.5a12f1aafc",
      "test.tpch.source_unique_tpch_test_orders_o_orderkey.4d1934eb1c"
    ],
    "source.tpch.tpch_test.customer": [
      "model.tpch.materialization_incremental",
      "model.tpch.stg_tpch_customers",
      "test.tpch.source_not_null_tpch_test_customer_c_custkey.9e6cb29a5b",
      "test.tpch.source_unique_tpch_test_customer_c_custkey.31760e8287"
    ],
    "source.tpch.tpch_test.lineitem": [
      "model.tpch.stg_tpch_line_items",
      "test.tpch.source_relationships_tpch_test_lineitem_l_orderkey__o_orderkey__source_tpch_orders_.fbadfea2d3",
      "test.tpch.source_relationships_tpch_test_lineitem_l_partkey__p_partkey__source_tpch_part_.256ef70c92",
      "test.tpch.source_relationships_tpch_test_lineitem_l_suppkey__s_suppkey__source_tpch_supplier_.05dc4fdd6e"
    ],
    "source.tpch.tpch_test.nation": [
      "model.tpch.stg_tpch_nations",
      "test.tpch.source_not_null_tpch_test_nation_n_nationkey.2431180b9e",
      "test.tpch.source_relationships_tpch_test_nation_n_regionkey__r_regionkey__source_tpch_region_.3ea25d1fcf",
      "test.tpch.source_unique_tpch_test_nation_n_nationkey.22426159f9"
    ],
    "source.tpch.tpch_test.part": [
      "model.tpch.stg_tpch_parts",
      "test.tpch.source_not_null_tpch_test_part_p_partkey.c9a9cf8755",
      "test.tpch.source_unique_tpch_test_part_p_partkey.45789f2d24"
    ],
    "source.tpch.tpch_test.partsupp": [
      "model.tpch.stg_tpch_part_suppliers",
      "test.tpch.source_relationships_tpch_test_partsupp_ps_partkey__p_partkey__source_tpch_part_.c1a053c227",
      "test.tpch.source_relationships_tpch_test_partsupp_ps_suppkey__s_suppkey__source_tpch_supplier_.ebe51d8541"
    ],
    "source.tpch.tpch_test.region": [
      "model.tpch.stg_tpch_regions",
      "test.tpch.source_not_null_tpch_test_region_r_regionkey.cce2078c1d",
      "test.tpch.source_unique_tpch_test_region_r_regionkey.b7972dd9cb"
    ],
    "source.tpch.tpch_test.supplier": [
      "model.tpch.stg_tpch_suppliers",
      "test.tpch.source_not_null_tpch_test_supplier_s_suppkey.91f5ca302b",
      "test.tpch.source_relationships_tpch_test_supplier_s_nationkey__n_nationkey__source_tpch_nation_.bcb9e54582",
      "test.tpch.source_unique_tpch_test_supplier_s_suppkey.5d9e8c610c"
    ],
    "source.tpch.deutsche_boerse.trading_data": [],
    "source.dbt_artifacts.dbt_artifacts.artifacts": [
      "model.dbt_artifacts.stg_dbt__artifacts"
    ],
    "exposure.tpch.yearly_part_rollup": []
  }
}
